
example_freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008418  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080085f8  080085f8  000185f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008710  08008710  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008718  08008718  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008718  08008718  00018718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800871c  0800871c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055d0  20000060  08008780  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005630  08008780  00025630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015858  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035b7  00000000  00000000  0003592b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  00038ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000de4  00000000  00000000  0003a108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f50e  00000000  00000000  0003aeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001589f  00000000  00000000  0005a3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c128c  00000000  00000000  0006fc99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ed8  00000000  00000000  00130f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00135e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	080085e0 	.word	0x080085e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	080085e0 	.word	0x080085e0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b970 	b.w	80005c8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9e08      	ldr	r6, [sp, #32]
 8000306:	460d      	mov	r5, r1
 8000308:	4604      	mov	r4, r0
 800030a:	460f      	mov	r7, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4694      	mov	ip, r2
 8000314:	d965      	bls.n	80003e2 <__udivmoddi4+0xe2>
 8000316:	fab2 f382 	clz	r3, r2
 800031a:	b143      	cbz	r3, 800032e <__udivmoddi4+0x2e>
 800031c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000320:	f1c3 0220 	rsb	r2, r3, #32
 8000324:	409f      	lsls	r7, r3
 8000326:	fa20 f202 	lsr.w	r2, r0, r2
 800032a:	4317      	orrs	r7, r2
 800032c:	409c      	lsls	r4, r3
 800032e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000332:	fa1f f58c 	uxth.w	r5, ip
 8000336:	fbb7 f1fe 	udiv	r1, r7, lr
 800033a:	0c22      	lsrs	r2, r4, #16
 800033c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000340:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000344:	fb01 f005 	mul.w	r0, r1, r5
 8000348:	4290      	cmp	r0, r2
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x62>
 800034c:	eb1c 0202 	adds.w	r2, ip, r2
 8000350:	f101 37ff 	add.w	r7, r1, #4294967295
 8000354:	f080 811c 	bcs.w	8000590 <__udivmoddi4+0x290>
 8000358:	4290      	cmp	r0, r2
 800035a:	f240 8119 	bls.w	8000590 <__udivmoddi4+0x290>
 800035e:	3902      	subs	r1, #2
 8000360:	4462      	add	r2, ip
 8000362:	1a12      	subs	r2, r2, r0
 8000364:	b2a4      	uxth	r4, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000372:	fb00 f505 	mul.w	r5, r0, r5
 8000376:	42a5      	cmp	r5, r4
 8000378:	d90a      	bls.n	8000390 <__udivmoddi4+0x90>
 800037a:	eb1c 0404 	adds.w	r4, ip, r4
 800037e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000382:	f080 8107 	bcs.w	8000594 <__udivmoddi4+0x294>
 8000386:	42a5      	cmp	r5, r4
 8000388:	f240 8104 	bls.w	8000594 <__udivmoddi4+0x294>
 800038c:	4464      	add	r4, ip
 800038e:	3802      	subs	r0, #2
 8000390:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000394:	1b64      	subs	r4, r4, r5
 8000396:	2100      	movs	r1, #0
 8000398:	b11e      	cbz	r6, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40dc      	lsrs	r4, r3
 800039c:	2300      	movs	r3, #0
 800039e:	e9c6 4300 	strd	r4, r3, [r6]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0xbc>
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	f000 80ed 	beq.w	800058a <__udivmoddi4+0x28a>
 80003b0:	2100      	movs	r1, #0
 80003b2:	e9c6 0500 	strd	r0, r5, [r6]
 80003b6:	4608      	mov	r0, r1
 80003b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003bc:	fab3 f183 	clz	r1, r3
 80003c0:	2900      	cmp	r1, #0
 80003c2:	d149      	bne.n	8000458 <__udivmoddi4+0x158>
 80003c4:	42ab      	cmp	r3, r5
 80003c6:	d302      	bcc.n	80003ce <__udivmoddi4+0xce>
 80003c8:	4282      	cmp	r2, r0
 80003ca:	f200 80f8 	bhi.w	80005be <__udivmoddi4+0x2be>
 80003ce:	1a84      	subs	r4, r0, r2
 80003d0:	eb65 0203 	sbc.w	r2, r5, r3
 80003d4:	2001      	movs	r0, #1
 80003d6:	4617      	mov	r7, r2
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d0e2      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	e9c6 4700 	strd	r4, r7, [r6]
 80003e0:	e7df      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003e2:	b902      	cbnz	r2, 80003e6 <__udivmoddi4+0xe6>
 80003e4:	deff      	udf	#255	; 0xff
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8090 	bne.w	8000510 <__udivmoddi4+0x210>
 80003f0:	1a8a      	subs	r2, r1, r2
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2101      	movs	r1, #1
 80003fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000400:	fb07 2015 	mls	r0, r7, r5, r2
 8000404:	0c22      	lsrs	r2, r4, #16
 8000406:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800040a:	fb0e f005 	mul.w	r0, lr, r5
 800040e:	4290      	cmp	r0, r2
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x124>
 8000412:	eb1c 0202 	adds.w	r2, ip, r2
 8000416:	f105 38ff 	add.w	r8, r5, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x122>
 800041c:	4290      	cmp	r0, r2
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2b8>
 8000422:	4645      	mov	r5, r8
 8000424:	1a12      	subs	r2, r2, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb2 f0f7 	udiv	r0, r2, r7
 800042c:	fb07 2210 	mls	r2, r7, r0, r2
 8000430:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x14e>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 32ff 	add.w	r2, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x14c>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2c2>
 800044c:	4610      	mov	r0, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000456:	e79f      	b.n	8000398 <__udivmoddi4+0x98>
 8000458:	f1c1 0720 	rsb	r7, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa05 f401 	lsl.w	r4, r5, r1
 800046a:	fa20 f307 	lsr.w	r3, r0, r7
 800046e:	40fd      	lsrs	r5, r7
 8000470:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000474:	4323      	orrs	r3, r4
 8000476:	fbb5 f8f9 	udiv	r8, r5, r9
 800047a:	fa1f fe8c 	uxth.w	lr, ip
 800047e:	fb09 5518 	mls	r5, r9, r8, r5
 8000482:	0c1c      	lsrs	r4, r3, #16
 8000484:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000488:	fb08 f50e 	mul.w	r5, r8, lr
 800048c:	42a5      	cmp	r5, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	fa00 f001 	lsl.w	r0, r0, r1
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b0>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2b4>
 80004a4:	42a5      	cmp	r5, r4
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2b4>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4464      	add	r4, ip
 80004b0:	1b64      	subs	r4, r4, r5
 80004b2:	b29d      	uxth	r5, r3
 80004b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b8:	fb09 4413 	mls	r4, r9, r3, r4
 80004bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004c4:	45a6      	cmp	lr, r4
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1da>
 80004c8:	eb1c 0404 	adds.w	r4, ip, r4
 80004cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2ac>
 80004d2:	45a6      	cmp	lr, r4
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2ac>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	4464      	add	r4, ip
 80004da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004de:	fba3 9502 	umull	r9, r5, r3, r2
 80004e2:	eba4 040e 	sub.w	r4, r4, lr
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46ae      	mov	lr, r5
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x29c>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x298>
 80004f0:	b156      	cbz	r6, 8000508 <__udivmoddi4+0x208>
 80004f2:	ebb0 0208 	subs.w	r2, r0, r8
 80004f6:	eb64 040e 	sbc.w	r4, r4, lr
 80004fa:	fa04 f707 	lsl.w	r7, r4, r7
 80004fe:	40ca      	lsrs	r2, r1
 8000500:	40cc      	lsrs	r4, r1
 8000502:	4317      	orrs	r7, r2
 8000504:	e9c6 7400 	strd	r7, r4, [r6]
 8000508:	4618      	mov	r0, r3
 800050a:	2100      	movs	r1, #0
 800050c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000510:	f1c3 0120 	rsb	r1, r3, #32
 8000514:	fa02 fc03 	lsl.w	ip, r2, r3
 8000518:	fa20 f201 	lsr.w	r2, r0, r1
 800051c:	fa25 f101 	lsr.w	r1, r5, r1
 8000520:	409d      	lsls	r5, r3
 8000522:	432a      	orrs	r2, r5
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000530:	fb07 1510 	mls	r5, r7, r0, r1
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800053a:	fb00 f50e 	mul.w	r5, r0, lr
 800053e:	428d      	cmp	r5, r1
 8000540:	fa04 f403 	lsl.w	r4, r4, r3
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x258>
 8000546:	eb1c 0101 	adds.w	r1, ip, r1
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b0>
 8000550:	428d      	cmp	r5, r1
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b0>
 8000554:	3802      	subs	r0, #2
 8000556:	4461      	add	r1, ip
 8000558:	1b49      	subs	r1, r1, r5
 800055a:	b292      	uxth	r2, r2
 800055c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000560:	fb07 1115 	mls	r1, r7, r5, r1
 8000564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000568:	fb05 f10e 	mul.w	r1, r5, lr
 800056c:	4291      	cmp	r1, r2
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x282>
 8000570:	eb1c 0202 	adds.w	r2, ip, r2
 8000574:	f105 38ff 	add.w	r8, r5, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2a8>
 800057a:	4291      	cmp	r1, r2
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2a8>
 800057e:	3d02      	subs	r5, #2
 8000580:	4462      	add	r2, ip
 8000582:	1a52      	subs	r2, r2, r1
 8000584:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0xfc>
 800058a:	4631      	mov	r1, r6
 800058c:	4630      	mov	r0, r6
 800058e:	e708      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000590:	4639      	mov	r1, r7
 8000592:	e6e6      	b.n	8000362 <__udivmoddi4+0x62>
 8000594:	4610      	mov	r0, r2
 8000596:	e6fb      	b.n	8000390 <__udivmoddi4+0x90>
 8000598:	4548      	cmp	r0, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f0>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005a4:	3b01      	subs	r3, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f0>
 80005a8:	4645      	mov	r5, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x282>
 80005ac:	462b      	mov	r3, r5
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1da>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x258>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b0>
 80005b8:	3d02      	subs	r5, #2
 80005ba:	4462      	add	r2, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x124>
 80005be:	4608      	mov	r0, r1
 80005c0:	e70a      	b.n	80003d8 <__udivmoddi4+0xd8>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x14e>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0

}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
return 0;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
	...

080005ec <printk>:
TimerHandle_t 			button_tm;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void printk(char *string, TickType_t timeout) {
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	6039      	str	r1, [r7, #0]
	if (xSemaphoreTake(mutex_lpuart, timeout) == pdTRUE){
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <printk+0x4c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6839      	ldr	r1, [r7, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 f933 	bl	8004868 <xQueueSemaphoreTake>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d112      	bne.n	800062e <printk+0x42>
		(void)xMessageBufferSend(print_messages_buffer, string, strlen(string), portMAX_DELAY);
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <printk+0x50>)
 800060a:	681c      	ldr	r4, [r3, #0]
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff fe07 	bl	8000220 <strlen>
 8000612:	4602      	mov	r2, r0
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	4620      	mov	r0, r4
 800061c:	f004 fc44 	bl	8004ea8 <xStreamBufferSend>
		xSemaphoreGive(mutex_lpuart);
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <printk+0x4c>)
 8000622:	6818      	ldr	r0, [r3, #0]
 8000624:	2300      	movs	r3, #0
 8000626:	2200      	movs	r2, #0
 8000628:	2100      	movs	r1, #0
 800062a:	f003 fe17 	bl	800425c <xQueueGenericSend>
	}
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bd90      	pop	{r4, r7, pc}
 8000636:	bf00      	nop
 8000638:	20000110 	.word	0x20000110
 800063c:	2000011c 	.word	0x2000011c

08000640 <read_button>:

BaseType_t read_button(uint8_t *button, TickType_t timeout){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
	return xQueueReceive(queue_button, button, timeout);
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <read_button+0x24>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	4618      	mov	r0, r3
 8000654:	f004 f828 	bl	80046a8 <xQueueReceive>
 8000658:	4603      	mov	r3, r0
}
 800065a:	4618      	mov	r0, r3
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000118 	.word	0x20000118

08000668 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(sem_lpuart, &pxHigherPriorityTaskWoken);
 8000674:	4b0b      	ldr	r3, [pc, #44]	; (80006a4 <HAL_UART_TxCpltCallback+0x3c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f107 020c 	add.w	r2, r7, #12
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f003 ff85 	bl	800458e <xQueueGiveFromISR>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d007      	beq.n	800069a <HAL_UART_TxCpltCallback+0x32>
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <HAL_UART_TxCpltCallback+0x40>)
 800068c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	f3bf 8f4f 	dsb	sy
 8000696:	f3bf 8f6f 	isb	sy
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000114 	.word	0x20000114
 80006a8:	e000ed04 	.word	0xe000ed04

080006ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80006ac:	b590      	push	{r4, r7, lr}
 80006ae:	b087      	sub	sp, #28
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	4603      	mov	r3, r0
 80006b4:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_13) {
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006bc:	d11c      	bne.n	80006f8 <HAL_GPIO_EXTI_Callback+0x4c>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80006be:	2028      	movs	r0, #40	; 0x28
 80006c0:	f000 fd31 	bl	8001126 <HAL_NVIC_DisableIRQ>
	portBASE_TYPE pxHigherPriorityTaskWoken = pdFALSE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
    xTimerStartFromISR(button_tm, &pxHigherPriorityTaskWoken);
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_GPIO_EXTI_Callback+0x54>)
 80006ca:	681c      	ldr	r4, [r3, #0]
 80006cc:	f005 f9ec 	bl	8005aa8 <xTaskGetTickCountFromISR>
 80006d0:	4602      	mov	r2, r0
 80006d2:	f107 030c 	add.w	r3, r7, #12
 80006d6:	2100      	movs	r1, #0
 80006d8:	9100      	str	r1, [sp, #0]
 80006da:	2106      	movs	r1, #6
 80006dc:	4620      	mov	r0, r4
 80006de:	f006 fb67 	bl	8006db0 <xTimerGenericCommand>
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d007      	beq.n	80006f8 <HAL_GPIO_EXTI_Callback+0x4c>
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <HAL_GPIO_EXTI_Callback+0x58>)
 80006ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	f3bf 8f4f 	dsb	sy
 80006f4:	f3bf 8f6f 	isb	sy
  }
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd90      	pop	{r4, r7, pc}
 8000700:	20000124 	.word	0x20000124
 8000704:	e000ed04 	.word	0xe000ed04

08000708 <button_cb>:

void button_cb(TimerHandle_t xTimer) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  (void) xTimer;
	if (HAL_GPIO_ReadPin(GPIOC, BUTTON_0) == GPIO_PIN_RESET) {
 8000710:	2100      	movs	r1, #0
 8000712:	480d      	ldr	r0, [pc, #52]	; (8000748 <button_cb+0x40>)
 8000714:	f000 ff64 	bl	80015e0 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d109      	bne.n	8000732 <button_cb+0x2a>
		// guardar em uma fila de botões
		uint8_t button = BUTTON_0;
 800071e:	2300      	movs	r3, #0
 8000720:	73fb      	strb	r3, [r7, #15]
		xQueueSend(queue_button, &button, 0);
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <button_cb+0x44>)
 8000724:	6818      	ldr	r0, [r3, #0]
 8000726:	f107 010f 	add.w	r1, r7, #15
 800072a:	2300      	movs	r3, #0
 800072c:	2200      	movs	r2, #0
 800072e:	f003 fd95 	bl	800425c <xQueueGenericSend>
	}

	__HAL_GPIO_EXTI_CLEAR_IT(BUTTON_0);
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <button_cb+0x48>)
 8000734:	2200      	movs	r2, #0
 8000736:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000738:	2028      	movs	r0, #40	; 0x28
 800073a:	f000 fce6 	bl	800110a <HAL_NVIC_EnableIRQ>
}
 800073e:	bf00      	nop
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	48000800 	.word	0x48000800
 800074c:	20000118 	.word	0x20000118
 8000750:	40010400 	.word	0x40010400

08000754 <led_blinky_cb>:

void led_blinky_cb(TimerHandle_t xTimer) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  (void) xTimer;
  HAL_GPIO_TogglePin(USER_LED_GPIO_Port, USER_LED_Pin);
 800075c:	2120      	movs	r1, #32
 800075e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000762:	f000 ff6d 	bl	8001640 <HAL_GPIO_TogglePin>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <sobra_cpu>:

static void sobra_cpu(void *param){
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af02      	add	r7, sp, #8
 8000776:	6078      	str	r0, [r7, #4]
	uint32_t cnt = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
	while(1){
		cnt++;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	3301      	adds	r3, #1
 8000780:	60fb      	str	r3, [r7, #12]
		if (cnt == 100000000) {
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <sobra_cpu+0x30>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d1f8      	bne.n	800077c <sobra_cpu+0xc>
			xTimerChangePeriod(blinky_tm, 1000, 0);
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <sobra_cpu+0x34>)
 800078c:	6818      	ldr	r0, [r3, #0]
 800078e:	2300      	movs	r3, #0
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2300      	movs	r3, #0
 8000794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000798:	2104      	movs	r1, #4
 800079a:	f006 fb09 	bl	8006db0 <xTimerGenericCommand>
		cnt++;
 800079e:	e7ed      	b.n	800077c <sobra_cpu+0xc>
 80007a0:	05f5e100 	.word	0x05f5e100
 80007a4:	20000120 	.word	0x20000120

080007a8 <print_task>:
		}
	}
}

static void print_task(void *param){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80007b4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80007b8:	6018      	str	r0, [r3, #0]
	char mensagem[512];
	while(1){
		size_t len = xMessageBufferReceive(print_messages_buffer, mensagem, 512, portMAX_DELAY);
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <print_task+0x54>)
 80007bc:	6818      	ldr	r0, [r3, #0]
 80007be:	f107 010c 	add.w	r1, r7, #12
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007ca:	f004 fc5f 	bl	800508c <xStreamBufferReceive>
 80007ce:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
		if (len) {
 80007d2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d0ef      	beq.n	80007ba <print_task+0x12>
			HAL_UART_Transmit_IT(&hlpuart1, (uint8_t *)mensagem, len);
 80007da:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80007de:	b29a      	uxth	r2, r3
 80007e0:	f107 030c 	add.w	r3, r7, #12
 80007e4:	4619      	mov	r1, r3
 80007e6:	4806      	ldr	r0, [pc, #24]	; (8000800 <print_task+0x58>)
 80007e8:	f001 ff74 	bl	80026d4 <HAL_UART_Transmit_IT>
			xSemaphoreTake(sem_lpuart, portMAX_DELAY);
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <print_task+0x5c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f04f 31ff 	mov.w	r1, #4294967295
 80007f4:	4618      	mov	r0, r3
 80007f6:	f004 f837 	bl	8004868 <xQueueSemaphoreTake>
	while(1){
 80007fa:	e7de      	b.n	80007ba <print_task+0x12>
 80007fc:	2000011c 	.word	0x2000011c
 8000800:	2000007c 	.word	0x2000007c
 8000804:	20000114 	.word	0x20000114

08000808 <keyboard_task>:
		}
	}
}

static void keyboard_task(void *param){
 8000808:	b580      	push	{r7, lr}
 800080a:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800080e:	af00      	add	r7, sp, #0
 8000810:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8000814:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8000818:	6018      	str	r0, [r3, #0]
	uint8_t button;
	char buffer[512];
	while(1){
		(void)read_button(&button, portMAX_DELAY);
 800081a:	f207 230f 	addw	r3, r7, #527	; 0x20f
 800081e:	f04f 31ff 	mov.w	r1, #4294967295
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff0c 	bl	8000640 <read_button>
		if (button == BUTTON_0) {
 8000828:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f4      	bne.n	800081a <keyboard_task+0x12>
			vTaskList(buffer);
 8000830:	f107 030c 	add.w	r3, r7, #12
 8000834:	4618      	mov	r0, r3
 8000836:	f005 ffd9 	bl	80067ec <vTaskList>
			printk(buffer, 10);
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	210a      	movs	r1, #10
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff fed3 	bl	80005ec <printk>
		(void)read_button(&button, portMAX_DELAY);
 8000846:	e7e8      	b.n	800081a <keyboard_task+0x12>

08000848 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000848:	b5b0      	push	{r4, r5, r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800084e:	f000 fad2 	bl	8000df6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000852:	f000 f89d 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000856:	f000 f92f 	bl	8000ab8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800085a:	f000 f8e3 	bl	8000a24 <MX_LPUART1_UART_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  mutex_lpuart = xSemaphoreCreateMutex();
 800085e:	2001      	movs	r0, #1
 8000860:	f003 fce3 	bl	800422a <xQueueCreateMutex>
 8000864:	4603      	mov	r3, r0
 8000866:	4a38      	ldr	r2, [pc, #224]	; (8000948 <main+0x100>)
 8000868:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  sem_lpuart = xSemaphoreCreateBinary();
 800086a:	2203      	movs	r2, #3
 800086c:	2100      	movs	r1, #0
 800086e:	2001      	movs	r0, #1
 8000870:	f003 fc68 	bl	8004144 <xQueueGenericCreate>
 8000874:	4603      	mov	r3, r0
 8000876:	4a35      	ldr	r2, [pc, #212]	; (800094c <main+0x104>)
 8000878:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  blinky_tm = xTimerCreate("Blink timer", pdMS_TO_TICKS(200), pdTRUE, NULL, led_blinky_cb);
 800087a:	4b35      	ldr	r3, [pc, #212]	; (8000950 <main+0x108>)
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2300      	movs	r3, #0
 8000880:	2201      	movs	r2, #1
 8000882:	21c8      	movs	r1, #200	; 0xc8
 8000884:	4833      	ldr	r0, [pc, #204]	; (8000954 <main+0x10c>)
 8000886:	f006 fa37 	bl	8006cf8 <xTimerCreate>
 800088a:	4603      	mov	r3, r0
 800088c:	4a32      	ldr	r2, [pc, #200]	; (8000958 <main+0x110>)
 800088e:	6013      	str	r3, [r2, #0]
  xTimerStart(blinky_tm, 0);
 8000890:	4b31      	ldr	r3, [pc, #196]	; (8000958 <main+0x110>)
 8000892:	681c      	ldr	r4, [r3, #0]
 8000894:	f005 f8f8 	bl	8005a88 <xTaskGetTickCount>
 8000898:	4602      	mov	r2, r0
 800089a:	2300      	movs	r3, #0
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2300      	movs	r3, #0
 80008a0:	2101      	movs	r1, #1
 80008a2:	4620      	mov	r0, r4
 80008a4:	f006 fa84 	bl	8006db0 <xTimerGenericCommand>
  button_tm = xTimerCreate("Button timer", pdMS_TO_TICKS(100), pdFALSE, NULL, button_cb);
 80008a8:	4b2c      	ldr	r3, [pc, #176]	; (800095c <main+0x114>)
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	2300      	movs	r3, #0
 80008ae:	2200      	movs	r2, #0
 80008b0:	2164      	movs	r1, #100	; 0x64
 80008b2:	482b      	ldr	r0, [pc, #172]	; (8000960 <main+0x118>)
 80008b4:	f006 fa20 	bl	8006cf8 <xTimerCreate>
 80008b8:	4603      	mov	r3, r0
 80008ba:	4a2a      	ldr	r2, [pc, #168]	; (8000964 <main+0x11c>)
 80008bc:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  queue_button = xQueueCreate(128, sizeof(uint8_t));
 80008be:	2200      	movs	r2, #0
 80008c0:	2101      	movs	r1, #1
 80008c2:	2080      	movs	r0, #128	; 0x80
 80008c4:	f003 fc3e 	bl	8004144 <xQueueGenericCreate>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a27      	ldr	r2, [pc, #156]	; (8000968 <main+0x120>)
 80008cc:	6013      	str	r3, [r2, #0]
  print_messages_buffer = xMessageBufferCreate(1024);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2100      	movs	r1, #0
 80008d2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80008d6:	f004 fa59 	bl	8004d8c <xStreamBufferGenericCreate>
 80008da:	4603      	mov	r3, r0
 80008dc:	4a23      	ldr	r2, [pc, #140]	; (800096c <main+0x124>)
 80008de:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80008e0:	4b23      	ldr	r3, [pc, #140]	; (8000970 <main+0x128>)
 80008e2:	1d3c      	adds	r4, r7, #4
 80008e4:	461d      	mov	r5, r3
 80008e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ea:	682b      	ldr	r3, [r5, #0]
 80008ec:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2100      	movs	r1, #0
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 facf 	bl	8003e96 <osThreadCreate>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <main+0x12c>)
 80008fc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(print_task, "Print Task", 256, NULL, 10, NULL);
 80008fe:	2300      	movs	r3, #0
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	230a      	movs	r3, #10
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2300      	movs	r3, #0
 8000908:	f44f 7280 	mov.w	r2, #256	; 0x100
 800090c:	491a      	ldr	r1, [pc, #104]	; (8000978 <main+0x130>)
 800090e:	481b      	ldr	r0, [pc, #108]	; (800097c <main+0x134>)
 8000910:	f004 fdc2 	bl	8005498 <xTaskCreate>
  xTaskCreate(keyboard_task, "Keyboard Task", 512, NULL, 5, NULL);
 8000914:	2300      	movs	r3, #0
 8000916:	9301      	str	r3, [sp, #4]
 8000918:	2305      	movs	r3, #5
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	2300      	movs	r3, #0
 800091e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000922:	4917      	ldr	r1, [pc, #92]	; (8000980 <main+0x138>)
 8000924:	4817      	ldr	r0, [pc, #92]	; (8000984 <main+0x13c>)
 8000926:	f004 fdb7 	bl	8005498 <xTaskCreate>
  xTaskCreate(sobra_cpu, "Sobra CPU", 256, NULL, 1, NULL);
 800092a:	2300      	movs	r3, #0
 800092c:	9301      	str	r3, [sp, #4]
 800092e:	2301      	movs	r3, #1
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2300      	movs	r3, #0
 8000934:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000938:	4913      	ldr	r1, [pc, #76]	; (8000988 <main+0x140>)
 800093a:	4814      	ldr	r0, [pc, #80]	; (800098c <main+0x144>)
 800093c:	f004 fdac 	bl	8005498 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000940:	f003 faa2 	bl	8003e88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000944:	e7fe      	b.n	8000944 <main+0xfc>
 8000946:	bf00      	nop
 8000948:	20000110 	.word	0x20000110
 800094c:	20000114 	.word	0x20000114
 8000950:	08000755 	.word	0x08000755
 8000954:	080085f8 	.word	0x080085f8
 8000958:	20000120 	.word	0x20000120
 800095c:	08000709 	.word	0x08000709
 8000960:	08008604 	.word	0x08008604
 8000964:	20000124 	.word	0x20000124
 8000968:	20000118 	.word	0x20000118
 800096c:	2000011c 	.word	0x2000011c
 8000970:	08008648 	.word	0x08008648
 8000974:	2000010c 	.word	0x2000010c
 8000978:	08008614 	.word	0x08008614
 800097c:	080007a9 	.word	0x080007a9
 8000980:	08008620 	.word	0x08008620
 8000984:	08000809 	.word	0x08000809
 8000988:	08008630 	.word	0x08008630
 800098c:	08000771 	.word	0x08000771

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b094      	sub	sp, #80	; 0x50
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	2238      	movs	r2, #56	; 0x38
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f007 f93c 	bl	8007c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 fe76 	bl	80016a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c2:	2302      	movs	r3, #2
 80009c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c6:	2303      	movs	r3, #3
 80009c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80009ca:	2306      	movs	r3, #6
 80009cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80009ce:	2355      	movs	r3, #85	; 0x55
 80009d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d2:	2302      	movs	r3, #2
 80009d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009d6:	2302      	movs	r3, #2
 80009d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 0318 	add.w	r3, r7, #24
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 ff02 	bl	80017ec <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80009ee:	f000 f8cd 	bl	8000b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f6:	2303      	movs	r3, #3
 80009f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2104      	movs	r1, #4
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 fa06 	bl	8001e1c <HAL_RCC_ClockConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000a16:	f000 f8b9 	bl	8000b8c <Error_Handler>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3750      	adds	r7, #80	; 0x50
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a28:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a2a:	4a22      	ldr	r2, [pc, #136]	; (8000ab4 <MX_LPUART1_UART_Init+0x90>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a66:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a68:	f001 fde4 	bl	8002634 <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a72:	f000 f88b 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a76:	2100      	movs	r1, #0
 8000a78:	480d      	ldr	r0, [pc, #52]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a7a:	f003 f922 	bl	8003cc2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a84:	f000 f882 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a8c:	f003 f957 	bl	8003d3e <HAL_UARTEx_SetRxFifoThreshold>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a96:	f000 f879 	bl	8000b8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_LPUART1_UART_Init+0x8c>)
 8000a9c:	f003 f8d8 	bl	8003c50 <HAL_UARTEx_DisableFifoMode>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000aa6:	f000 f871 	bl	8000b8c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000007c 	.word	0x2000007c
 8000ab4:	40008000 	.word	0x40008000

08000ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b088      	sub	sp, #32
 8000abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	4b29      	ldr	r3, [pc, #164]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a28      	ldr	r2, [pc, #160]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae6:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	4a22      	ldr	r2, [pc, #136]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000aec:	f043 0320 	orr.w	r3, r3, #32
 8000af0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af6:	f003 0320 	and.w	r3, r3, #32
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_GPIO_Init+0xbc>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2120      	movs	r1, #32
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f000 fd77 	bl	8001610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b28:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b32:	f107 030c 	add.w	r3, r7, #12
 8000b36:	4619      	mov	r1, r3
 8000b38:	480f      	ldr	r0, [pc, #60]	; (8000b78 <MX_GPIO_Init+0xc0>)
 8000b3a:	f000 fbcf 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8000b3e:	2320      	movs	r3, #32
 8000b40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b42:	2301      	movs	r3, #1
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	4619      	mov	r1, r3
 8000b54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b58:	f000 fbc0 	bl	80012dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2105      	movs	r1, #5
 8000b60:	2028      	movs	r0, #40	; 0x28
 8000b62:	f000 fab8 	bl	80010d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b66:	2028      	movs	r0, #40	; 0x28
 8000b68:	f000 facf 	bl	800110a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000800 	.word	0x48000800

08000b7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b84:	2001      	movs	r0, #1
 8000b86:	f003 f9ad 	bl	8003ee4 <osDelay>
 8000b8a:	e7fb      	b.n	8000b84 <StartDefaultTask+0x8>

08000b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b90:	b672      	cpsid	i
}
 8000b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <Error_Handler+0x8>
	...

08000b98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba2:	4a10      	ldr	r2, [pc, #64]	; (8000be4 <HAL_MspInit+0x4c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_MspInit+0x4c>)
 8000bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	f06f 0001 	mvn.w	r0, #1
 8000bd6:	f000 fa7e 	bl	80010d6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000

08000be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b09a      	sub	sp, #104	; 0x68
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	2244      	movs	r2, #68	; 0x44
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f007 f807 	bl	8007c1c <memset>
  if(huart->Instance==LPUART1)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a22      	ldr	r2, [pc, #136]	; (8000c9c <HAL_UART_MspInit+0xb4>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d13d      	bne.n	8000c94 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c18:	2320      	movs	r3, #32
 8000c1a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 fb15 	bl	8002254 <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c30:	f7ff ffac 	bl	8000b8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c34:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <HAL_UART_MspInit+0xb8>)
 8000c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c38:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_UART_MspInit+0xb8>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_UART_MspInit+0xb8>)
 8000c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4c:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <HAL_UART_MspInit+0xb8>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c50:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <HAL_UART_MspInit+0xb8>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_UART_MspInit+0xb8>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c64:	2303      	movs	r3, #3
 8000c66:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c74:	2308      	movs	r3, #8
 8000c76:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <HAL_UART_MspInit+0xbc>)
 8000c80:	f000 fb2c 	bl	80012dc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2105      	movs	r1, #5
 8000c88:	205b      	movs	r0, #91	; 0x5b
 8000c8a:	f000 fa24 	bl	80010d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000c8e:	205b      	movs	r0, #91	; 0x5b
 8000c90:	f000 fa3b 	bl	800110a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3768      	adds	r7, #104	; 0x68
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40008000 	.word	0x40008000
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000800 	.word	0x48000800

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd8:	f000 f8e0 	bl	8000e9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cdc:	f005 fbb8 	bl	8006450 <xTaskGetSchedulerState>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d001      	beq.n	8000cea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ce6:	f006 fcff 	bl	80076e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}

08000cee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cf2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cf6:	f000 fcbd 	bl	8001674 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <LPUART1_IRQHandler+0x10>)
 8000d06:	f001 fd8d 	bl	8002824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000007c 	.word	0x2000007c

08000d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d1c:	4a14      	ldr	r2, [pc, #80]	; (8000d70 <_sbrk+0x5c>)
 8000d1e:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <_sbrk+0x60>)
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d28:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <_sbrk+0x64>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d102      	bne.n	8000d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <_sbrk+0x64>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <_sbrk+0x68>)
 8000d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <_sbrk+0x64>)
 8000d38:	681a      	ldr	r2, [r3, #0]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	693a      	ldr	r2, [r7, #16]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d207      	bcs.n	8000d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d44:	f006 ffc8 	bl	8007cd8 <__errno>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d52:	e009      	b.n	8000d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5a:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <_sbrk+0x64>)
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	4a05      	ldr	r2, [pc, #20]	; (8000d78 <_sbrk+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3718      	adds	r7, #24
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20008000 	.word	0x20008000
 8000d74:	00000400 	.word	0x00000400
 8000d78:	20000128 	.word	0x20000128
 8000d7c:	20005630 	.word	0x20005630

08000d80 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d84:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <SystemInit+0x20>)
 8000d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8a:	4a05      	ldr	r2, [pc, #20]	; (8000da0 <SystemInit+0x20>)
 8000d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d94:	bf00      	nop
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000da4:	480d      	ldr	r0, [pc, #52]	; (8000ddc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000da6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480d      	ldr	r0, [pc, #52]	; (8000de0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490e      	ldr	r1, [pc, #56]	; (8000de4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0b      	ldr	r2, [pc, #44]	; (8000dec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0b      	ldr	r4, [pc, #44]	; (8000df0 <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dce:	f7ff ffd7 	bl	8000d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd2:	f006 ff87 	bl	8007ce4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd6:	f7ff fd37 	bl	8000848 <main>

08000dda <LoopForever>:

LoopForever:
    b LoopForever
 8000dda:	e7fe      	b.n	8000dda <LoopForever>
  ldr   r0, =_estack
 8000ddc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000de8:	08008720 	.word	0x08008720
  ldr r2, =_sbss
 8000dec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000df0:	20005630 	.word	0x20005630

08000df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC1_2_IRQHandler>

08000df6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e00:	2003      	movs	r0, #3
 8000e02:	f000 f95d 	bl	80010c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e06:	200f      	movs	r0, #15
 8000e08:	f000 f80e 	bl	8000e28 <HAL_InitTick>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	71fb      	strb	r3, [r7, #7]
 8000e16:	e001      	b.n	8000e1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e18:	f7ff febe 	bl	8000b98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e1c:	79fb      	ldrb	r3, [r7, #7]

}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e34:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_InitTick+0x68>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d022      	beq.n	8000e82 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_InitTick+0x6c>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <HAL_InitTick+0x68>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e48:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 f976 	bl	8001142 <HAL_SYSTICK_Config>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10f      	bne.n	8000e7c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	d809      	bhi.n	8000e76 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e62:	2200      	movs	r2, #0
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6a:	f000 f934 	bl	80010d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_InitTick+0x70>)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	e007      	b.n	8000e86 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	73fb      	strb	r3, [r7, #15]
 8000e7a:	e004      	b.n	8000e86 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e001      	b.n	8000e86 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000008 	.word	0x20000008
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000004 	.word	0x20000004

08000e9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <HAL_IncTick+0x1c>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <HAL_IncTick+0x20>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	4a03      	ldr	r2, [pc, #12]	; (8000eb8 <HAL_IncTick+0x1c>)
 8000eac:	6013      	str	r3, [r2, #0]
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	2000012c 	.word	0x2000012c
 8000ebc:	20000008 	.word	0x20000008

08000ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec4:	4b03      	ldr	r3, [pc, #12]	; (8000ed4 <HAL_GetTick+0x14>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000012c 	.word	0x2000012c

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4907      	ldr	r1, [pc, #28]	; (8000f74 <__NVIC_EnableIRQ+0x38>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db12      	blt.n	8000fb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	490a      	ldr	r1, [pc, #40]	; (8000fbc <__NVIC_DisableIRQ+0x44>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	3320      	adds	r3, #32
 8000fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa4:	f3bf 8f4f 	dsb	sy
}
 8000fa8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000faa:	f3bf 8f6f 	isb	sy
}
 8000fae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr
 8000fbc:	e000e100 	.word	0xe000e100

08000fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	6039      	str	r1, [r7, #0]
 8000fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db0a      	blt.n	8000fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	490c      	ldr	r1, [pc, #48]	; (800100c <__NVIC_SetPriority+0x4c>)
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	0112      	lsls	r2, r2, #4
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe8:	e00a      	b.n	8001000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4908      	ldr	r1, [pc, #32]	; (8001010 <__NVIC_SetPriority+0x50>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 030f 	and.w	r3, r3, #15
 8000ff6:	3b04      	subs	r3, #4
 8000ff8:	0112      	lsls	r2, r2, #4
 8000ffa:	b2d2      	uxtb	r2, r2
 8000ffc:	440b      	add	r3, r1
 8000ffe:	761a      	strb	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	e000e100 	.word	0xe000e100
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	; 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f1c3 0307 	rsb	r3, r3, #7
 800102e:	2b04      	cmp	r3, #4
 8001030:	bf28      	it	cs
 8001032:	2304      	movcs	r3, #4
 8001034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3304      	adds	r3, #4
 800103a:	2b06      	cmp	r3, #6
 800103c:	d902      	bls.n	8001044 <NVIC_EncodePriority+0x30>
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b03      	subs	r3, #3
 8001042:	e000      	b.n	8001046 <NVIC_EncodePriority+0x32>
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	f04f 32ff 	mov.w	r2, #4294967295
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43da      	mvns	r2, r3
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	401a      	ands	r2, r3
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	f04f 31ff 	mov.w	r1, #4294967295
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa01 f303 	lsl.w	r3, r1, r3
 8001066:	43d9      	mvns	r1, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	4313      	orrs	r3, r2
         );
}
 800106e:	4618      	mov	r0, r3
 8001070:	3724      	adds	r7, #36	; 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3b01      	subs	r3, #1
 8001088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800108c:	d301      	bcc.n	8001092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108e:	2301      	movs	r3, #1
 8001090:	e00f      	b.n	80010b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <SysTick_Config+0x40>)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3b01      	subs	r3, #1
 8001098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800109a:	210f      	movs	r1, #15
 800109c:	f04f 30ff 	mov.w	r0, #4294967295
 80010a0:	f7ff ff8e 	bl	8000fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <SysTick_Config+0x40>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <SysTick_Config+0x40>)
 80010ac:	2207      	movs	r2, #7
 80010ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	e000e010 	.word	0xe000e010

080010c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f7ff ff05 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff1c 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff90 	bl	8001014 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5f 	bl	8000fc0 <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	4603      	mov	r3, r0
 8001112:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff0f 	bl	8000f3c <__NVIC_EnableIRQ>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff1f 	bl	8000f78 <__NVIC_DisableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ff96 	bl	800107c <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800115a:	b480      	push	{r7}
 800115c:	b085      	sub	sp, #20
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001162:	2300      	movs	r3, #0
 8001164:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d005      	beq.n	800117e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2204      	movs	r2, #4
 8001176:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e037      	b.n	80011ee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 020e 	bic.w	r2, r2, #14
 800118c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800119c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f022 0201 	bic.w	r2, r2, #1
 80011ac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b2:	f003 021f 	and.w	r2, r3, #31
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	2101      	movs	r1, #1
 80011bc:	fa01 f202 	lsl.w	r2, r1, r2
 80011c0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011ca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00c      	beq.n	80011ee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011e2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011ec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2201      	movs	r2, #1
 80011f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d00d      	beq.n	8001240 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2204      	movs	r2, #4
 8001228:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	73fb      	strb	r3, [r7, #15]
 800123e:	e047      	b.n	80012d0 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 020e 	bic.w	r2, r2, #14
 800124e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800126e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001274:	f003 021f 	and.w	r2, r3, #31
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	2101      	movs	r1, #1
 800127e:	fa01 f202 	lsl.w	r2, r1, r2
 8001282:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800128c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00c      	beq.n	80012b0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	4798      	blx	r3
    }
  }
  return status;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012ea:	e15a      	b.n	80015a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 814c 	beq.w	800159c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d005      	beq.n	800131c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001318:	2b02      	cmp	r3, #2
 800131a:	d130      	bne.n	800137e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001352:	2201      	movs	r2, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f003 0201 	and.w	r2, r3, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b03      	cmp	r3, #3
 8001388:	d017      	beq.n	80013ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d123      	bne.n	800140e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3208      	adds	r2, #8
 8001408:	6939      	ldr	r1, [r7, #16]
 800140a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0203 	and.w	r2, r3, #3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80a6 	beq.w	800159c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001450:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <HAL_GPIO_Init+0x2e4>)
 8001452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001454:	4a5a      	ldr	r2, [pc, #360]	; (80015c0 <HAL_GPIO_Init+0x2e4>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6613      	str	r3, [r2, #96]	; 0x60
 800145c:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <HAL_GPIO_Init+0x2e4>)
 800145e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001468:	4a56      	ldr	r2, [pc, #344]	; (80015c4 <HAL_GPIO_Init+0x2e8>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001492:	d01f      	beq.n	80014d4 <HAL_GPIO_Init+0x1f8>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a4c      	ldr	r2, [pc, #304]	; (80015c8 <HAL_GPIO_Init+0x2ec>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d019      	beq.n	80014d0 <HAL_GPIO_Init+0x1f4>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <HAL_GPIO_Init+0x2f0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d013      	beq.n	80014cc <HAL_GPIO_Init+0x1f0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a4a      	ldr	r2, [pc, #296]	; (80015d0 <HAL_GPIO_Init+0x2f4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d00d      	beq.n	80014c8 <HAL_GPIO_Init+0x1ec>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a49      	ldr	r2, [pc, #292]	; (80015d4 <HAL_GPIO_Init+0x2f8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d007      	beq.n	80014c4 <HAL_GPIO_Init+0x1e8>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a48      	ldr	r2, [pc, #288]	; (80015d8 <HAL_GPIO_Init+0x2fc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d101      	bne.n	80014c0 <HAL_GPIO_Init+0x1e4>
 80014bc:	2305      	movs	r3, #5
 80014be:	e00a      	b.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014c0:	2306      	movs	r3, #6
 80014c2:	e008      	b.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014c4:	2304      	movs	r3, #4
 80014c6:	e006      	b.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014c8:	2303      	movs	r3, #3
 80014ca:	e004      	b.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e002      	b.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014d4:	2300      	movs	r3, #0
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	f002 0203 	and.w	r2, r2, #3
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	4093      	lsls	r3, r2
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e6:	4937      	ldr	r1, [pc, #220]	; (80015c4 <HAL_GPIO_Init+0x2e8>)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f4:	4b39      	ldr	r3, [pc, #228]	; (80015dc <HAL_GPIO_Init+0x300>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001518:	4a30      	ldr	r2, [pc, #192]	; (80015dc <HAL_GPIO_Init+0x300>)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800151e:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <HAL_GPIO_Init+0x300>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001542:	4a26      	ldr	r2, [pc, #152]	; (80015dc <HAL_GPIO_Init+0x300>)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_GPIO_Init+0x300>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <HAL_GPIO_Init+0x300>)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_GPIO_Init+0x300>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <HAL_GPIO_Init+0x300>)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f47f ae9d 	bne.w	80012ec <HAL_GPIO_Init+0x10>
  }
}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010000 	.word	0x40010000
 80015c8:	48000400 	.word	0x48000400
 80015cc:	48000800 	.word	0x48000800
 80015d0:	48000c00 	.word	0x48000c00
 80015d4:	48001000 	.word	0x48001000
 80015d8:	48001400 	.word	0x48001400
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e001      	b.n	8001602 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	807b      	strh	r3, [r7, #2]
 800161c:	4613      	mov	r3, r2
 800161e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001620:	787b      	ldrb	r3, [r7, #1]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800162c:	e002      	b.n	8001634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001634:	bf00      	nop
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
 8001650:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001652:	887a      	ldrh	r2, [r7, #2]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4013      	ands	r3, r2
 8001658:	041a      	lsls	r2, r3, #16
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	43d9      	mvns	r1, r3
 800165e:	887b      	ldrh	r3, [r7, #2]
 8001660:	400b      	ands	r3, r1
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d006      	beq.n	8001698 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff f80a 	bl	80006ac <HAL_GPIO_EXTI_Callback>
  }
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40010400 	.word	0x40010400

080016a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d141      	bne.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016b2:	4b4b      	ldr	r3, [pc, #300]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016be:	d131      	bne.n	8001724 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016c0:	4b47      	ldr	r3, [pc, #284]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016c6:	4a46      	ldr	r2, [pc, #280]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d0:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016d8:	4a41      	ldr	r2, [pc, #260]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016e0:	4b40      	ldr	r3, [pc, #256]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2232      	movs	r2, #50	; 0x32
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	4a3f      	ldr	r2, [pc, #252]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	0c9b      	lsrs	r3, r3, #18
 80016f2:	3301      	adds	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f6:	e002      	b.n	80016fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016fe:	4b38      	ldr	r3, [pc, #224]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001706:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800170a:	d102      	bne.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f2      	bne.n	80016f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001712:	4b33      	ldr	r3, [pc, #204]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800171e:	d158      	bne.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e057      	b.n	80017d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001724:	4b2e      	ldr	r3, [pc, #184]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800172a:	4a2d      	ldr	r2, [pc, #180]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001730:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001734:	e04d      	b.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800173c:	d141      	bne.n	80017c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174a:	d131      	bne.n	80017b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001752:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001758:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800175c:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001764:	4a1e      	ldr	r2, [pc, #120]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2232      	movs	r2, #50	; 0x32
 8001772:	fb02 f303 	mul.w	r3, r2, r3
 8001776:	4a1c      	ldr	r2, [pc, #112]	; (80017e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001778:	fba2 2303 	umull	r2, r3, r2, r3
 800177c:	0c9b      	lsrs	r3, r3, #18
 800177e:	3301      	adds	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001782:	e002      	b.n	800178a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	3b01      	subs	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001796:	d102      	bne.n	800179e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f2      	bne.n	8001784 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800179e:	4b10      	ldr	r3, [pc, #64]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017aa:	d112      	bne.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e011      	b.n	80017d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80017b6:	4a0a      	ldr	r2, [pc, #40]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80017c0:	e007      	b.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80017c2:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017ca:	4a05      	ldr	r2, [pc, #20]	; (80017e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40007000 	.word	0x40007000
 80017e4:	20000000 	.word	0x20000000
 80017e8:	431bde83 	.word	0x431bde83

080017ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d101      	bne.n	80017fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e306      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d075      	beq.n	80018f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800180a:	4b97      	ldr	r3, [pc, #604]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f003 030c 	and.w	r3, r3, #12
 8001812:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001814:	4b94      	ldr	r3, [pc, #592]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2b0c      	cmp	r3, #12
 8001822:	d102      	bne.n	800182a <HAL_RCC_OscConfig+0x3e>
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	2b03      	cmp	r3, #3
 8001828:	d002      	beq.n	8001830 <HAL_RCC_OscConfig+0x44>
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	2b08      	cmp	r3, #8
 800182e:	d10b      	bne.n	8001848 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	4b8d      	ldr	r3, [pc, #564]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d05b      	beq.n	80018f4 <HAL_RCC_OscConfig+0x108>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d157      	bne.n	80018f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e2e1      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d106      	bne.n	8001860 <HAL_RCC_OscConfig+0x74>
 8001852:	4b85      	ldr	r3, [pc, #532]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a84      	ldr	r2, [pc, #528]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e01d      	b.n	800189c <HAL_RCC_OscConfig+0xb0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001868:	d10c      	bne.n	8001884 <HAL_RCC_OscConfig+0x98>
 800186a:	4b7f      	ldr	r3, [pc, #508]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a7e      	ldr	r2, [pc, #504]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b7c      	ldr	r3, [pc, #496]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a7b      	ldr	r2, [pc, #492]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0xb0>
 8001884:	4b78      	ldr	r3, [pc, #480]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a77      	ldr	r2, [pc, #476]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 800188a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b75      	ldr	r3, [pc, #468]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a74      	ldr	r2, [pc, #464]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800189a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d013      	beq.n	80018cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fb0c 	bl	8000ec0 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ac:	f7ff fb08 	bl	8000ec0 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b64      	cmp	r3, #100	; 0x64
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e2a6      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018be:	4b6a      	ldr	r3, [pc, #424]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0xc0>
 80018ca:	e014      	b.n	80018f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff faf8 	bl	8000ec0 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d4:	f7ff faf4 	bl	8000ec0 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	; 0x64
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e292      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018e6:	4b60      	ldr	r3, [pc, #384]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0xe8>
 80018f2:	e000      	b.n	80018f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d075      	beq.n	80019ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001902:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 030c 	and.w	r3, r3, #12
 800190a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800190c:	4b56      	ldr	r3, [pc, #344]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	2b0c      	cmp	r3, #12
 800191a:	d102      	bne.n	8001922 <HAL_RCC_OscConfig+0x136>
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2b02      	cmp	r3, #2
 8001920:	d002      	beq.n	8001928 <HAL_RCC_OscConfig+0x13c>
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	2b04      	cmp	r3, #4
 8001926:	d11f      	bne.n	8001968 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001928:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_OscConfig+0x154>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d101      	bne.n	8001940 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e265      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001940:	4b49      	ldr	r3, [pc, #292]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	061b      	lsls	r3, r3, #24
 800194e:	4946      	ldr	r1, [pc, #280]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001950:	4313      	orrs	r3, r2
 8001952:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001954:	4b45      	ldr	r3, [pc, #276]	; (8001a6c <HAL_RCC_OscConfig+0x280>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fa65 	bl	8000e28 <HAL_InitTick>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d043      	beq.n	80019ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e251      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d023      	beq.n	80019b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001970:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a3c      	ldr	r2, [pc, #240]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff faa0 	bl	8000ec0 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff fa9c 	bl	8000ec0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e23a      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001996:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	061b      	lsls	r3, r3, #24
 80019b0:	492d      	ldr	r1, [pc, #180]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
 80019b6:	e01a      	b.n	80019ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b8:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a2a      	ldr	r2, [pc, #168]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 80019be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fa7c 	bl	8000ec0 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019cc:	f7ff fa78 	bl	8000ec0 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e216      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x1e0>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d041      	beq.n	8001a7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d01c      	beq.n	8001a3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001a04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a08:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	f043 0301 	orr.w	r3, r3, #1
 8001a0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a12:	f7ff fa55 	bl	8000ec0 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a1a:	f7ff fa51 	bl	8000ec0 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e1ef      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0ef      	beq.n	8001a1a <HAL_RCC_OscConfig+0x22e>
 8001a3a:	e020      	b.n	8001a7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_RCC_OscConfig+0x27c>)
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4c:	f7ff fa38 	bl	8000ec0 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a52:	e00d      	b.n	8001a70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff fa34 	bl	8000ec0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d906      	bls.n	8001a70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e1d2      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a70:	4b8c      	ldr	r3, [pc, #560]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ea      	bne.n	8001a54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80a6 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a90:	4b84      	ldr	r3, [pc, #528]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d101      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x2b4>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x2b6>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00d      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b7f      	ldr	r3, [pc, #508]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	4a7e      	ldr	r2, [pc, #504]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab2:	4b7c      	ldr	r3, [pc, #496]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac2:	4b79      	ldr	r3, [pc, #484]	; (8001ca8 <HAL_RCC_OscConfig+0x4bc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ace:	4b76      	ldr	r3, [pc, #472]	; (8001ca8 <HAL_RCC_OscConfig+0x4bc>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a75      	ldr	r2, [pc, #468]	; (8001ca8 <HAL_RCC_OscConfig+0x4bc>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff f9f1 	bl	8000ec0 <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff f9ed 	bl	8000ec0 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e18b      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af4:	4b6c      	ldr	r3, [pc, #432]	; (8001ca8 <HAL_RCC_OscConfig+0x4bc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d108      	bne.n	8001b1a <HAL_RCC_OscConfig+0x32e>
 8001b08:	4b66      	ldr	r3, [pc, #408]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0e:	4a65      	ldr	r2, [pc, #404]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b18:	e024      	b.n	8001b64 <HAL_RCC_OscConfig+0x378>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2b05      	cmp	r3, #5
 8001b20:	d110      	bne.n	8001b44 <HAL_RCC_OscConfig+0x358>
 8001b22:	4b60      	ldr	r3, [pc, #384]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b28:	4a5e      	ldr	r2, [pc, #376]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b32:	4b5c      	ldr	r3, [pc, #368]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b38:	4a5a      	ldr	r2, [pc, #360]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b42:	e00f      	b.n	8001b64 <HAL_RCC_OscConfig+0x378>
 8001b44:	4b57      	ldr	r3, [pc, #348]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4a:	4a56      	ldr	r2, [pc, #344]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001b4c:	f023 0301 	bic.w	r3, r3, #1
 8001b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b5a:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d016      	beq.n	8001b9a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff f9a8 	bl	8000ec0 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b74:	f7ff f9a4 	bl	8000ec0 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e140      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b8a:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ed      	beq.n	8001b74 <HAL_RCC_OscConfig+0x388>
 8001b98:	e015      	b.n	8001bc6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9a:	f7ff f991 	bl	8000ec0 <HAL_GetTick>
 8001b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba0:	e00a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ba2:	f7ff f98d 	bl	8000ec0 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e129      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb8:	4b3a      	ldr	r3, [pc, #232]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1ed      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bcc:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	4a34      	ldr	r2, [pc, #208]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0320 	and.w	r3, r3, #32
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d03c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01c      	beq.n	8001c26 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bec:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf2:	4a2c      	ldr	r2, [pc, #176]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfc:	f7ff f960 	bl	8000ec0 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c04:	f7ff f95c 	bl	8000ec0 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e0fa      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c16:	4b23      	ldr	r3, [pc, #140]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ef      	beq.n	8001c04 <HAL_RCC_OscConfig+0x418>
 8001c24:	e01b      	b.n	8001c5e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c26:	4b1f      	ldr	r3, [pc, #124]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001c28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c36:	f7ff f943 	bl	8000ec0 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c3e:	f7ff f93f 	bl	8000ec0 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e0dd      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c50:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1ef      	bne.n	8001c3e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80d1 	beq.w	8001e0a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c68:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b0c      	cmp	r3, #12
 8001c72:	f000 808b 	beq.w	8001d8c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d15e      	bne.n	8001d3c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a08      	ldr	r2, [pc, #32]	; (8001ca4 <HAL_RCC_OscConfig+0x4b8>)
 8001c84:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7ff f919 	bl	8000ec0 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c90:	e00c      	b.n	8001cac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff f915 	bl	8000ec0 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d905      	bls.n	8001cac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e0b3      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cac:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1ec      	bne.n	8001c92 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb8:	4b56      	ldr	r3, [pc, #344]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	4b56      	ldr	r3, [pc, #344]	; (8001e18 <HAL_RCC_OscConfig+0x62c>)
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6a11      	ldr	r1, [r2, #32]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001cc8:	3a01      	subs	r2, #1
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	4311      	orrs	r1, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001cd2:	0212      	lsls	r2, r2, #8
 8001cd4:	4311      	orrs	r1, r2
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cda:	0852      	lsrs	r2, r2, #1
 8001cdc:	3a01      	subs	r2, #1
 8001cde:	0552      	lsls	r2, r2, #21
 8001ce0:	4311      	orrs	r1, r2
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ce6:	0852      	lsrs	r2, r2, #1
 8001ce8:	3a01      	subs	r2, #1
 8001cea:	0652      	lsls	r2, r2, #25
 8001cec:	4311      	orrs	r1, r2
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cf2:	06d2      	lsls	r2, r2, #27
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	4947      	ldr	r1, [pc, #284]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfc:	4b45      	ldr	r3, [pc, #276]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a44      	ldr	r2, [pc, #272]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d06:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d08:	4b42      	ldr	r3, [pc, #264]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4a41      	ldr	r2, [pc, #260]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff f8d4 	bl	8000ec0 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7ff f8d0 	bl	8000ec0 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e06e      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2e:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x530>
 8001d3a:	e066      	b.n	8001e0a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3c:	4b35      	ldr	r3, [pc, #212]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a34      	ldr	r2, [pc, #208]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d46:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	4a31      	ldr	r2, [pc, #196]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001d4e:	f023 0303 	bic.w	r3, r3, #3
 8001d52:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4a2e      	ldr	r2, [pc, #184]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001d5a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d62:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff f8ac 	bl	8000ec0 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7ff f8a8 	bl	8000ec0 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e046      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7e:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x580>
 8001d8a:	e03e      	b.n	8001e0a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e039      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d98:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <HAL_RCC_OscConfig+0x628>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0203 	and.w	r2, r3, #3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d12c      	bne.n	8001e06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	3b01      	subs	r3, #1
 8001db8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d123      	bne.n	8001e06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d11b      	bne.n	8001e06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d113      	bne.n	8001e06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	085b      	lsrs	r3, r3, #1
 8001dea:	3b01      	subs	r3, #1
 8001dec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d109      	bne.n	8001e06 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfc:	085b      	lsrs	r3, r3, #1
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d001      	beq.n	8001e0a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40021000 	.word	0x40021000
 8001e18:	019f800c 	.word	0x019f800c

08001e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d101      	bne.n	8001e34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e11e      	b.n	8002072 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e34:	4b91      	ldr	r3, [pc, #580]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 030f 	and.w	r3, r3, #15
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d910      	bls.n	8001e64 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e42:	4b8e      	ldr	r3, [pc, #568]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 020f 	bic.w	r2, r3, #15
 8001e4a:	498c      	ldr	r1, [pc, #560]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e52:	4b8a      	ldr	r3, [pc, #552]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d001      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e106      	b.n	8002072 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d073      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d129      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e78:	4b81      	ldr	r3, [pc, #516]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e0f4      	b.n	8002072 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e88:	f000 f99e 	bl	80021c8 <RCC_GetSysClockFreqFromPLLSource>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4a7c      	ldr	r2, [pc, #496]	; (8002084 <HAL_RCC_ClockConfig+0x268>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d93f      	bls.n	8001f16 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e96:	4b7a      	ldr	r3, [pc, #488]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d033      	beq.n	8001f16 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d12f      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001eb6:	4b72      	ldr	r3, [pc, #456]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ebe:	4a70      	ldr	r2, [pc, #448]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ec4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e024      	b.n	8001f16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d107      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed4:	4b6a      	ldr	r3, [pc, #424]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d109      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0c6      	b.n	8002072 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee4:	4b66      	ldr	r3, [pc, #408]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0be      	b.n	8002072 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ef4:	f000 f8ce 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4a61      	ldr	r2, [pc, #388]	; (8002084 <HAL_RCC_ClockConfig+0x268>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d909      	bls.n	8001f16 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f02:	4b5f      	ldr	r3, [pc, #380]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f0a:	4a5d      	ldr	r2, [pc, #372]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001f0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f16:	4b5a      	ldr	r3, [pc, #360]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f023 0203 	bic.w	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4957      	ldr	r1, [pc, #348]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f28:	f7fe ffca 	bl	8000ec0 <HAL_GetTick>
 8001f2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f30:	f7fe ffc6 	bl	8000ec0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e095      	b.n	8002072 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	4b4e      	ldr	r3, [pc, #312]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 020c 	and.w	r2, r3, #12
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d1eb      	bne.n	8001f30 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d023      	beq.n	8001fac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f70:	4b43      	ldr	r3, [pc, #268]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4a42      	ldr	r2, [pc, #264]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001f76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f7a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f88:	4b3d      	ldr	r3, [pc, #244]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f90:	4a3b      	ldr	r2, [pc, #236]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001f92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f98:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4936      	ldr	r1, [pc, #216]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	608b      	str	r3, [r1, #8]
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	2b80      	cmp	r3, #128	; 0x80
 8001fb0:	d105      	bne.n	8001fbe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fb2:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	4a32      	ldr	r2, [pc, #200]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8001fb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001fbc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 030f 	and.w	r3, r3, #15
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d21d      	bcs.n	8002008 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fcc:	4b2b      	ldr	r3, [pc, #172]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f023 020f 	bic.w	r2, r3, #15
 8001fd4:	4929      	ldr	r1, [pc, #164]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fdc:	f7fe ff70 	bl	8000ec0 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe4:	f7fe ff6c 	bl	8000ec0 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e03b      	b.n	8002072 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d1ed      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d008      	beq.n	8002026 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002014:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	4917      	ldr	r1, [pc, #92]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8002022:	4313      	orrs	r3, r2
 8002024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b00      	cmp	r3, #0
 8002030:	d009      	beq.n	8002046 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002032:	4b13      	ldr	r3, [pc, #76]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	490f      	ldr	r1, [pc, #60]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 8002042:	4313      	orrs	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002046:	f000 f825 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 800204a:	4602      	mov	r2, r0
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_RCC_ClockConfig+0x264>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	091b      	lsrs	r3, r3, #4
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	490c      	ldr	r1, [pc, #48]	; (8002088 <HAL_RCC_ClockConfig+0x26c>)
 8002058:	5ccb      	ldrb	r3, [r1, r3]
 800205a:	f003 031f 	and.w	r3, r3, #31
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_RCC_ClockConfig+0x270>)
 8002064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002066:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x274>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fedc 	bl	8000e28 <HAL_InitTick>
 8002070:	4603      	mov	r3, r0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40022000 	.word	0x40022000
 8002080:	40021000 	.word	0x40021000
 8002084:	04c4b400 	.word	0x04c4b400
 8002088:	0800869c 	.word	0x0800869c
 800208c:	20000000 	.word	0x20000000
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800209a:	4b2c      	ldr	r3, [pc, #176]	; (800214c <HAL_RCC_GetSysClockFreq+0xb8>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020a6:	4b2a      	ldr	r3, [pc, #168]	; (8002150 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	e047      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80020ac:	4b27      	ldr	r3, [pc, #156]	; (800214c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 030c 	and.w	r3, r3, #12
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d102      	bne.n	80020be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020b8:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	e03e      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	2b0c      	cmp	r3, #12
 80020c8:	d136      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	091b      	lsrs	r3, r3, #4
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3301      	adds	r3, #1
 80020e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d10c      	bne.n	8002102 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020e8:	4a1a      	ldr	r2, [pc, #104]	; (8002154 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	4a16      	ldr	r2, [pc, #88]	; (800214c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f2:	68d2      	ldr	r2, [r2, #12]
 80020f4:	0a12      	lsrs	r2, r2, #8
 80020f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020fa:	fb02 f303 	mul.w	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
      break;
 8002100:	e00c      	b.n	800211c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002102:	4a13      	ldr	r2, [pc, #76]	; (8002150 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	fbb2 f3f3 	udiv	r3, r2, r3
 800210a:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_RCC_GetSysClockFreq+0xb8>)
 800210c:	68d2      	ldr	r2, [r2, #12]
 800210e:	0a12      	lsrs	r2, r2, #8
 8002110:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002114:	fb02 f303 	mul.w	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
      break;
 800211a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_GetSysClockFreq+0xb8>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0e5b      	lsrs	r3, r3, #25
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	3301      	adds	r3, #1
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	fbb2 f3f3 	udiv	r3, r2, r3
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	e001      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800213c:	693b      	ldr	r3, [r7, #16]
}
 800213e:	4618      	mov	r0, r3
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	00f42400 	.word	0x00f42400
 8002154:	016e3600 	.word	0x016e3600

08002158 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_RCC_GetHCLKFreq+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000000 	.word	0x20000000

08002170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002174:	f7ff fff0 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 8002178:	4602      	mov	r2, r0
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x24>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	f003 0307 	and.w	r3, r3, #7
 8002184:	4904      	ldr	r1, [pc, #16]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002186:	5ccb      	ldrb	r3, [r1, r3]
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	080086ac 	.word	0x080086ac

0800219c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021a0:	f7ff ffda 	bl	8002158 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0adb      	lsrs	r3, r3, #11
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4904      	ldr	r1, [pc, #16]	; (80021c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	080086ac 	.word	0x080086ac

080021c8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021ce:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	3301      	adds	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d10c      	bne.n	8002206 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021ec:	4a17      	ldr	r2, [pc, #92]	; (800224c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	4a14      	ldr	r2, [pc, #80]	; (8002248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021f6:	68d2      	ldr	r2, [r2, #12]
 80021f8:	0a12      	lsrs	r2, r2, #8
 80021fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	617b      	str	r3, [r7, #20]
    break;
 8002204:	e00c      	b.n	8002220 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002206:	4a12      	ldr	r2, [pc, #72]	; (8002250 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002210:	68d2      	ldr	r2, [r2, #12]
 8002212:	0a12      	lsrs	r2, r2, #8
 8002214:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
    break;
 800221e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002220:	4b09      	ldr	r3, [pc, #36]	; (8002248 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	0e5b      	lsrs	r3, r3, #25
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	3301      	adds	r3, #1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	fbb2 f3f3 	udiv	r3, r2, r3
 8002238:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800223a:	687b      	ldr	r3, [r7, #4]
}
 800223c:	4618      	mov	r0, r3
 800223e:	371c      	adds	r7, #28
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	40021000 	.word	0x40021000
 800224c:	016e3600 	.word	0x016e3600
 8002250:	00f42400 	.word	0x00f42400

08002254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800225c:	2300      	movs	r3, #0
 800225e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002260:	2300      	movs	r3, #0
 8002262:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 8098 	beq.w	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002272:	2300      	movs	r3, #0
 8002274:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002276:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10d      	bne.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002282:	4b40      	ldr	r3, [pc, #256]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002286:	4a3f      	ldr	r2, [pc, #252]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228c:	6593      	str	r3, [r2, #88]	; 0x58
 800228e:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229a:	2301      	movs	r3, #1
 800229c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800229e:	4b3a      	ldr	r3, [pc, #232]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a39      	ldr	r2, [pc, #228]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022aa:	f7fe fe09 	bl	8000ec0 <HAL_GetTick>
 80022ae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022b0:	e009      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b2:	f7fe fe05 	bl	8000ec0 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d902      	bls.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	74fb      	strb	r3, [r7, #19]
        break;
 80022c4:	e005      	b.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022c6:	4b30      	ldr	r3, [pc, #192]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0ef      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80022d2:	7cfb      	ldrb	r3, [r7, #19]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d159      	bne.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022d8:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01e      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d019      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022f4:	4b23      	ldr	r3, [pc, #140]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002300:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	4a1f      	ldr	r2, [pc, #124]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002310:	4b1c      	ldr	r3, [pc, #112]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	4a1b      	ldr	r2, [pc, #108]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002320:	4a18      	ldr	r2, [pc, #96]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d016      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7fe fdc5 	bl	8000ec0 <HAL_GetTick>
 8002336:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002338:	e00b      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe fdc1 	bl	8000ec0 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	f241 3288 	movw	r2, #5000	; 0x1388
 8002348:	4293      	cmp	r3, r2
 800234a:	d902      	bls.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	74fb      	strb	r3, [r7, #19]
            break;
 8002350:	e006      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002352:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002354:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d0ec      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002360:	7cfb      	ldrb	r3, [r7, #19]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d10b      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	4903      	ldr	r1, [pc, #12]	; (8002384 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002376:	4313      	orrs	r3, r2
 8002378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800237c:	e008      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800237e:	7cfb      	ldrb	r3, [r7, #19]
 8002380:	74bb      	strb	r3, [r7, #18]
 8002382:	e005      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002384:	40021000 	.word	0x40021000
 8002388:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002390:	7c7b      	ldrb	r3, [r7, #17]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002396:	4ba6      	ldr	r3, [pc, #664]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800239a:	4aa5      	ldr	r2, [pc, #660]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800239c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ae:	4ba0      	ldr	r3, [pc, #640]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	f023 0203 	bic.w	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	499c      	ldr	r1, [pc, #624]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023d0:	4b97      	ldr	r3, [pc, #604]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	f023 020c 	bic.w	r2, r3, #12
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	4994      	ldr	r1, [pc, #592]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0304 	and.w	r3, r3, #4
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80023f2:	4b8f      	ldr	r3, [pc, #572]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	498b      	ldr	r1, [pc, #556]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002414:	4b86      	ldr	r3, [pc, #536]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	4983      	ldr	r1, [pc, #524]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002436:	4b7e      	ldr	r3, [pc, #504]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	497a      	ldr	r1, [pc, #488]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002458:	4b75      	ldr	r3, [pc, #468]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	4972      	ldr	r1, [pc, #456]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800247a:	4b6d      	ldr	r3, [pc, #436]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	4969      	ldr	r1, [pc, #420]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00a      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800249c:	4b64      	ldr	r3, [pc, #400]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	4961      	ldr	r1, [pc, #388]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024be:	4b5c      	ldr	r3, [pc, #368]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	4958      	ldr	r1, [pc, #352]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d015      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ee:	4950      	ldr	r1, [pc, #320]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024fe:	d105      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002500:	4b4b      	ldr	r3, [pc, #300]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800250a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002514:	2b00      	cmp	r3, #0
 8002516:	d015      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002518:	4b45      	ldr	r3, [pc, #276]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002526:	4942      	ldr	r1, [pc, #264]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002536:	d105      	bne.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002538:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a3c      	ldr	r2, [pc, #240]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002542:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002550:	4b37      	ldr	r3, [pc, #220]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4934      	ldr	r1, [pc, #208]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800256e:	d105      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002570:	4b2f      	ldr	r3, [pc, #188]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a2e      	ldr	r2, [pc, #184]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800257a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002588:	4b29      	ldr	r3, [pc, #164]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002596:	4926      	ldr	r1, [pc, #152]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a8:	4b21      	ldr	r3, [pc, #132]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a20      	ldr	r2, [pc, #128]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	4918      	ldr	r1, [pc, #96]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025de:	d105      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e0:	4b13      	ldr	r3, [pc, #76]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a12      	ldr	r2, [pc, #72]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d015      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	490a      	ldr	r1, [pc, #40]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002616:	d105      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002622:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002624:	7cbb      	ldrb	r3, [r7, #18]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3718      	adds	r7, #24
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e042      	b.n	80026cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fe fac5 	bl	8000be8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2224      	movs	r2, #36	; 0x24
 8002662:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0201 	bic.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 fc02 	bl	8002e80 <UART_SetConfig>
 800267c:	4603      	mov	r3, r0
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e022      	b.n	80026cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fec2 	bl	8003418 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 ff49 	bl	800355c <UART_CheckIdleState>
 80026ca:	4603      	mov	r3, r0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b091      	sub	sp, #68	; 0x44
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	4613      	mov	r3, r2
 80026e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	f040 808c 	bne.w	8002806 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_UART_Transmit_IT+0x26>
 80026f4:	88fb      	ldrh	r3, [r7, #6]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e084      	b.n	8002808 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_UART_Transmit_IT+0x38>
 8002708:	2302      	movs	r3, #2
 800270a:	e07d      	b.n	8002808 <HAL_UART_Transmit_IT+0x134>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	88fa      	ldrh	r2, [r7, #6]
 800271e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	88fa      	ldrh	r2, [r7, #6]
 8002726:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2221      	movs	r2, #33	; 0x21
 800273c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002748:	d12e      	bne.n	80027a8 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002752:	d107      	bne.n	8002764 <HAL_UART_Transmit_IT+0x90>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d103      	bne.n	8002764 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4a2d      	ldr	r2, [pc, #180]	; (8002814 <HAL_UART_Transmit_IT+0x140>)
 8002760:	675a      	str	r2, [r3, #116]	; 0x74
 8002762:	e002      	b.n	800276a <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4a2c      	ldr	r2, [pc, #176]	; (8002818 <HAL_UART_Transmit_IT+0x144>)
 8002768:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3308      	adds	r3, #8
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002788:	63bb      	str	r3, [r7, #56]	; 0x38
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	3308      	adds	r3, #8
 8002790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002792:	637a      	str	r2, [r7, #52]	; 0x34
 8002794:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002798:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800279a:	e841 2300 	strex	r3, r2, [r1]
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80027a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e5      	bne.n	8002772 <HAL_UART_Transmit_IT+0x9e>
 80027a6:	e02c      	b.n	8002802 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027b0:	d107      	bne.n	80027c2 <HAL_UART_Transmit_IT+0xee>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d103      	bne.n	80027c2 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a17      	ldr	r2, [pc, #92]	; (800281c <HAL_UART_Transmit_IT+0x148>)
 80027be:	675a      	str	r2, [r3, #116]	; 0x74
 80027c0:	e002      	b.n	80027c8 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a16      	ldr	r2, [pc, #88]	; (8002820 <HAL_UART_Transmit_IT+0x14c>)
 80027c6:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	e853 3f00 	ldrex	r3, [r3]
 80027dc:	613b      	str	r3, [r7, #16]
   return(result);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f2:	69f9      	ldr	r1, [r7, #28]
 80027f4:	6a3a      	ldr	r2, [r7, #32]
 80027f6:	e841 2300 	strex	r3, r2, [r1]
 80027fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e6      	bne.n	80027d0 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3744      	adds	r7, #68	; 0x44
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	08003ad5 	.word	0x08003ad5
 8002818:	080039f5 	.word	0x080039f5
 800281c:	08003933 	.word	0x08003933
 8002820:	0800387b 	.word	0x0800387b

08002824 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b0ba      	sub	sp, #232	; 0xe8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800284a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800284e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002852:	4013      	ands	r3, r2
 8002854:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002858:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d11b      	bne.n	8002898 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b00      	cmp	r3, #0
 800286a:	d015      	beq.n	8002898 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800286c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d009      	beq.n	8002898 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 82d6 	beq.w	8002e3a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
      }
      return;
 8002896:	e2d0      	b.n	8002e3a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002898:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 811f 	beq.w	8002ae0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80028a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80028a6:	4b8b      	ldr	r3, [pc, #556]	; (8002ad4 <HAL_UART_IRQHandler+0x2b0>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80028ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80028b2:	4b89      	ldr	r3, [pc, #548]	; (8002ad8 <HAL_UART_IRQHandler+0x2b4>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	f000 8112 	beq.w	8002ae0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c0:	f003 0301 	and.w	r3, r3, #1
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d011      	beq.n	80028ec <HAL_UART_IRQHandler+0xc8>
 80028c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00b      	beq.n	80028ec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2201      	movs	r2, #1
 80028da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028e2:	f043 0201 	orr.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d011      	beq.n	800291c <HAL_UART_IRQHandler+0xf8>
 80028f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00b      	beq.n	800291c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2202      	movs	r2, #2
 800290a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002912:	f043 0204 	orr.w	r2, r3, #4
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800291c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d011      	beq.n	800294c <HAL_UART_IRQHandler+0x128>
 8002928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00b      	beq.n	800294c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2204      	movs	r2, #4
 800293a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002942:	f043 0202 	orr.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800294c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d017      	beq.n	8002988 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800295c:	f003 0320 	and.w	r3, r3, #32
 8002960:	2b00      	cmp	r3, #0
 8002962:	d105      	bne.n	8002970 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002964:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002968:	4b5a      	ldr	r3, [pc, #360]	; (8002ad4 <HAL_UART_IRQHandler+0x2b0>)
 800296a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00b      	beq.n	8002988 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2208      	movs	r2, #8
 8002976:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800297e:	f043 0208 	orr.w	r2, r3, #8
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800298c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002990:	2b00      	cmp	r3, #0
 8002992:	d012      	beq.n	80029ba <HAL_UART_IRQHandler+0x196>
 8002994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002998:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00c      	beq.n	80029ba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 823c 	beq.w	8002e3e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80029c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d013      	beq.n	80029fa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80029d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d105      	bne.n	80029ea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0e:	2b40      	cmp	r3, #64	; 0x40
 8002a10:	d005      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d04f      	beq.n	8002abe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 feaf 	bl	8003782 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a2e:	2b40      	cmp	r3, #64	; 0x40
 8002a30:	d141      	bne.n	8002ab6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3308      	adds	r3, #8
 8002a38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a40:	e853 3f00 	ldrex	r3, [r3]
 8002a44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	3308      	adds	r3, #8
 8002a5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a6e:	e841 2300 	strex	r3, r2, [r1]
 8002a72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1d9      	bne.n	8002a32 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d013      	beq.n	8002aae <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a8a:	4a14      	ldr	r2, [pc, #80]	; (8002adc <HAL_UART_IRQHandler+0x2b8>)
 8002a8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fbba 	bl	800120c <HAL_DMA_Abort_IT>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d017      	beq.n	8002ace <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aac:	e00f      	b.n	8002ace <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f9d0 	bl	8002e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab4:	e00b      	b.n	8002ace <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f9cc 	bl	8002e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002abc:	e007      	b.n	8002ace <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f9c8 	bl	8002e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002acc:	e1b7      	b.n	8002e3e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ace:	bf00      	nop
    return;
 8002ad0:	e1b5      	b.n	8002e3e <HAL_UART_IRQHandler+0x61a>
 8002ad2:	bf00      	nop
 8002ad4:	10000001 	.word	0x10000001
 8002ad8:	04000120 	.word	0x04000120
 8002adc:	0800384f 	.word	0x0800384f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	f040 814a 	bne.w	8002d7e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 8143 	beq.w	8002d7e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 813c 	beq.w	8002d7e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2210      	movs	r2, #16
 8002b0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	f040 80b5 	bne.w	8002c88 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b2a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 8187 	beq.w	8002e42 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002b3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	f080 817f 	bcs.w	8002e42 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b4a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f040 8086 	bne.w	8002c6c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b6c:	e853 3f00 	ldrex	r3, [r3]
 8002b70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b9a:	e841 2300 	strex	r3, r2, [r1]
 8002b9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1da      	bne.n	8002b60 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	3308      	adds	r3, #8
 8002bb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb4:	e853 3f00 	ldrex	r3, [r3]
 8002bb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bbc:	f023 0301 	bic.w	r3, r3, #1
 8002bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3308      	adds	r3, #8
 8002bca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002bce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002bd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002bda:	e841 2300 	strex	r3, r2, [r1]
 8002bde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002be0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1e1      	bne.n	8002baa <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	3308      	adds	r3, #8
 8002bec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bf0:	e853 3f00 	ldrex	r3, [r3]
 8002bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002bf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3308      	adds	r3, #8
 8002c06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c12:	e841 2300 	strex	r3, r2, [r1]
 8002c16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e3      	bne.n	8002be6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c34:	e853 3f00 	ldrex	r3, [r3]
 8002c38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c3c:	f023 0310 	bic.w	r3, r3, #16
 8002c40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e4      	bne.n	8002c2c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fe fa77 	bl	800115a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	4619      	mov	r1, r3
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 f8f1 	bl	8002e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c86:	e0dc      	b.n	8002e42 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80ce 	beq.w	8002e46 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8002caa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 80c9 	beq.w	8002e46 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cbc:	e853 3f00 	ldrex	r3, [r3]
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002cd8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002cdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cde:	e841 2300 	strex	r3, r2, [r1]
 8002ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1e4      	bne.n	8002cb4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3308      	adds	r3, #8
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	623b      	str	r3, [r7, #32]
   return(result);
 8002cfa:	6a3b      	ldr	r3, [r7, #32]
 8002cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3308      	adds	r3, #8
 8002d0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d12:	633a      	str	r2, [r7, #48]	; 0x30
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d1a:	e841 2300 	strex	r3, r2, [r1]
 8002d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e1      	bne.n	8002cea <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	e853 3f00 	ldrex	r3, [r3]
 8002d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f023 0310 	bic.w	r3, r3, #16
 8002d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d60:	69b9      	ldr	r1, [r7, #24]
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	e841 2300 	strex	r3, r2, [r1]
 8002d68:	617b      	str	r3, [r7, #20]
   return(result);
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e4      	bne.n	8002d3a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d74:	4619      	mov	r1, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f876 	bl	8002e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d7c:	e063      	b.n	8002e46 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00e      	beq.n	8002da8 <HAL_UART_IRQHandler+0x584>
 8002d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d008      	beq.n	8002da8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 ff37 	bl	8003c14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002da6:	e051      	b.n	8002e4c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d014      	beq.n	8002dde <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002db4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d105      	bne.n	8002dcc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d03a      	beq.n	8002e4a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	4798      	blx	r3
    }
    return;
 8002ddc:	e035      	b.n	8002e4a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_UART_IRQHandler+0x5da>
 8002dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 fee1 	bl	8003bbe <UART_EndTransmit_IT>
    return;
 8002dfc:	e026      	b.n	8002e4c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <HAL_UART_IRQHandler+0x5fa>
 8002e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 ff10 	bl	8003c3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e1c:	e016      	b.n	8002e4c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d010      	beq.n	8002e4c <HAL_UART_IRQHandler+0x628>
 8002e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	da0c      	bge.n	8002e4c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fef8 	bl	8003c28 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002e38:	e008      	b.n	8002e4c <HAL_UART_IRQHandler+0x628>
      return;
 8002e3a:	bf00      	nop
 8002e3c:	e006      	b.n	8002e4c <HAL_UART_IRQHandler+0x628>
    return;
 8002e3e:	bf00      	nop
 8002e40:	e004      	b.n	8002e4c <HAL_UART_IRQHandler+0x628>
      return;
 8002e42:	bf00      	nop
 8002e44:	e002      	b.n	8002e4c <HAL_UART_IRQHandler+0x628>
      return;
 8002e46:	bf00      	nop
 8002e48:	e000      	b.n	8002e4c <HAL_UART_IRQHandler+0x628>
    return;
 8002e4a:	bf00      	nop
  }
}
 8002e4c:	37e8      	adds	r7, #232	; 0xe8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop

08002e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e84:	b08c      	sub	sp, #48	; 0x30
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	431a      	orrs	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	4bab      	ldr	r3, [pc, #684]	; (800315c <UART_SetConfig+0x2dc>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4aa0      	ldr	r2, [pc, #640]	; (8003160 <UART_SetConfig+0x2e0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d004      	beq.n	8002eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002ef6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f00:	430b      	orrs	r3, r1
 8002f02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	f023 010f 	bic.w	r1, r3, #15
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a91      	ldr	r2, [pc, #580]	; (8003164 <UART_SetConfig+0x2e4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d125      	bne.n	8002f70 <UART_SetConfig+0xf0>
 8002f24:	4b90      	ldr	r3, [pc, #576]	; (8003168 <UART_SetConfig+0x2e8>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f003 0303 	and.w	r3, r3, #3
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d81a      	bhi.n	8002f68 <UART_SetConfig+0xe8>
 8002f32:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <UART_SetConfig+0xb8>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f49 	.word	0x08002f49
 8002f3c:	08002f59 	.word	0x08002f59
 8002f40:	08002f51 	.word	0x08002f51
 8002f44:	08002f61 	.word	0x08002f61
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f4e:	e0d6      	b.n	80030fe <UART_SetConfig+0x27e>
 8002f50:	2302      	movs	r3, #2
 8002f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f56:	e0d2      	b.n	80030fe <UART_SetConfig+0x27e>
 8002f58:	2304      	movs	r3, #4
 8002f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f5e:	e0ce      	b.n	80030fe <UART_SetConfig+0x27e>
 8002f60:	2308      	movs	r3, #8
 8002f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f66:	e0ca      	b.n	80030fe <UART_SetConfig+0x27e>
 8002f68:	2310      	movs	r3, #16
 8002f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f6e:	e0c6      	b.n	80030fe <UART_SetConfig+0x27e>
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a7d      	ldr	r2, [pc, #500]	; (800316c <UART_SetConfig+0x2ec>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d138      	bne.n	8002fec <UART_SetConfig+0x16c>
 8002f7a:	4b7b      	ldr	r3, [pc, #492]	; (8003168 <UART_SetConfig+0x2e8>)
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d82d      	bhi.n	8002fe4 <UART_SetConfig+0x164>
 8002f88:	a201      	add	r2, pc, #4	; (adr r2, 8002f90 <UART_SetConfig+0x110>)
 8002f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f8e:	bf00      	nop
 8002f90:	08002fc5 	.word	0x08002fc5
 8002f94:	08002fe5 	.word	0x08002fe5
 8002f98:	08002fe5 	.word	0x08002fe5
 8002f9c:	08002fe5 	.word	0x08002fe5
 8002fa0:	08002fd5 	.word	0x08002fd5
 8002fa4:	08002fe5 	.word	0x08002fe5
 8002fa8:	08002fe5 	.word	0x08002fe5
 8002fac:	08002fe5 	.word	0x08002fe5
 8002fb0:	08002fcd 	.word	0x08002fcd
 8002fb4:	08002fe5 	.word	0x08002fe5
 8002fb8:	08002fe5 	.word	0x08002fe5
 8002fbc:	08002fe5 	.word	0x08002fe5
 8002fc0:	08002fdd 	.word	0x08002fdd
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fca:	e098      	b.n	80030fe <UART_SetConfig+0x27e>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fd2:	e094      	b.n	80030fe <UART_SetConfig+0x27e>
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fda:	e090      	b.n	80030fe <UART_SetConfig+0x27e>
 8002fdc:	2308      	movs	r3, #8
 8002fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fe2:	e08c      	b.n	80030fe <UART_SetConfig+0x27e>
 8002fe4:	2310      	movs	r3, #16
 8002fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002fea:	e088      	b.n	80030fe <UART_SetConfig+0x27e>
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a5f      	ldr	r2, [pc, #380]	; (8003170 <UART_SetConfig+0x2f0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d125      	bne.n	8003042 <UART_SetConfig+0x1c2>
 8002ff6:	4b5c      	ldr	r3, [pc, #368]	; (8003168 <UART_SetConfig+0x2e8>)
 8002ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003000:	2b30      	cmp	r3, #48	; 0x30
 8003002:	d016      	beq.n	8003032 <UART_SetConfig+0x1b2>
 8003004:	2b30      	cmp	r3, #48	; 0x30
 8003006:	d818      	bhi.n	800303a <UART_SetConfig+0x1ba>
 8003008:	2b20      	cmp	r3, #32
 800300a:	d00a      	beq.n	8003022 <UART_SetConfig+0x1a2>
 800300c:	2b20      	cmp	r3, #32
 800300e:	d814      	bhi.n	800303a <UART_SetConfig+0x1ba>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <UART_SetConfig+0x19a>
 8003014:	2b10      	cmp	r3, #16
 8003016:	d008      	beq.n	800302a <UART_SetConfig+0x1aa>
 8003018:	e00f      	b.n	800303a <UART_SetConfig+0x1ba>
 800301a:	2300      	movs	r3, #0
 800301c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003020:	e06d      	b.n	80030fe <UART_SetConfig+0x27e>
 8003022:	2302      	movs	r3, #2
 8003024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003028:	e069      	b.n	80030fe <UART_SetConfig+0x27e>
 800302a:	2304      	movs	r3, #4
 800302c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003030:	e065      	b.n	80030fe <UART_SetConfig+0x27e>
 8003032:	2308      	movs	r3, #8
 8003034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003038:	e061      	b.n	80030fe <UART_SetConfig+0x27e>
 800303a:	2310      	movs	r3, #16
 800303c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003040:	e05d      	b.n	80030fe <UART_SetConfig+0x27e>
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a4b      	ldr	r2, [pc, #300]	; (8003174 <UART_SetConfig+0x2f4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d125      	bne.n	8003098 <UART_SetConfig+0x218>
 800304c:	4b46      	ldr	r3, [pc, #280]	; (8003168 <UART_SetConfig+0x2e8>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003056:	2bc0      	cmp	r3, #192	; 0xc0
 8003058:	d016      	beq.n	8003088 <UART_SetConfig+0x208>
 800305a:	2bc0      	cmp	r3, #192	; 0xc0
 800305c:	d818      	bhi.n	8003090 <UART_SetConfig+0x210>
 800305e:	2b80      	cmp	r3, #128	; 0x80
 8003060:	d00a      	beq.n	8003078 <UART_SetConfig+0x1f8>
 8003062:	2b80      	cmp	r3, #128	; 0x80
 8003064:	d814      	bhi.n	8003090 <UART_SetConfig+0x210>
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <UART_SetConfig+0x1f0>
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	d008      	beq.n	8003080 <UART_SetConfig+0x200>
 800306e:	e00f      	b.n	8003090 <UART_SetConfig+0x210>
 8003070:	2300      	movs	r3, #0
 8003072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003076:	e042      	b.n	80030fe <UART_SetConfig+0x27e>
 8003078:	2302      	movs	r3, #2
 800307a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800307e:	e03e      	b.n	80030fe <UART_SetConfig+0x27e>
 8003080:	2304      	movs	r3, #4
 8003082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003086:	e03a      	b.n	80030fe <UART_SetConfig+0x27e>
 8003088:	2308      	movs	r3, #8
 800308a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800308e:	e036      	b.n	80030fe <UART_SetConfig+0x27e>
 8003090:	2310      	movs	r3, #16
 8003092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003096:	e032      	b.n	80030fe <UART_SetConfig+0x27e>
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a30      	ldr	r2, [pc, #192]	; (8003160 <UART_SetConfig+0x2e0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d12a      	bne.n	80030f8 <UART_SetConfig+0x278>
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <UART_SetConfig+0x2e8>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030b0:	d01a      	beq.n	80030e8 <UART_SetConfig+0x268>
 80030b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030b6:	d81b      	bhi.n	80030f0 <UART_SetConfig+0x270>
 80030b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030bc:	d00c      	beq.n	80030d8 <UART_SetConfig+0x258>
 80030be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030c2:	d815      	bhi.n	80030f0 <UART_SetConfig+0x270>
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <UART_SetConfig+0x250>
 80030c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030cc:	d008      	beq.n	80030e0 <UART_SetConfig+0x260>
 80030ce:	e00f      	b.n	80030f0 <UART_SetConfig+0x270>
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030d6:	e012      	b.n	80030fe <UART_SetConfig+0x27e>
 80030d8:	2302      	movs	r3, #2
 80030da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030de:	e00e      	b.n	80030fe <UART_SetConfig+0x27e>
 80030e0:	2304      	movs	r3, #4
 80030e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e6:	e00a      	b.n	80030fe <UART_SetConfig+0x27e>
 80030e8:	2308      	movs	r3, #8
 80030ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ee:	e006      	b.n	80030fe <UART_SetConfig+0x27e>
 80030f0:	2310      	movs	r3, #16
 80030f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f6:	e002      	b.n	80030fe <UART_SetConfig+0x27e>
 80030f8:	2310      	movs	r3, #16
 80030fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a17      	ldr	r2, [pc, #92]	; (8003160 <UART_SetConfig+0x2e0>)
 8003104:	4293      	cmp	r3, r2
 8003106:	f040 80a8 	bne.w	800325a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800310a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800310e:	2b08      	cmp	r3, #8
 8003110:	d834      	bhi.n	800317c <UART_SetConfig+0x2fc>
 8003112:	a201      	add	r2, pc, #4	; (adr r2, 8003118 <UART_SetConfig+0x298>)
 8003114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003118:	0800313d 	.word	0x0800313d
 800311c:	0800317d 	.word	0x0800317d
 8003120:	08003145 	.word	0x08003145
 8003124:	0800317d 	.word	0x0800317d
 8003128:	0800314b 	.word	0x0800314b
 800312c:	0800317d 	.word	0x0800317d
 8003130:	0800317d 	.word	0x0800317d
 8003134:	0800317d 	.word	0x0800317d
 8003138:	08003153 	.word	0x08003153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800313c:	f7ff f818 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 8003140:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003142:	e021      	b.n	8003188 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <UART_SetConfig+0x2f8>)
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003148:	e01e      	b.n	8003188 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800314a:	f7fe ffa3 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 800314e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003150:	e01a      	b.n	8003188 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003158:	e016      	b.n	8003188 <UART_SetConfig+0x308>
 800315a:	bf00      	nop
 800315c:	cfff69f3 	.word	0xcfff69f3
 8003160:	40008000 	.word	0x40008000
 8003164:	40013800 	.word	0x40013800
 8003168:	40021000 	.word	0x40021000
 800316c:	40004400 	.word	0x40004400
 8003170:	40004800 	.word	0x40004800
 8003174:	40004c00 	.word	0x40004c00
 8003178:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003186:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 812a 	beq.w	80033e4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	4a9e      	ldr	r2, [pc, #632]	; (8003410 <UART_SetConfig+0x590>)
 8003196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800319a:	461a      	mov	r2, r3
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	fbb3 f3f2 	udiv	r3, r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d305      	bcc.n	80031c0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d903      	bls.n	80031c8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80031c6:	e10d      	b.n	80033e4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	2200      	movs	r2, #0
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	60fa      	str	r2, [r7, #12]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d4:	4a8e      	ldr	r2, [pc, #568]	; (8003410 <UART_SetConfig+0x590>)
 80031d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2200      	movs	r2, #0
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031ea:	f7fd f871 	bl	80002d0 <__aeabi_uldivmod>
 80031ee:	4602      	mov	r2, r0
 80031f0:	460b      	mov	r3, r1
 80031f2:	4610      	mov	r0, r2
 80031f4:	4619      	mov	r1, r3
 80031f6:	f04f 0200 	mov.w	r2, #0
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	020b      	lsls	r3, r1, #8
 8003200:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003204:	0202      	lsls	r2, r0, #8
 8003206:	6979      	ldr	r1, [r7, #20]
 8003208:	6849      	ldr	r1, [r1, #4]
 800320a:	0849      	lsrs	r1, r1, #1
 800320c:	2000      	movs	r0, #0
 800320e:	460c      	mov	r4, r1
 8003210:	4605      	mov	r5, r0
 8003212:	eb12 0804 	adds.w	r8, r2, r4
 8003216:	eb43 0905 	adc.w	r9, r3, r5
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	469a      	mov	sl, r3
 8003222:	4693      	mov	fp, r2
 8003224:	4652      	mov	r2, sl
 8003226:	465b      	mov	r3, fp
 8003228:	4640      	mov	r0, r8
 800322a:	4649      	mov	r1, r9
 800322c:	f7fd f850 	bl	80002d0 <__aeabi_uldivmod>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4613      	mov	r3, r2
 8003236:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800323e:	d308      	bcc.n	8003252 <UART_SetConfig+0x3d2>
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003246:	d204      	bcs.n	8003252 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	60da      	str	r2, [r3, #12]
 8003250:	e0c8      	b.n	80033e4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003258:	e0c4      	b.n	80033e4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003262:	d167      	bne.n	8003334 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003268:	2b08      	cmp	r3, #8
 800326a:	d828      	bhi.n	80032be <UART_SetConfig+0x43e>
 800326c:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <UART_SetConfig+0x3f4>)
 800326e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003272:	bf00      	nop
 8003274:	08003299 	.word	0x08003299
 8003278:	080032a1 	.word	0x080032a1
 800327c:	080032a9 	.word	0x080032a9
 8003280:	080032bf 	.word	0x080032bf
 8003284:	080032af 	.word	0x080032af
 8003288:	080032bf 	.word	0x080032bf
 800328c:	080032bf 	.word	0x080032bf
 8003290:	080032bf 	.word	0x080032bf
 8003294:	080032b7 	.word	0x080032b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003298:	f7fe ff6a 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 800329c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800329e:	e014      	b.n	80032ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032a0:	f7fe ff7c 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 80032a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032a6:	e010      	b.n	80032ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a8:	4b5a      	ldr	r3, [pc, #360]	; (8003414 <UART_SetConfig+0x594>)
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032ac:	e00d      	b.n	80032ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ae:	f7fe fef1 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 80032b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032b4:	e009      	b.n	80032ca <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032bc:	e005      	b.n	80032ca <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 8089 	beq.w	80033e4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	4a4e      	ldr	r2, [pc, #312]	; (8003410 <UART_SetConfig+0x590>)
 80032d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032dc:	461a      	mov	r2, r3
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80032e4:	005a      	lsls	r2, r3, #1
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	441a      	add	r2, r3
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f8:	6a3b      	ldr	r3, [r7, #32]
 80032fa:	2b0f      	cmp	r3, #15
 80032fc:	d916      	bls.n	800332c <UART_SetConfig+0x4ac>
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003304:	d212      	bcs.n	800332c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	b29b      	uxth	r3, r3
 800330a:	f023 030f 	bic.w	r3, r3, #15
 800330e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003310:	6a3b      	ldr	r3, [r7, #32]
 8003312:	085b      	lsrs	r3, r3, #1
 8003314:	b29b      	uxth	r3, r3
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	b29a      	uxth	r2, r3
 800331c:	8bfb      	ldrh	r3, [r7, #30]
 800331e:	4313      	orrs	r3, r2
 8003320:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	8bfa      	ldrh	r2, [r7, #30]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	e05b      	b.n	80033e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003332:	e057      	b.n	80033e4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003334:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003338:	2b08      	cmp	r3, #8
 800333a:	d828      	bhi.n	800338e <UART_SetConfig+0x50e>
 800333c:	a201      	add	r2, pc, #4	; (adr r2, 8003344 <UART_SetConfig+0x4c4>)
 800333e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003342:	bf00      	nop
 8003344:	08003369 	.word	0x08003369
 8003348:	08003371 	.word	0x08003371
 800334c:	08003379 	.word	0x08003379
 8003350:	0800338f 	.word	0x0800338f
 8003354:	0800337f 	.word	0x0800337f
 8003358:	0800338f 	.word	0x0800338f
 800335c:	0800338f 	.word	0x0800338f
 8003360:	0800338f 	.word	0x0800338f
 8003364:	08003387 	.word	0x08003387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003368:	f7fe ff02 	bl	8002170 <HAL_RCC_GetPCLK1Freq>
 800336c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800336e:	e014      	b.n	800339a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003370:	f7fe ff14 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 8003374:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003376:	e010      	b.n	800339a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003378:	4b26      	ldr	r3, [pc, #152]	; (8003414 <UART_SetConfig+0x594>)
 800337a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800337c:	e00d      	b.n	800339a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337e:	f7fe fe89 	bl	8002094 <HAL_RCC_GetSysClockFreq>
 8003382:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003384:	e009      	b.n	800339a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800338c:	e005      	b.n	800339a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003398:	bf00      	nop
    }

    if (pclk != 0U)
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	2b00      	cmp	r3, #0
 800339e:	d021      	beq.n	80033e4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	4a1a      	ldr	r2, [pc, #104]	; (8003410 <UART_SetConfig+0x590>)
 80033a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033aa:	461a      	mov	r2, r3
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	085b      	lsrs	r3, r3, #1
 80033b8:	441a      	add	r2, r3
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	2b0f      	cmp	r3, #15
 80033c8:	d909      	bls.n	80033de <UART_SetConfig+0x55e>
 80033ca:	6a3b      	ldr	r3, [r7, #32]
 80033cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d0:	d205      	bcs.n	80033de <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60da      	str	r2, [r3, #12]
 80033dc:	e002      	b.n	80033e4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2200      	movs	r2, #0
 80033f8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003400:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003404:	4618      	mov	r0, r3
 8003406:	3730      	adds	r7, #48	; 0x30
 8003408:	46bd      	mov	sp, r7
 800340a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800340e:	bf00      	nop
 8003410:	080086b4 	.word	0x080086b4
 8003414:	00f42400 	.word	0x00f42400

08003418 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00a      	beq.n	8003464 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d00a      	beq.n	8003486 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	f003 0310 	and.w	r3, r3, #16
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00a      	beq.n	80034ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00a      	beq.n	80034ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d01a      	beq.n	800352e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003516:	d10a      	bne.n	800352e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	605a      	str	r2, [r3, #4]
  }
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af02      	add	r7, sp, #8
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800356c:	f7fd fca8 	bl	8000ec0 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b08      	cmp	r3, #8
 800357e:	d10e      	bne.n	800359e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f82f 	bl	80035f2 <UART_WaitOnFlagUntilTimeout>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e025      	b.n	80035ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d10e      	bne.n	80035ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 f819 	bl	80035f2 <UART_WaitOnFlagUntilTimeout>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e00f      	b.n	80035ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2220      	movs	r2, #32
 80035d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b09c      	sub	sp, #112	; 0x70
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	603b      	str	r3, [r7, #0]
 80035fe:	4613      	mov	r3, r2
 8003600:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003602:	e0a9      	b.n	8003758 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003604:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	f000 80a5 	beq.w	8003758 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360e:	f7fd fc57 	bl	8000ec0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800361a:	429a      	cmp	r2, r3
 800361c:	d302      	bcc.n	8003624 <UART_WaitOnFlagUntilTimeout+0x32>
 800361e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003620:	2b00      	cmp	r3, #0
 8003622:	d140      	bne.n	80036a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003634:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003638:	667b      	str	r3, [r7, #100]	; 0x64
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003642:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003644:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003648:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e6      	bne.n	8003624 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	3308      	adds	r3, #8
 800365c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003660:	e853 3f00 	ldrex	r3, [r3]
 8003664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	663b      	str	r3, [r7, #96]	; 0x60
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3308      	adds	r3, #8
 8003674:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003676:	64ba      	str	r2, [r7, #72]	; 0x48
 8003678:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800367c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e5      	bne.n	8003656 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e069      	b.n	800377a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d051      	beq.n	8003758 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036c2:	d149      	bne.n	8003758 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ec:	637b      	str	r3, [r7, #52]	; 0x34
 80036ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e6      	bne.n	80036ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3308      	adds	r3, #8
 8003706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	613b      	str	r3, [r7, #16]
   return(result);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	66bb      	str	r3, [r7, #104]	; 0x68
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3308      	adds	r3, #8
 800371e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003720:	623a      	str	r2, [r7, #32]
 8003722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	69f9      	ldr	r1, [r7, #28]
 8003726:	6a3a      	ldr	r2, [r7, #32]
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	61bb      	str	r3, [r7, #24]
   return(result);
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2220      	movs	r2, #32
 8003748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e010      	b.n	800377a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4013      	ands	r3, r2
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	429a      	cmp	r2, r3
 8003766:	bf0c      	ite	eq
 8003768:	2301      	moveq	r3, #1
 800376a:	2300      	movne	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	461a      	mov	r2, r3
 8003770:	79fb      	ldrb	r3, [r7, #7]
 8003772:	429a      	cmp	r2, r3
 8003774:	f43f af46 	beq.w	8003604 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3770      	adds	r7, #112	; 0x70
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003782:	b480      	push	{r7}
 8003784:	b095      	sub	sp, #84	; 0x54
 8003786:	af00      	add	r7, sp, #0
 8003788:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003792:	e853 3f00 	ldrex	r3, [r3]
 8003796:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800379e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037a8:	643b      	str	r3, [r7, #64]	; 0x40
 80037aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037b0:	e841 2300 	strex	r3, r2, [r1]
 80037b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e6      	bne.n	800378a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3308      	adds	r3, #8
 80037c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3308      	adds	r3, #8
 80037de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e8:	e841 2300 	strex	r3, r2, [r1]
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1e3      	bne.n	80037bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d118      	bne.n	800382e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	e853 3f00 	ldrex	r3, [r3]
 8003808:	60bb      	str	r3, [r7, #8]
   return(result);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f023 0310 	bic.w	r3, r3, #16
 8003810:	647b      	str	r3, [r7, #68]	; 0x44
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	6979      	ldr	r1, [r7, #20]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	e841 2300 	strex	r3, r2, [r1]
 8003826:	613b      	str	r3, [r7, #16]
   return(result);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1e6      	bne.n	80037fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003842:	bf00      	nop
 8003844:	3754      	adds	r7, #84	; 0x54
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b084      	sub	sp, #16
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f7ff faf1 	bl	8002e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800387a:	b480      	push	{r7}
 800387c:	b08f      	sub	sp, #60	; 0x3c
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003888:	2b21      	cmp	r3, #33	; 0x21
 800388a:	d14c      	bne.n	8003926 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d132      	bne.n	80038fe <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ac:	637b      	str	r3, [r7, #52]	; 0x34
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	461a      	mov	r2, r3
 80038b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038b8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038be:	e841 2300 	strex	r3, r2, [r1]
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1e6      	bne.n	8003898 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	e853 3f00 	ldrex	r3, [r3]
 80038d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038de:	633b      	str	r3, [r7, #48]	; 0x30
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ec:	6979      	ldr	r1, [r7, #20]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	e841 2300 	strex	r3, r2, [r1]
 80038f4:	613b      	str	r3, [r7, #16]
   return(result);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e6      	bne.n	80038ca <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80038fc:	e013      	b.n	8003926 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003902:	781a      	ldrb	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003926:	bf00      	nop
 8003928:	373c      	adds	r7, #60	; 0x3c
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003932:	b480      	push	{r7}
 8003934:	b091      	sub	sp, #68	; 0x44
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003940:	2b21      	cmp	r3, #33	; 0x21
 8003942:	d151      	bne.n	80039e8 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d132      	bne.n	80039b6 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	e853 3f00 	ldrex	r3, [r3]
 800395c:	623b      	str	r3, [r7, #32]
   return(result);
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003964:	63bb      	str	r3, [r7, #56]	; 0x38
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	461a      	mov	r2, r3
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	633b      	str	r3, [r7, #48]	; 0x30
 8003970:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800397c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e6      	bne.n	8003950 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a0:	61fb      	str	r3, [r7, #28]
 80039a2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	69b9      	ldr	r1, [r7, #24]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	617b      	str	r3, [r7, #20]
   return(result);
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e6      	bne.n	8003982 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80039b4:	e018      	b.n	80039e8 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80039bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039be:	881b      	ldrh	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d0:	1c9a      	adds	r2, r3, #2
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80039e8:	bf00      	nop
 80039ea:	3744      	adds	r7, #68	; 0x44
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b091      	sub	sp, #68	; 0x44
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a02:	2b21      	cmp	r3, #33	; 0x21
 8003a04:	d160      	bne.n	8003ac8 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003a0c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003a0e:	e057      	b.n	8003ac0 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d133      	bne.n	8003a84 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3308      	adds	r3, #8
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	e853 3f00 	ldrex	r3, [r3]
 8003a2a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a2c:	6a3b      	ldr	r3, [r7, #32]
 8003a2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a3c:	633a      	str	r2, [r7, #48]	; 0x30
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e5      	bne.n	8003a1c <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a64:	637b      	str	r3, [r7, #52]	; 0x34
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a6e:	61fb      	str	r3, [r7, #28]
 8003a70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a72:	69b9      	ldr	r1, [r7, #24]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	e841 2300 	strex	r3, r2, [r1]
 8003a7a:	617b      	str	r3, [r7, #20]
   return(result);
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d1e6      	bne.n	8003a50 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003a82:	e021      	b.n	8003ac8 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d013      	beq.n	8003aba <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	781a      	ldrb	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aa2:	1c5a      	adds	r2, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003aba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003abc:	3b01      	subs	r3, #1
 8003abe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003ac0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1a4      	bne.n	8003a10 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003ac6:	e7ff      	b.n	8003ac8 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003ac8:	bf00      	nop
 8003aca:	3744      	adds	r7, #68	; 0x44
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b091      	sub	sp, #68	; 0x44
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ae2:	2b21      	cmp	r3, #33	; 0x21
 8003ae4:	d165      	bne.n	8003bb2 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003aec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003aee:	e05c      	b.n	8003baa <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d133      	bne.n	8003b64 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3308      	adds	r3, #8
 8003b02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	e853 3f00 	ldrex	r3, [r3]
 8003b0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b12:	637b      	str	r3, [r7, #52]	; 0x34
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b24:	e841 2300 	strex	r3, r2, [r1]
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1e5      	bne.n	8003afc <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	e853 3f00 	ldrex	r3, [r3]
 8003b3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b52:	6979      	ldr	r1, [r7, #20]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	e841 2300 	strex	r3, r2, [r1]
 8003b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1e6      	bne.n	8003b30 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003b62:	e026      	b.n	8003bb2 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d018      	beq.n	8003ba4 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b76:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b7a:	881b      	ldrh	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b86:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8c:	1c9a      	adds	r2, r3, #2
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003ba4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003baa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d19f      	bne.n	8003af0 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003bb0:	e7ff      	b.n	8003bb2 <UART_TxISR_16BIT_FIFOEN+0xde>
 8003bb2:	bf00      	nop
 8003bb4:	3744      	adds	r7, #68	; 0x44
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b088      	sub	sp, #32
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	e853 3f00 	ldrex	r3, [r3]
 8003bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	461a      	mov	r2, r3
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be8:	6979      	ldr	r1, [r7, #20]
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	e841 2300 	strex	r3, r2, [r1]
 8003bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1e6      	bne.n	8003bc6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fc fd2e 	bl	8000668 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c0c:	bf00      	nop
 8003c0e:	3720      	adds	r7, #32
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e027      	b.n	8003cb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2224      	movs	r2, #36	; 0x24
 8003c72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0201 	bic.w	r2, r2, #1
 8003c8c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003c94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e02d      	b.n	8003d36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2224      	movs	r2, #36	; 0x24
 8003ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0201 	bic.w	r2, r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f850 	bl	8003dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e02d      	b.n	8003db2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2224      	movs	r2, #36	; 0x24
 8003d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0201 	bic.w	r2, r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f812 	bl	8003dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d108      	bne.n	8003dde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ddc:	e031      	b.n	8003e42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003dde:	2308      	movs	r3, #8
 8003de0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003de2:	2308      	movs	r3, #8
 8003de4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	0e5b      	lsrs	r3, r3, #25
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	0f5b      	lsrs	r3, r3, #29
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e06:	7bbb      	ldrb	r3, [r7, #14]
 8003e08:	7b3a      	ldrb	r2, [r7, #12]
 8003e0a:	4911      	ldr	r1, [pc, #68]	; (8003e50 <UARTEx_SetNbDataToProcess+0x94>)
 8003e0c:	5c8a      	ldrb	r2, [r1, r2]
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e12:	7b3a      	ldrb	r2, [r7, #12]
 8003e14:	490f      	ldr	r1, [pc, #60]	; (8003e54 <UARTEx_SetNbDataToProcess+0x98>)
 8003e16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e18:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	7b7a      	ldrb	r2, [r7, #13]
 8003e28:	4909      	ldr	r1, [pc, #36]	; (8003e50 <UARTEx_SetNbDataToProcess+0x94>)
 8003e2a:	5c8a      	ldrb	r2, [r1, r2]
 8003e2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e30:	7b7a      	ldrb	r2, [r7, #13]
 8003e32:	4908      	ldr	r1, [pc, #32]	; (8003e54 <UARTEx_SetNbDataToProcess+0x98>)
 8003e34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e36:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	080086cc 	.word	0x080086cc
 8003e54:	080086d4 	.word	0x080086d4

08003e58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e6a:	2b84      	cmp	r3, #132	; 0x84
 8003e6c:	d005      	beq.n	8003e7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	3303      	adds	r3, #3
 8003e78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e8c:	f001 fcfa 	bl	8005884 <vTaskStartScheduler>
  
  return osOK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e98:	b087      	sub	sp, #28
 8003e9a:	af02      	add	r7, sp, #8
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685c      	ldr	r4, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eac:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ffcf 	bl	8003e58 <makeFreeRtosPriority>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	f107 030c 	add.w	r3, r7, #12
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	9200      	str	r2, [sp, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4632      	mov	r2, r6
 8003ec8:	4629      	mov	r1, r5
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f001 fae4 	bl	8005498 <xTaskCreate>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d001      	beq.n	8003eda <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003eda:	68fb      	ldr	r3, [r7, #12]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ee4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <osDelay+0x16>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	e000      	b.n	8003efc <osDelay+0x18>
 8003efa:	2301      	movs	r3, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f001 fc27 	bl	8005750 <vTaskDelay>
  
  return osOK;
 8003f02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f103 0208 	add.w	r2, r3, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f04f 32ff 	mov.w	r2, #4294967295
 8003f24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f103 0208 	add.w	r2, r3, #8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f103 0208 	add.w	r2, r3, #8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	601a      	str	r2, [r3, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b085      	sub	sp, #20
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d103      	bne.n	8003fce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e00c      	b.n	8003fe8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	e002      	b.n	8003fdc <vListInsert+0x2e>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d2f6      	bcs.n	8003fd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	601a      	str	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6892      	ldr	r2, [r2, #8]
 8004036:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6852      	ldr	r2, [r2, #4]
 8004040:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	429a      	cmp	r2, r3
 800404a:	d103      	bne.n	8004054 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	1e5a      	subs	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800409e:	f003 fa91 	bl	80075c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	68f9      	ldr	r1, [r7, #12]
 80040ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	441a      	add	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	3b01      	subs	r3, #1
 80040d0:	68f9      	ldr	r1, [r7, #12]
 80040d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	441a      	add	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	22ff      	movs	r2, #255	; 0xff
 80040e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	22ff      	movs	r2, #255	; 0xff
 80040ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d114      	bne.n	800411e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01a      	beq.n	8004132 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3310      	adds	r3, #16
 8004100:	4618      	mov	r0, r3
 8004102:	f001 fef9 	bl	8005ef8 <xTaskRemoveFromEventList>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d012      	beq.n	8004132 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <xQueueGenericReset+0xcc>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	e009      	b.n	8004132 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	3310      	adds	r3, #16
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fef2 	bl	8003f0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3324      	adds	r3, #36	; 0x24
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff feed 	bl	8003f0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004132:	f003 fa77 	bl	8007624 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004136:	2301      	movs	r3, #1
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	e000ed04 	.word	0xe000ed04

08004144 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	; 0x28
 8004148:	af02      	add	r7, sp, #8
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	4613      	mov	r3, r2
 8004150:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10a      	bne.n	800416e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415c:	f383 8811 	msr	BASEPRI, r3
 8004160:	f3bf 8f6f 	isb	sy
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	613b      	str	r3, [r7, #16]
}
 800416a:	bf00      	nop
 800416c:	e7fe      	b.n	800416c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	3350      	adds	r3, #80	; 0x50
 800417c:	4618      	mov	r0, r3
 800417e:	f003 fb43 	bl	8007808 <pvPortMalloc>
 8004182:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00d      	beq.n	80041a6 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	3350      	adds	r3, #80	; 0x50
 8004192:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004194:	79fa      	ldrb	r2, [r7, #7]
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	4613      	mov	r3, r2
 800419c:	697a      	ldr	r2, [r7, #20]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f805 	bl	80041b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041a6:	69bb      	ldr	r3, [r7, #24]
	}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3720      	adds	r7, #32
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d103      	bne.n	80041cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e002      	b.n	80041d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041de:	2101      	movs	r1, #1
 80041e0:	69b8      	ldr	r0, [r7, #24]
 80041e2:	f7ff ff47 	bl	8004074 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	78fa      	ldrb	r2, [r7, #3]
 80041ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80041ee:	bf00      	nop
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00e      	beq.n	8004222 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004216:	2300      	movs	r3, #0
 8004218:	2200      	movs	r2, #0
 800421a:	2100      	movs	r1, #0
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f81d 	bl	800425c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004222:	bf00      	nop
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800422a:	b580      	push	{r7, lr}
 800422c:	b086      	sub	sp, #24
 800422e:	af00      	add	r7, sp, #0
 8004230:	4603      	mov	r3, r0
 8004232:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004234:	2301      	movs	r3, #1
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	2300      	movs	r3, #0
 800423a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800423c:	79fb      	ldrb	r3, [r7, #7]
 800423e:	461a      	mov	r2, r3
 8004240:	6939      	ldr	r1, [r7, #16]
 8004242:	6978      	ldr	r0, [r7, #20]
 8004244:	f7ff ff7e 	bl	8004144 <xQueueGenericCreate>
 8004248:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7ff ffd3 	bl	80041f6 <prvInitialiseMutex>

		return xNewQueue;
 8004250:	68fb      	ldr	r3, [r7, #12]
	}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
	...

0800425c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08e      	sub	sp, #56	; 0x38
 8004260:	af00      	add	r7, sp, #0
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800426a:	2300      	movs	r3, #0
 800426c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <xQueueGenericSend+0x32>
	__asm volatile
 8004278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800427c:	f383 8811 	msr	BASEPRI, r3
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	f3bf 8f4f 	dsb	sy
 8004288:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800428a:	bf00      	nop
 800428c:	e7fe      	b.n	800428c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <xQueueGenericSend+0x40>
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <xQueueGenericSend+0x44>
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <xQueueGenericSend+0x46>
 80042a0:	2300      	movs	r3, #0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10a      	bne.n	80042bc <xQueueGenericSend+0x60>
	__asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d103      	bne.n	80042ca <xQueueGenericSend+0x6e>
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <xQueueGenericSend+0x72>
 80042ca:	2301      	movs	r3, #1
 80042cc:	e000      	b.n	80042d0 <xQueueGenericSend+0x74>
 80042ce:	2300      	movs	r3, #0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10a      	bne.n	80042ea <xQueueGenericSend+0x8e>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	623b      	str	r3, [r7, #32]
}
 80042e6:	bf00      	nop
 80042e8:	e7fe      	b.n	80042e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042ea:	f002 f8b1 	bl	8006450 <xTaskGetSchedulerState>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d102      	bne.n	80042fa <xQueueGenericSend+0x9e>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <xQueueGenericSend+0xa2>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <xQueueGenericSend+0xa4>
 80042fe:	2300      	movs	r3, #0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <xQueueGenericSend+0xbe>
	__asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	61fb      	str	r3, [r7, #28]
}
 8004316:	bf00      	nop
 8004318:	e7fe      	b.n	8004318 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800431a:	f003 f953 	bl	80075c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	429a      	cmp	r2, r3
 8004328:	d302      	bcc.n	8004330 <xQueueGenericSend+0xd4>
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d129      	bne.n	8004384 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004336:	f000 fbbb 	bl	8004ab0 <prvCopyDataToQueue>
 800433a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800433c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	d010      	beq.n	8004366 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	3324      	adds	r3, #36	; 0x24
 8004348:	4618      	mov	r0, r3
 800434a:	f001 fdd5 	bl	8005ef8 <xTaskRemoveFromEventList>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004354:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <xQueueGenericSend+0x1f8>)
 8004356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800435a:	601a      	str	r2, [r3, #0]
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	e00a      	b.n	800437c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800436c:	4b39      	ldr	r3, [pc, #228]	; (8004454 <xQueueGenericSend+0x1f8>)
 800436e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800437c:	f003 f952 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 8004380:	2301      	movs	r3, #1
 8004382:	e063      	b.n	800444c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800438a:	f003 f94b 	bl	8007624 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800438e:	2300      	movs	r3, #0
 8004390:	e05c      	b.n	800444c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004398:	f107 0314 	add.w	r3, r7, #20
 800439c:	4618      	mov	r0, r3
 800439e:	f001 fe33 	bl	8006008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043a6:	f003 f93d 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043aa:	f001 fac3 	bl	8005934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ae:	f003 f909 	bl	80075c4 <vPortEnterCritical>
 80043b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d103      	bne.n	80043c8 <xQueueGenericSend+0x16c>
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043ce:	b25b      	sxtb	r3, r3
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d103      	bne.n	80043de <xQueueGenericSend+0x182>
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80043de:	f003 f921 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043e2:	1d3a      	adds	r2, r7, #4
 80043e4:	f107 0314 	add.w	r3, r7, #20
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f001 fe22 	bl	8006034 <xTaskCheckForTimeOut>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d124      	bne.n	8004440 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f8:	f000 fc52 	bl	8004ca0 <prvIsQueueFull>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d018      	beq.n	8004434 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	3310      	adds	r3, #16
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f001 fd24 	bl	8005e58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004412:	f000 fbdd 	bl	8004bd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004416:	f001 fa9b 	bl	8005950 <xTaskResumeAll>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	f47f af7c 	bne.w	800431a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004422:	4b0c      	ldr	r3, [pc, #48]	; (8004454 <xQueueGenericSend+0x1f8>)
 8004424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	e772      	b.n	800431a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004434:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004436:	f000 fbcb 	bl	8004bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800443a:	f001 fa89 	bl	8005950 <xTaskResumeAll>
 800443e:	e76c      	b.n	800431a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004442:	f000 fbc5 	bl	8004bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004446:	f001 fa83 	bl	8005950 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800444a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800444c:	4618      	mov	r0, r3
 800444e:	3738      	adds	r7, #56	; 0x38
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b090      	sub	sp, #64	; 0x40
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800446a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10a      	bne.n	8004486 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004482:	bf00      	nop
 8004484:	e7fe      	b.n	8004484 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <xQueueGenericSendFromISR+0x3c>
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <xQueueGenericSendFromISR+0x40>
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <xQueueGenericSendFromISR+0x42>
 8004498:	2300      	movs	r3, #0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d103      	bne.n	80044c2 <xQueueGenericSendFromISR+0x6a>
 80044ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <xQueueGenericSendFromISR+0x6e>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <xQueueGenericSendFromISR+0x70>
 80044c6:	2300      	movs	r3, #0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	623b      	str	r3, [r7, #32]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044e2:	f003 f951 	bl	8007788 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80044e6:	f3ef 8211 	mrs	r2, BASEPRI
 80044ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ee:	f383 8811 	msr	BASEPRI, r3
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	f3bf 8f4f 	dsb	sy
 80044fa:	61fa      	str	r2, [r7, #28]
 80044fc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044fe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004500:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450a:	429a      	cmp	r2, r3
 800450c:	d302      	bcc.n	8004514 <xQueueGenericSendFromISR+0xbc>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d12f      	bne.n	8004574 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004516:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800451a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800452a:	f000 fac1 	bl	8004ab0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800452e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d112      	bne.n	800455e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	2b00      	cmp	r3, #0
 800453e:	d016      	beq.n	800456e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	3324      	adds	r3, #36	; 0x24
 8004544:	4618      	mov	r0, r3
 8004546:	f001 fcd7 	bl	8005ef8 <xTaskRemoveFromEventList>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00e      	beq.n	800456e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	601a      	str	r2, [r3, #0]
 800455c:	e007      	b.n	800456e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800455e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004562:	3301      	adds	r3, #1
 8004564:	b2db      	uxtb	r3, r3
 8004566:	b25a      	sxtb	r2, r3
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800456e:	2301      	movs	r3, #1
 8004570:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004572:	e001      	b.n	8004578 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004574:	2300      	movs	r3, #0
 8004576:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800457a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004582:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004586:	4618      	mov	r0, r3
 8004588:	3740      	adds	r7, #64	; 0x40
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b08e      	sub	sp, #56	; 0x38
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
 8004596:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10a      	bne.n	80045b8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80045a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	623b      	str	r3, [r7, #32]
}
 80045b4:	bf00      	nop
 80045b6:	e7fe      	b.n	80045b6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80045c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c4:	f383 8811 	msr	BASEPRI, r3
 80045c8:	f3bf 8f6f 	isb	sy
 80045cc:	f3bf 8f4f 	dsb	sy
 80045d0:	61fb      	str	r3, [r7, #28]
}
 80045d2:	bf00      	nop
 80045d4:	e7fe      	b.n	80045d4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d103      	bne.n	80045e6 <xQueueGiveFromISR+0x58>
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <xQueueGiveFromISR+0x5c>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <xQueueGiveFromISR+0x5e>
 80045ea:	2300      	movs	r3, #0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueGiveFromISR+0x78>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	61bb      	str	r3, [r7, #24]
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004606:	f003 f8bf 	bl	8007788 <vPortValidateInterruptPriority>
	__asm volatile
 800460a:	f3ef 8211 	mrs	r2, BASEPRI
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	617a      	str	r2, [r7, #20]
 8004620:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004622:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800462c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004630:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004632:	429a      	cmp	r2, r3
 8004634:	d22b      	bcs.n	800468e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004638:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800463c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004646:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004648:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800464c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004650:	d112      	bne.n	8004678 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	2b00      	cmp	r3, #0
 8004658:	d016      	beq.n	8004688 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	3324      	adds	r3, #36	; 0x24
 800465e:	4618      	mov	r0, r3
 8004660:	f001 fc4a 	bl	8005ef8 <xTaskRemoveFromEventList>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00e      	beq.n	8004688 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00b      	beq.n	8004688 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	e007      	b.n	8004688 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800467c:	3301      	adds	r3, #1
 800467e:	b2db      	uxtb	r3, r3
 8004680:	b25a      	sxtb	r2, r3
 8004682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004688:	2301      	movs	r3, #1
 800468a:	637b      	str	r3, [r7, #52]	; 0x34
 800468c:	e001      	b.n	8004692 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800468e:	2300      	movs	r3, #0
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f383 8811 	msr	BASEPRI, r3
}
 800469c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800469e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3738      	adds	r7, #56	; 0x38
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	; 0x30
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <xQueueReceive+0x30>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	623b      	str	r3, [r7, #32]
}
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d103      	bne.n	80046e6 <xQueueReceive+0x3e>
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <xQueueReceive+0x42>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <xQueueReceive+0x44>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <xQueueReceive+0x5e>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	61fb      	str	r3, [r7, #28]
}
 8004702:	bf00      	nop
 8004704:	e7fe      	b.n	8004704 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004706:	f001 fea3 	bl	8006450 <xTaskGetSchedulerState>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d102      	bne.n	8004716 <xQueueReceive+0x6e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <xQueueReceive+0x72>
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <xQueueReceive+0x74>
 800471a:	2300      	movs	r3, #0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <xQueueReceive+0x8e>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	61bb      	str	r3, [r7, #24]
}
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004736:	f002 ff45 	bl	80075c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	2b00      	cmp	r3, #0
 8004744:	d01f      	beq.n	8004786 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004746:	68b9      	ldr	r1, [r7, #8]
 8004748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800474a:	f000 fa1b 	bl	8004b84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	1e5a      	subs	r2, r3, #1
 8004752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004754:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00f      	beq.n	800477e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	3310      	adds	r3, #16
 8004762:	4618      	mov	r0, r3
 8004764:	f001 fbc8 	bl	8005ef8 <xTaskRemoveFromEventList>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800476e:	4b3d      	ldr	r3, [pc, #244]	; (8004864 <xQueueReceive+0x1bc>)
 8004770:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004774:	601a      	str	r2, [r3, #0]
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800477e:	f002 ff51 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 8004782:	2301      	movs	r3, #1
 8004784:	e069      	b.n	800485a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d103      	bne.n	8004794 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800478c:	f002 ff4a 	bl	8007624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004790:	2300      	movs	r3, #0
 8004792:	e062      	b.n	800485a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800479a:	f107 0310 	add.w	r3, r7, #16
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 fc32 	bl	8006008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047a4:	2301      	movs	r3, #1
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047a8:	f002 ff3c 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047ac:	f001 f8c2 	bl	8005934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047b0:	f002 ff08 	bl	80075c4 <vPortEnterCritical>
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047ba:	b25b      	sxtb	r3, r3
 80047bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c0:	d103      	bne.n	80047ca <xQueueReceive+0x122>
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047d0:	b25b      	sxtb	r3, r3
 80047d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d6:	d103      	bne.n	80047e0 <xQueueReceive+0x138>
 80047d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e0:	f002 ff20 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047e4:	1d3a      	adds	r2, r7, #4
 80047e6:	f107 0310 	add.w	r3, r7, #16
 80047ea:	4611      	mov	r1, r2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f001 fc21 	bl	8006034 <xTaskCheckForTimeOut>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d123      	bne.n	8004840 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047fa:	f000 fa3b 	bl	8004c74 <prvIsQueueEmpty>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d017      	beq.n	8004834 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004806:	3324      	adds	r3, #36	; 0x24
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f001 fb23 	bl	8005e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004812:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004814:	f000 f9dc 	bl	8004bd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004818:	f001 f89a 	bl	8005950 <xTaskResumeAll>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d189      	bne.n	8004736 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <xQueueReceive+0x1bc>)
 8004824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004828:	601a      	str	r2, [r3, #0]
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	e780      	b.n	8004736 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004834:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004836:	f000 f9cb 	bl	8004bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800483a:	f001 f889 	bl	8005950 <xTaskResumeAll>
 800483e:	e77a      	b.n	8004736 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004842:	f000 f9c5 	bl	8004bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004846:	f001 f883 	bl	8005950 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800484a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800484c:	f000 fa12 	bl	8004c74 <prvIsQueueEmpty>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	f43f af6f 	beq.w	8004736 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004858:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800485a:	4618      	mov	r0, r3
 800485c:	3730      	adds	r7, #48	; 0x30
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	; 0x38
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004872:	2300      	movs	r3, #0
 8004874:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800487a:	2300      	movs	r3, #0
 800487c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800487e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d10a      	bne.n	800489a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	623b      	str	r3, [r7, #32]
}
 8004896:	bf00      	nop
 8004898:	e7fe      	b.n	8004898 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800489a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	61fb      	str	r3, [r7, #28]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048b8:	f001 fdca 	bl	8006450 <xTaskGetSchedulerState>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <xQueueSemaphoreTake+0x60>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <xQueueSemaphoreTake+0x64>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <xQueueSemaphoreTake+0x66>
 80048cc:	2300      	movs	r3, #0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10a      	bne.n	80048e8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	61bb      	str	r3, [r7, #24]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048e8:	f002 fe6c 	bl	80075c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80048ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80048f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d024      	beq.n	8004942 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80048f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d104      	bne.n	8004912 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004908:	f002 f806 	bl	8006918 <pvTaskIncrementMutexHeldCount>
 800490c:	4602      	mov	r2, r0
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00f      	beq.n	800493a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800491a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491c:	3310      	adds	r3, #16
 800491e:	4618      	mov	r0, r3
 8004920:	f001 faea 	bl	8005ef8 <xTaskRemoveFromEventList>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800492a:	4b54      	ldr	r3, [pc, #336]	; (8004a7c <xQueueSemaphoreTake+0x214>)
 800492c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	f3bf 8f4f 	dsb	sy
 8004936:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800493a:	f002 fe73 	bl	8007624 <vPortExitCritical>
				return pdPASS;
 800493e:	2301      	movs	r3, #1
 8004940:	e097      	b.n	8004a72 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d111      	bne.n	800496c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	617b      	str	r3, [r7, #20]
}
 8004960:	bf00      	nop
 8004962:	e7fe      	b.n	8004962 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004964:	f002 fe5e 	bl	8007624 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004968:	2300      	movs	r3, #0
 800496a:	e082      	b.n	8004a72 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800496c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004972:	f107 030c 	add.w	r3, r7, #12
 8004976:	4618      	mov	r0, r3
 8004978:	f001 fb46 	bl	8006008 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800497c:	2301      	movs	r3, #1
 800497e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004980:	f002 fe50 	bl	8007624 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004984:	f000 ffd6 	bl	8005934 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004988:	f002 fe1c 	bl	80075c4 <vPortEnterCritical>
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004992:	b25b      	sxtb	r3, r3
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d103      	bne.n	80049a2 <xQueueSemaphoreTake+0x13a>
 800499a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a8:	b25b      	sxtb	r3, r3
 80049aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ae:	d103      	bne.n	80049b8 <xQueueSemaphoreTake+0x150>
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049b8:	f002 fe34 	bl	8007624 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049bc:	463a      	mov	r2, r7
 80049be:	f107 030c 	add.w	r3, r7, #12
 80049c2:	4611      	mov	r1, r2
 80049c4:	4618      	mov	r0, r3
 80049c6:	f001 fb35 	bl	8006034 <xTaskCheckForTimeOut>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d132      	bne.n	8004a36 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049d2:	f000 f94f 	bl	8004c74 <prvIsQueueEmpty>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d026      	beq.n	8004a2a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d109      	bne.n	80049f8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80049e4:	f002 fdee 	bl	80075c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f001 fd4d 	bl	800648c <xTaskPriorityInherit>
 80049f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80049f4:	f002 fe16 	bl	8007624 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	3324      	adds	r3, #36	; 0x24
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	4611      	mov	r1, r2
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 fa29 	bl	8005e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a08:	f000 f8e2 	bl	8004bd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a0c:	f000 ffa0 	bl	8005950 <xTaskResumeAll>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f47f af68 	bne.w	80048e8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004a18:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <xQueueSemaphoreTake+0x214>)
 8004a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	e75e      	b.n	80048e8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004a2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a2c:	f000 f8d0 	bl	8004bd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a30:	f000 ff8e 	bl	8005950 <xTaskResumeAll>
 8004a34:	e758      	b.n	80048e8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004a36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a38:	f000 f8ca 	bl	8004bd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a3c:	f000 ff88 	bl	8005950 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a42:	f000 f917 	bl	8004c74 <prvIsQueueEmpty>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f43f af4d 	beq.w	80048e8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00d      	beq.n	8004a70 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004a54:	f002 fdb6 	bl	80075c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004a58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a5a:	f000 f811 	bl	8004a80 <prvGetDisinheritPriorityAfterTimeout>
 8004a5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 fe0c 	bl	8006684 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004a6c:	f002 fdda 	bl	8007624 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3738      	adds	r7, #56	; 0x38
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d006      	beq.n	8004a9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f1c3 031f 	rsb	r3, r3, #31
 8004a9a:	60fb      	str	r3, [r7, #12]
 8004a9c:	e001      	b.n	8004aa2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
	}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004abc:	2300      	movs	r3, #0
 8004abe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10d      	bne.n	8004aea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d14d      	bne.n	8004b72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f001 fd4c 	bl	8006578 <xTaskPriorityDisinherit>
 8004ae0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	609a      	str	r2, [r3, #8]
 8004ae8:	e043      	b.n	8004b72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d119      	bne.n	8004b24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6858      	ldr	r0, [r3, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	461a      	mov	r2, r3
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	f003 f920 	bl	8007d40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b08:	441a      	add	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d32b      	bcc.n	8004b72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	605a      	str	r2, [r3, #4]
 8004b22:	e026      	b.n	8004b72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68d8      	ldr	r0, [r3, #12]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	68b9      	ldr	r1, [r7, #8]
 8004b30:	f003 f906 	bl	8007d40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3c:	425b      	negs	r3, r3
 8004b3e:	441a      	add	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d207      	bcs.n	8004b60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	425b      	negs	r3, r3
 8004b5a:	441a      	add	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d105      	bne.n	8004b72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b7a:	697b      	ldr	r3, [r7, #20]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d018      	beq.n	8004bc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	441a      	add	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d303      	bcc.n	8004bb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68d9      	ldr	r1, [r3, #12]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	6838      	ldr	r0, [r7, #0]
 8004bc4:	f003 f8bc 	bl	8007d40 <memcpy>
	}
}
 8004bc8:	bf00      	nop
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bd8:	f002 fcf4 	bl	80075c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004be2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004be4:	e011      	b.n	8004c0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d012      	beq.n	8004c14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	3324      	adds	r3, #36	; 0x24
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f001 f980 	bl	8005ef8 <xTaskRemoveFromEventList>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004bfe:	f001 fa7b 	bl	80060f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c02:	7bfb      	ldrb	r3, [r7, #15]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	dce9      	bgt.n	8004be6 <prvUnlockQueue+0x16>
 8004c12:	e000      	b.n	8004c16 <prvUnlockQueue+0x46>
					break;
 8004c14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	22ff      	movs	r2, #255	; 0xff
 8004c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c1e:	f002 fd01 	bl	8007624 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c22:	f002 fccf 	bl	80075c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c2e:	e011      	b.n	8004c54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d012      	beq.n	8004c5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3310      	adds	r3, #16
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 f95b 	bl	8005ef8 <xTaskRemoveFromEventList>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d001      	beq.n	8004c4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c48:	f001 fa56 	bl	80060f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c4c:	7bbb      	ldrb	r3, [r7, #14]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	dce9      	bgt.n	8004c30 <prvUnlockQueue+0x60>
 8004c5c:	e000      	b.n	8004c60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	22ff      	movs	r2, #255	; 0xff
 8004c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c68:	f002 fcdc 	bl	8007624 <vPortExitCritical>
}
 8004c6c:	bf00      	nop
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c7c:	f002 fca2 	bl	80075c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e001      	b.n	8004c92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c92:	f002 fcc7 	bl	8007624 <vPortExitCritical>

	return xReturn;
 8004c96:	68fb      	ldr	r3, [r7, #12]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ca8:	f002 fc8c 	bl	80075c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d102      	bne.n	8004cbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e001      	b.n	8004cc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cc2:	f002 fcaf 	bl	8007624 <vPortExitCritical>

	return xReturn;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60fb      	str	r3, [r7, #12]
 8004cde:	e014      	b.n	8004d0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ce0:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <vQueueAddToRegistry+0x50>)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10b      	bne.n	8004d04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004cec:	490c      	ldr	r1, [pc, #48]	; (8004d20 <vQueueAddToRegistry+0x50>)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cf6:	4a0a      	ldr	r2, [pc, #40]	; (8004d20 <vQueueAddToRegistry+0x50>)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4413      	add	r3, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d02:	e006      	b.n	8004d12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	3301      	adds	r3, #1
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2b07      	cmp	r3, #7
 8004d0e:	d9e7      	bls.n	8004ce0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d10:	bf00      	nop
 8004d12:	bf00      	nop
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000130 	.word	0x20000130

08004d24 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b086      	sub	sp, #24
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d34:	f002 fc46 	bl	80075c4 <vPortEnterCritical>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d3e:	b25b      	sxtb	r3, r3
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d44:	d103      	bne.n	8004d4e <vQueueWaitForMessageRestricted+0x2a>
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	d103      	bne.n	8004d64 <vQueueWaitForMessageRestricted+0x40>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d64:	f002 fc5e 	bl	8007624 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d106      	bne.n	8004d7e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	3324      	adds	r3, #36	; 0x24
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f001 f891 	bl	8005ea0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d7e:	6978      	ldr	r0, [r7, #20]
 8004d80:	f7ff ff26 	bl	8004bd0 <prvUnlockQueue>
	}
 8004d84:	bf00      	nop
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b08c      	sub	sp, #48	; 0x30
 8004d90:	af02      	add	r7, sp, #8
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d110      	bne.n	8004dc0 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d81b      	bhi.n	8004de2 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	f383 8811 	msr	BASEPRI, r3
 8004db2:	f3bf 8f6f 	isb	sy
 8004db6:	f3bf 8f4f 	dsb	sy
 8004dba:	61fb      	str	r3, [r7, #28]
}
 8004dbc:	bf00      	nop
 8004dbe:	e7fe      	b.n	8004dbe <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10a      	bne.n	8004de2 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	61bb      	str	r3, [r7, #24]
}
 8004dde:	bf00      	nop
 8004de0:	e7fe      	b.n	8004de0 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d90a      	bls.n	8004e00 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8004dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dee:	f383 8811 	msr	BASEPRI, r3
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	f3bf 8f4f 	dsb	sy
 8004dfa:	617b      	str	r3, [r7, #20]
}
 8004dfc:	bf00      	nop
 8004dfe:	e7fe      	b.n	8004dfe <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8004e06:	2301      	movs	r3, #1
 8004e08:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3324      	adds	r3, #36	; 0x24
 8004e14:	4618      	mov	r0, r3
 8004e16:	f002 fcf7 	bl	8007808 <pvPortMalloc>
 8004e1a:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8004e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	6a38      	ldr	r0, [r7, #32]
 8004e34:	f000 fafd 	bl	8005432 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8004e38:	6a3b      	ldr	r3, [r7, #32]
	}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3728      	adds	r7, #40	; 0x28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8004e42:	b480      	push	{r7}
 8004e44:	b087      	sub	sp, #28
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	60fb      	str	r3, [r7, #12]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4413      	add	r3, r2
 8004e74:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d304      	bcc.n	8004e9a <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8004e9a:	697b      	ldr	r3, [r7, #20]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b090      	sub	sp, #64	; 0x40
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <xStreamBufferSend+0x36>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <xStreamBufferSend+0x52>
	__asm volatile
 8004ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee8:	f383 8811 	msr	BASEPRI, r3
 8004eec:	f3bf 8f6f 	isb	sy
 8004ef0:	f3bf 8f4f 	dsb	sy
 8004ef4:	623b      	str	r3, [r7, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	e7fe      	b.n	8004ef8 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8004efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004efc:	7f1b      	ldrb	r3, [r3, #28]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d011      	beq.n	8004f2a <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8004f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f08:	3304      	adds	r3, #4
 8004f0a:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8004f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d80a      	bhi.n	8004f2a <xStreamBufferSend+0x82>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	61fb      	str	r3, [r7, #28]
}
 8004f26:	bf00      	nop
 8004f28:	e7fe      	b.n	8004f28 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d03e      	beq.n	8004fae <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8004f30:	f107 0310 	add.w	r3, r7, #16
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 f841 	bl	8005fbc <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8004f3a:	f002 fb43 	bl	80075c4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004f3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f40:	f7ff ff7f 	bl	8004e42 <xStreamBufferSpacesAvailable>
 8004f44:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8004f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d217      	bcs.n	8004f7e <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8004f4e:	2000      	movs	r0, #0
 8004f50:	f001 fe14 	bl	8006b7c <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8004f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <xStreamBufferSend+0xca>
	__asm volatile
 8004f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f60:	f383 8811 	msr	BASEPRI, r3
 8004f64:	f3bf 8f6f 	isb	sy
 8004f68:	f3bf 8f4f 	dsb	sy
 8004f6c:	61bb      	str	r3, [r7, #24]
}
 8004f6e:	bf00      	nop
 8004f70:	e7fe      	b.n	8004f70 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8004f72:	f001 fa5d 	bl	8006430 <xTaskGetCurrentTaskHandle>
 8004f76:	4602      	mov	r2, r0
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	615a      	str	r2, [r3, #20]
 8004f7c:	e002      	b.n	8004f84 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8004f7e:	f002 fb51 	bl	8007624 <vPortExitCritical>
					break;
 8004f82:	e014      	b.n	8004fae <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8004f84:	f002 fb4e 	bl	8007624 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f001 fcd6 	bl	8006940 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8004f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f96:	2200      	movs	r2, #0
 8004f98:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8004f9a:	463a      	mov	r2, r7
 8004f9c:	f107 0310 	add.w	r3, r7, #16
 8004fa0:	4611      	mov	r1, r2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 f846 	bl	8006034 <xTaskCheckForTimeOut>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0c5      	beq.n	8004f3a <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8004fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d103      	bne.n	8004fbc <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8004fb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fb6:	f7ff ff44 	bl	8004e42 <xStreamBufferSpacesAvailable>
 8004fba:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fc8:	f000 f823 	bl	8005012 <prvWriteMessageToBuffer>
 8004fcc:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8004fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d019      	beq.n	8005008 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8004fd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004fd6:	f000 fa0c 	bl	80053f2 <prvBytesInBuffer>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d311      	bcc.n	8005008 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8004fe4:	f000 fca6 	bl	8005934 <vTaskSuspendAll>
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d009      	beq.n	8005004 <xStreamBufferSend+0x15c>
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	6918      	ldr	r0, [r3, #16]
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	f001 fd01 	bl	8006a00 <xTaskGenericNotify>
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	2200      	movs	r2, #0
 8005002:	611a      	str	r2, [r3, #16]
 8005004:	f000 fca4 	bl	8005950 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800500a:	4618      	mov	r0, r3
 800500c:	3738      	adds	r7, #56	; 0x38
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
 800501e:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d102      	bne.n	800502c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8005026:	2300      	movs	r3, #0
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	e01d      	b.n	8005068 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	7f1b      	ldrb	r3, [r3, #28]
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d108      	bne.n	800504a <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8005038:	2301      	movs	r3, #1
 800503a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	4293      	cmp	r3, r2
 8005042:	bf28      	it	cs
 8005044:	4613      	movcs	r3, r2
 8005046:	607b      	str	r3, [r7, #4]
 8005048:	e00e      	b.n	8005068 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	429a      	cmp	r2, r3
 8005050:	d308      	bcc.n	8005064 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8005052:	2301      	movs	r3, #1
 8005054:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8005056:	1d3b      	adds	r3, r7, #4
 8005058:	2204      	movs	r2, #4
 800505a:	4619      	mov	r1, r3
 800505c:	68f8      	ldr	r0, [r7, #12]
 800505e:	f000 f8dc 	bl	800521a <prvWriteBytesToBuffer>
 8005062:	e001      	b.n	8005068 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8005064:	2300      	movs	r3, #0
 8005066:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d007      	beq.n	800507e <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	461a      	mov	r2, r3
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f8d0 	bl	800521a <prvWriteBytesToBuffer>
 800507a:	6138      	str	r0, [r7, #16]
 800507c:	e001      	b.n	8005082 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8005082:	693b      	ldr	r3, [r7, #16]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b08e      	sub	sp, #56	; 0x38
 8005090:	af02      	add	r7, sp, #8
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800509e:	2300      	movs	r3, #0
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10a      	bne.n	80050be <xStreamBufferReceive+0x32>
	__asm volatile
 80050a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ac:	f383 8811 	msr	BASEPRI, r3
 80050b0:	f3bf 8f6f 	isb	sy
 80050b4:	f3bf 8f4f 	dsb	sy
 80050b8:	61fb      	str	r3, [r7, #28]
}
 80050ba:	bf00      	nop
 80050bc:	e7fe      	b.n	80050bc <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <xStreamBufferReceive+0x4e>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	61bb      	str	r3, [r7, #24]
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	7f1b      	ldrb	r3, [r3, #28]
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80050e6:	2304      	movs	r3, #4
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
 80050ea:	e001      	b.n	80050f0 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d034      	beq.n	8005160 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80050f6:	f002 fa65 	bl	80075c4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80050fa:	6a38      	ldr	r0, [r7, #32]
 80050fc:	f000 f979 	bl	80053f2 <prvBytesInBuffer>
 8005100:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8005102:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	429a      	cmp	r2, r3
 8005108:	d816      	bhi.n	8005138 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 800510a:	2000      	movs	r0, #0
 800510c:	f001 fd36 	bl	8006b7c <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <xStreamBufferReceive+0xa2>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	617b      	str	r3, [r7, #20]
}
 800512a:	bf00      	nop
 800512c:	e7fe      	b.n	800512c <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800512e:	f001 f97f 	bl	8006430 <xTaskGetCurrentTaskHandle>
 8005132:	4602      	mov	r2, r0
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005138:	f002 fa74 	bl	8007624 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800513c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005140:	429a      	cmp	r2, r3
 8005142:	d811      	bhi.n	8005168 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	2200      	movs	r2, #0
 8005148:	2100      	movs	r1, #0
 800514a:	2000      	movs	r0, #0
 800514c:	f001 fbf8 	bl	8006940 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	2200      	movs	r2, #0
 8005154:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8005156:	6a38      	ldr	r0, [r7, #32]
 8005158:	f000 f94b 	bl	80053f2 <prvBytesInBuffer>
 800515c:	62b8      	str	r0, [r7, #40]	; 0x28
 800515e:	e003      	b.n	8005168 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8005160:	6a38      	ldr	r0, [r7, #32]
 8005162:	f000 f946 	bl	80053f2 <prvBytesInBuffer>
 8005166:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8005168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	429a      	cmp	r2, r3
 800516e:	d91d      	bls.n	80051ac <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8005170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	68b9      	ldr	r1, [r7, #8]
 800517a:	6a38      	ldr	r0, [r7, #32]
 800517c:	f000 f81b 	bl	80051b6 <prvReadMessageFromBuffer>
 8005180:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d011      	beq.n	80051ac <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8005188:	f000 fbd4 	bl	8005934 <vTaskSuspendAll>
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <xStreamBufferReceive+0x11c>
 8005194:	6a3b      	ldr	r3, [r7, #32]
 8005196:	6958      	ldr	r0, [r3, #20]
 8005198:	2300      	movs	r3, #0
 800519a:	2200      	movs	r2, #0
 800519c:	2100      	movs	r1, #0
 800519e:	f001 fc2f 	bl	8006a00 <xTaskGenericNotify>
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	2200      	movs	r2, #0
 80051a6:	615a      	str	r2, [r3, #20]
 80051a8:	f000 fbd2 	bl	8005950 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3730      	adds	r7, #48	; 0x30
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b088      	sub	sp, #32
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d019      	beq.n	80051fe <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80051d0:	f107 0110 	add.w	r1, r7, #16
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f000 f890 	bl	80052fe <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d907      	bls.n	8005202 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80051f8:	2300      	movs	r3, #0
 80051fa:	61fb      	str	r3, [r7, #28]
 80051fc:	e001      	b.n	8005202 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	69fa      	ldr	r2, [r7, #28]
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 f878 	bl	80052fe <prvReadBytesFromBuffer>
 800520e:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8005210:	697b      	ldr	r3, [r7, #20]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3720      	adds	r7, #32
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b08a      	sub	sp, #40	; 0x28
 800521e:	af00      	add	r7, sp, #0
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d10a      	bne.n	8005242 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 800522c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005230:	f383 8811 	msr	BASEPRI, r3
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	61fb      	str	r3, [r7, #28]
}
 800523e:	bf00      	nop
 8005240:	e7fe      	b.n	8005240 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	689a      	ldr	r2, [r3, #8]
 800524c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	4293      	cmp	r3, r2
 8005254:	bf28      	it	cs
 8005256:	4613      	movcs	r3, r2
 8005258:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800525a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525c:	6a3b      	ldr	r3, [r7, #32]
 800525e:	441a      	add	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	429a      	cmp	r2, r3
 8005266:	d90a      	bls.n	800527e <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	61bb      	str	r3, [r7, #24]
}
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	4413      	add	r3, r2
 8005286:	6a3a      	ldr	r2, [r7, #32]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	4618      	mov	r0, r3
 800528c:	f002 fd58 	bl	8007d40 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	429a      	cmp	r2, r3
 8005296:	d91c      	bls.n	80052d2 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	1ad2      	subs	r2, r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d90a      	bls.n	80052bc <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	617b      	str	r3, [r7, #20]
}
 80052b8:	bf00      	nop
 80052ba:	e7fe      	b.n	80052ba <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6998      	ldr	r0, [r3, #24]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	18d1      	adds	r1, r2, r3
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	461a      	mov	r2, r3
 80052ce:	f002 fd37 	bl	8007d40 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80052d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4413      	add	r3, r2
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e0:	429a      	cmp	r2, r3
 80052e2:	d304      	bcc.n	80052ee <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f2:	605a      	str	r2, [r3, #4]

	return xCount;
 80052f4:	687b      	ldr	r3, [r7, #4]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3728      	adds	r7, #40	; 0x28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80052fe:	b580      	push	{r7, lr}
 8005300:	b08a      	sub	sp, #40	; 0x28
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
 800530a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	4293      	cmp	r3, r2
 8005312:	bf28      	it	cs
 8005314:	4613      	movcs	r3, r2
 8005316:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d064      	beq.n	80053e8 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	6a3a      	ldr	r2, [r7, #32]
 800532e:	4293      	cmp	r3, r2
 8005330:	bf28      	it	cs
 8005332:	4613      	movcs	r3, r2
 8005334:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8005336:	69fa      	ldr	r2, [r7, #28]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	429a      	cmp	r2, r3
 800533c:	d90a      	bls.n	8005354 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	61bb      	str	r3, [r7, #24]
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8005354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	441a      	add	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	d90a      	bls.n	8005378 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	617b      	str	r3, [r7, #20]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	699a      	ldr	r2, [r3, #24]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	4413      	add	r3, r2
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	4619      	mov	r1, r3
 8005384:	68b8      	ldr	r0, [r7, #8]
 8005386:	f002 fcdb 	bl	8007d40 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 800538a:	6a3a      	ldr	r2, [r7, #32]
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	429a      	cmp	r2, r3
 8005390:	d919      	bls.n	80053c6 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8005392:	6a3a      	ldr	r2, [r7, #32]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	429a      	cmp	r2, r3
 8005398:	d90a      	bls.n	80053b0 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	613b      	str	r3, [r7, #16]
}
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	18d0      	adds	r0, r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6999      	ldr	r1, [r3, #24]
 80053ba:	6a3a      	ldr	r2, [r7, #32]
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	f002 fcbd 	bl	8007d40 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80053c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	4413      	add	r3, r2
 80053cc:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d304      	bcc.n	80053e2 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e6:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80053e8:	6a3b      	ldr	r3, [r7, #32]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3728      	adds	r7, #40	; 0x28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4413      	add	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	429a      	cmp	r2, r3
 8005418:	d304      	bcc.n	8005424 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8005424:	68fb      	ldr	r3, [r7, #12]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr

08005432 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b086      	sub	sp, #24
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
 800543e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8005440:	2355      	movs	r3, #85	; 0x55
 8005442:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	6979      	ldr	r1, [r7, #20]
 8005448:	68b8      	ldr	r0, [r7, #8]
 800544a:	f002 fbe7 	bl	8007c1c <memset>
 800544e:	4602      	mov	r2, r0
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4293      	cmp	r3, r2
 8005454:	d00a      	beq.n	800546c <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8005456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	613b      	str	r3, [r7, #16]
}
 8005468:	bf00      	nop
 800546a:	e7fe      	b.n	800546a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800546c:	2224      	movs	r2, #36	; 0x24
 800546e:	2100      	movs	r1, #0
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f002 fbd3 	bl	8007c1c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800548e:	771a      	strb	r2, [r3, #28]
}
 8005490:	bf00      	nop
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08c      	sub	sp, #48	; 0x30
 800549c:	af04      	add	r7, sp, #16
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	603b      	str	r3, [r7, #0]
 80054a4:	4613      	mov	r3, r2
 80054a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054a8:	88fb      	ldrh	r3, [r7, #6]
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f002 f9ab 	bl	8007808 <pvPortMalloc>
 80054b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00e      	beq.n	80054d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054ba:	20b0      	movs	r0, #176	; 0xb0
 80054bc:	f002 f9a4 	bl	8007808 <pvPortMalloc>
 80054c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	631a      	str	r2, [r3, #48]	; 0x30
 80054ce:	e005      	b.n	80054dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80054d0:	6978      	ldr	r0, [r7, #20]
 80054d2:	f002 fa65 	bl	80079a0 <vPortFree>
 80054d6:	e001      	b.n	80054dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d013      	beq.n	800550a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	2300      	movs	r3, #0
 80054e6:	9303      	str	r3, [sp, #12]
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	9302      	str	r3, [sp, #8]
 80054ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f80f 	bl	800551c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054fe:	69f8      	ldr	r0, [r7, #28]
 8005500:	f000 f8b8 	bl	8005674 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005504:	2301      	movs	r3, #1
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	e002      	b.n	8005510 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800550a:	f04f 33ff 	mov.w	r3, #4294967295
 800550e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005510:	69bb      	ldr	r3, [r7, #24]
	}
 8005512:	4618      	mov	r0, r3
 8005514:	3720      	adds	r7, #32
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b088      	sub	sp, #32
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	461a      	mov	r2, r3
 8005534:	21a5      	movs	r1, #165	; 0xa5
 8005536:	f002 fb71 	bl	8007c1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005544:	3b01      	subs	r3, #1
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f023 0307 	bic.w	r3, r3, #7
 8005552:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <prvInitialiseNewTask+0x58>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	617b      	str	r3, [r7, #20]
}
 8005570:	bf00      	nop
 8005572:	e7fe      	b.n	8005572 <prvInitialiseNewTask+0x56>

		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
		{
			/* Also record the stack's high address, which may assist
			debugging. */
			pxNewTCB->pxEndOfStack = pxTopOfStack;
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01f      	beq.n	80055c0 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005580:	2300      	movs	r3, #0
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	e012      	b.n	80055ac <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	7819      	ldrb	r1, [r3, #0]
 800558e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	4413      	add	r3, r2
 8005594:	3334      	adds	r3, #52	; 0x34
 8005596:	460a      	mov	r2, r1
 8005598:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	4413      	add	r3, r2
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d006      	beq.n	80055b4 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	3301      	adds	r3, #1
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	2b0f      	cmp	r3, #15
 80055b0:	d9e9      	bls.n	8005586 <prvInitialiseNewTask+0x6a>
 80055b2:	e000      	b.n	80055b6 <prvInitialiseNewTask+0x9a>
			{
				break;
 80055b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	2200      	movs	r2, #0
 80055ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055be:	e003      	b.n	80055c8 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ca:	2b1e      	cmp	r3, #30
 80055cc:	d901      	bls.n	80055d2 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055ce:	231e      	movs	r3, #30
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055dc:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	2200      	movs	r2, #0
 80055e2:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e6:	3304      	adds	r3, #4
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7fe fcaf 	bl	8003f4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	3318      	adds	r3, #24
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7fe fcaa 	bl	8003f4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	f1c3 021f 	rsb	r2, r3, #31
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800560c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	2200      	movs	r2, #0
 8005612:	659a      	str	r2, [r3, #88]	; 0x58
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	2200      	movs	r2, #0
 8005618:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800561c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561e:	2200      	movs	r2, #0
 8005620:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005626:	335c      	adds	r3, #92	; 0x5c
 8005628:	224c      	movs	r2, #76	; 0x4c
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f002 faf5 	bl	8007c1c <memset>
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	4a0c      	ldr	r2, [pc, #48]	; (8005668 <prvInitialiseNewTask+0x14c>)
 8005636:	661a      	str	r2, [r3, #96]	; 0x60
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	4a0c      	ldr	r2, [pc, #48]	; (800566c <prvInitialiseNewTask+0x150>)
 800563c:	665a      	str	r2, [r3, #100]	; 0x64
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	4a0b      	ldr	r2, [pc, #44]	; (8005670 <prvInitialiseNewTask+0x154>)
 8005642:	669a      	str	r2, [r3, #104]	; 0x68
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	68f9      	ldr	r1, [r7, #12]
 8005648:	69b8      	ldr	r0, [r7, #24]
 800564a:	f001 fe91 	bl	8007370 <pxPortInitialiseStack>
 800564e:	4602      	mov	r2, r0
 8005650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005652:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800565e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005660:	bf00      	nop
 8005662:	3720      	adds	r7, #32
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	200054e8 	.word	0x200054e8
 800566c:	20005550 	.word	0x20005550
 8005670:	200055b8 	.word	0x200055b8

08005674 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800567c:	f001 ffa2 	bl	80075c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005680:	4b2c      	ldr	r3, [pc, #176]	; (8005734 <prvAddNewTaskToReadyList+0xc0>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	3301      	adds	r3, #1
 8005686:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <prvAddNewTaskToReadyList+0xc0>)
 8005688:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800568a:	4b2b      	ldr	r3, [pc, #172]	; (8005738 <prvAddNewTaskToReadyList+0xc4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d109      	bne.n	80056a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005692:	4a29      	ldr	r2, [pc, #164]	; (8005738 <prvAddNewTaskToReadyList+0xc4>)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005698:	4b26      	ldr	r3, [pc, #152]	; (8005734 <prvAddNewTaskToReadyList+0xc0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d110      	bne.n	80056c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80056a0:	f000 fd4e 	bl	8006140 <prvInitialiseTaskLists>
 80056a4:	e00d      	b.n	80056c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80056a6:	4b25      	ldr	r3, [pc, #148]	; (800573c <prvAddNewTaskToReadyList+0xc8>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d109      	bne.n	80056c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056ae:	4b22      	ldr	r3, [pc, #136]	; (8005738 <prvAddNewTaskToReadyList+0xc4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d802      	bhi.n	80056c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80056bc:	4a1e      	ldr	r2, [pc, #120]	; (8005738 <prvAddNewTaskToReadyList+0xc4>)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80056c2:	4b1f      	ldr	r3, [pc, #124]	; (8005740 <prvAddNewTaskToReadyList+0xcc>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3301      	adds	r3, #1
 80056c8:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <prvAddNewTaskToReadyList+0xcc>)
 80056ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056cc:	4b1c      	ldr	r3, [pc, #112]	; (8005740 <prvAddNewTaskToReadyList+0xcc>)
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	2201      	movs	r2, #1
 80056da:	409a      	lsls	r2, r3
 80056dc:	4b19      	ldr	r3, [pc, #100]	; (8005744 <prvAddNewTaskToReadyList+0xd0>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	4a18      	ldr	r2, [pc, #96]	; (8005744 <prvAddNewTaskToReadyList+0xd0>)
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ea:	4613      	mov	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4413      	add	r3, r2
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4a15      	ldr	r2, [pc, #84]	; (8005748 <prvAddNewTaskToReadyList+0xd4>)
 80056f4:	441a      	add	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3304      	adds	r3, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4610      	mov	r0, r2
 80056fe:	f7fe fc32 	bl	8003f66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005702:	f001 ff8f 	bl	8007624 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <prvAddNewTaskToReadyList+0xc8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00e      	beq.n	800572c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800570e:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <prvAddNewTaskToReadyList+0xc4>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	429a      	cmp	r2, r3
 800571a:	d207      	bcs.n	800572c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <prvAddNewTaskToReadyList+0xd8>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800572c:	bf00      	nop
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	20000450 	.word	0x20000450
 8005738:	20000170 	.word	0x20000170
 800573c:	2000045c 	.word	0x2000045c
 8005740:	2000046c 	.word	0x2000046c
 8005744:	20000458 	.word	0x20000458
 8005748:	20000174 	.word	0x20000174
 800574c:	e000ed04 	.word	0xe000ed04

08005750 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005758:	2300      	movs	r3, #0
 800575a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d017      	beq.n	8005792 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005762:	4b13      	ldr	r3, [pc, #76]	; (80057b0 <vTaskDelay+0x60>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <vTaskDelay+0x30>
	__asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	60bb      	str	r3, [r7, #8]
}
 800577c:	bf00      	nop
 800577e:	e7fe      	b.n	800577e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005780:	f000 f8d8 	bl	8005934 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005784:	2100      	movs	r1, #0
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f001 fa1e 	bl	8006bc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800578c:	f000 f8e0 	bl	8005950 <xTaskResumeAll>
 8005790:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d107      	bne.n	80057a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005798:	4b06      	ldr	r3, [pc, #24]	; (80057b4 <vTaskDelay+0x64>)
 800579a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80057a8:	bf00      	nop
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	20000478 	.word	0x20000478
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b088      	sub	sp, #32
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <eTaskGetState+0x28>
	__asm volatile
 80057ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ce:	f383 8811 	msr	BASEPRI, r3
 80057d2:	f3bf 8f6f 	isb	sy
 80057d6:	f3bf 8f4f 	dsb	sy
 80057da:	60bb      	str	r3, [r7, #8]
}
 80057dc:	bf00      	nop
 80057de:	e7fe      	b.n	80057de <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80057e0:	4b23      	ldr	r3, [pc, #140]	; (8005870 <eTaskGetState+0xb8>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d102      	bne.n	80057f0 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80057ea:	2300      	movs	r3, #0
 80057ec:	77fb      	strb	r3, [r7, #31]
 80057ee:	e03a      	b.n	8005866 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80057f0:	f001 fee8 	bl	80075c4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80057fa:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <eTaskGetState+0xbc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8005800:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <eTaskGetState+0xc0>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8005806:	f001 ff0d 	bl	8007624 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	429a      	cmp	r2, r3
 8005810:	d003      	beq.n	800581a <eTaskGetState+0x62>
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	429a      	cmp	r2, r3
 8005818:	d102      	bne.n	8005820 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800581a:	2302      	movs	r3, #2
 800581c:	77fb      	strb	r3, [r7, #31]
 800581e:	e022      	b.n	8005866 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	4a16      	ldr	r2, [pc, #88]	; (800587c <eTaskGetState+0xc4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d112      	bne.n	800584e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582c:	2b00      	cmp	r3, #0
 800582e:	d10b      	bne.n	8005848 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8005836:	b2db      	uxtb	r3, r3
 8005838:	2b01      	cmp	r3, #1
 800583a:	d102      	bne.n	8005842 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800583c:	2302      	movs	r3, #2
 800583e:	77fb      	strb	r3, [r7, #31]
 8005840:	e011      	b.n	8005866 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8005842:	2303      	movs	r3, #3
 8005844:	77fb      	strb	r3, [r7, #31]
 8005846:	e00e      	b.n	8005866 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8005848:	2302      	movs	r3, #2
 800584a:	77fb      	strb	r3, [r7, #31]
 800584c:	e00b      	b.n	8005866 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	4a0b      	ldr	r2, [pc, #44]	; (8005880 <eTaskGetState+0xc8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d002      	beq.n	800585c <eTaskGetState+0xa4>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800585c:	2304      	movs	r3, #4
 800585e:	77fb      	strb	r3, [r7, #31]
 8005860:	e001      	b.n	8005866 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8005862:	2301      	movs	r3, #1
 8005864:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8005866:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005868:	4618      	mov	r0, r3
 800586a:	3720      	adds	r7, #32
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20000170 	.word	0x20000170
 8005874:	20000408 	.word	0x20000408
 8005878:	2000040c 	.word	0x2000040c
 800587c:	2000043c 	.word	0x2000043c
 8005880:	20000424 	.word	0x20000424

08005884 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b086      	sub	sp, #24
 8005888:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800588a:	4b22      	ldr	r3, [pc, #136]	; (8005914 <vTaskStartScheduler+0x90>)
 800588c:	9301      	str	r3, [sp, #4]
 800588e:	2300      	movs	r3, #0
 8005890:	9300      	str	r3, [sp, #0]
 8005892:	2300      	movs	r3, #0
 8005894:	2280      	movs	r2, #128	; 0x80
 8005896:	4920      	ldr	r1, [pc, #128]	; (8005918 <vTaskStartScheduler+0x94>)
 8005898:	4820      	ldr	r0, [pc, #128]	; (800591c <vTaskStartScheduler+0x98>)
 800589a:	f7ff fdfd 	bl	8005498 <xTaskCreate>
 800589e:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d102      	bne.n	80058ac <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 80058a6:	f001 f9f5 	bl	8006c94 <xTimerCreateTimerTask>
 80058aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d11d      	bne.n	80058ee <vTaskStartScheduler+0x6a>
	__asm volatile
 80058b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	60bb      	str	r3, [r7, #8]
}
 80058c4:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80058c6:	4b16      	ldr	r3, [pc, #88]	; (8005920 <vTaskStartScheduler+0x9c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	335c      	adds	r3, #92	; 0x5c
 80058cc:	4a15      	ldr	r2, [pc, #84]	; (8005924 <vTaskStartScheduler+0xa0>)
 80058ce:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058d0:	4b15      	ldr	r3, [pc, #84]	; (8005928 <vTaskStartScheduler+0xa4>)
 80058d2:	f04f 32ff 	mov.w	r2, #4294967295
 80058d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058d8:	4b14      	ldr	r3, [pc, #80]	; (800592c <vTaskStartScheduler+0xa8>)
 80058da:	2201      	movs	r2, #1
 80058dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058de:	4b14      	ldr	r3, [pc, #80]	; (8005930 <vTaskStartScheduler+0xac>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80058e4:	f7fa fe72 	bl	80005cc <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058e8:	f001 fdca 	bl	8007480 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058ec:	e00e      	b.n	800590c <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f4:	d10a      	bne.n	800590c <vTaskStartScheduler+0x88>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	607b      	str	r3, [r7, #4]
}
 8005908:	bf00      	nop
 800590a:	e7fe      	b.n	800590a <vTaskStartScheduler+0x86>
}
 800590c:	bf00      	nop
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000474 	.word	0x20000474
 8005918:	0800865c 	.word	0x0800865c
 800591c:	08006111 	.word	0x08006111
 8005920:	20000170 	.word	0x20000170
 8005924:	2000005c 	.word	0x2000005c
 8005928:	20000470 	.word	0x20000470
 800592c:	2000045c 	.word	0x2000045c
 8005930:	20000454 	.word	0x20000454

08005934 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005938:	4b04      	ldr	r3, [pc, #16]	; (800594c <vTaskSuspendAll+0x18>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3301      	adds	r3, #1
 800593e:	4a03      	ldr	r2, [pc, #12]	; (800594c <vTaskSuspendAll+0x18>)
 8005940:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005942:	bf00      	nop
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr
 800594c:	20000478 	.word	0x20000478

08005950 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005956:	2300      	movs	r3, #0
 8005958:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800595e:	4b41      	ldr	r3, [pc, #260]	; (8005a64 <xTaskResumeAll+0x114>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <xTaskResumeAll+0x2c>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	603b      	str	r3, [r7, #0]
}
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800597c:	f001 fe22 	bl	80075c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005980:	4b38      	ldr	r3, [pc, #224]	; (8005a64 <xTaskResumeAll+0x114>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3b01      	subs	r3, #1
 8005986:	4a37      	ldr	r2, [pc, #220]	; (8005a64 <xTaskResumeAll+0x114>)
 8005988:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800598a:	4b36      	ldr	r3, [pc, #216]	; (8005a64 <xTaskResumeAll+0x114>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d161      	bne.n	8005a56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005992:	4b35      	ldr	r3, [pc, #212]	; (8005a68 <xTaskResumeAll+0x118>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d05d      	beq.n	8005a56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800599a:	e02e      	b.n	80059fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800599c:	4b33      	ldr	r3, [pc, #204]	; (8005a6c <xTaskResumeAll+0x11c>)
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3318      	adds	r3, #24
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe fb39 	bl	8004020 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	3304      	adds	r3, #4
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7fe fb34 	bl	8004020 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	2201      	movs	r2, #1
 80059be:	409a      	lsls	r2, r3
 80059c0:	4b2b      	ldr	r3, [pc, #172]	; (8005a70 <xTaskResumeAll+0x120>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	4a2a      	ldr	r2, [pc, #168]	; (8005a70 <xTaskResumeAll+0x120>)
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4a27      	ldr	r2, [pc, #156]	; (8005a74 <xTaskResumeAll+0x124>)
 80059d8:	441a      	add	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	3304      	adds	r3, #4
 80059de:	4619      	mov	r1, r3
 80059e0:	4610      	mov	r0, r2
 80059e2:	f7fe fac0 	bl	8003f66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	4b23      	ldr	r3, [pc, #140]	; (8005a78 <xTaskResumeAll+0x128>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d302      	bcc.n	80059fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80059f4:	4b21      	ldr	r3, [pc, #132]	; (8005a7c <xTaskResumeAll+0x12c>)
 80059f6:	2201      	movs	r2, #1
 80059f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059fa:	4b1c      	ldr	r3, [pc, #112]	; (8005a6c <xTaskResumeAll+0x11c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1cc      	bne.n	800599c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a08:	f000 fcf2 	bl	80063f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a0c:	4b1c      	ldr	r3, [pc, #112]	; (8005a80 <xTaskResumeAll+0x130>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d010      	beq.n	8005a3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a18:	f000 f8e8 	bl	8005bec <xTaskIncrementTick>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005a22:	4b16      	ldr	r3, [pc, #88]	; (8005a7c <xTaskResumeAll+0x12c>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1f1      	bne.n	8005a18 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005a34:	4b12      	ldr	r3, [pc, #72]	; (8005a80 <xTaskResumeAll+0x130>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a3a:	4b10      	ldr	r3, [pc, #64]	; (8005a7c <xTaskResumeAll+0x12c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d009      	beq.n	8005a56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a42:	2301      	movs	r3, #1
 8005a44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a46:	4b0f      	ldr	r3, [pc, #60]	; (8005a84 <xTaskResumeAll+0x134>)
 8005a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a4c:	601a      	str	r2, [r3, #0]
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a56:	f001 fde5 	bl	8007624 <vPortExitCritical>

	return xAlreadyYielded;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20000478 	.word	0x20000478
 8005a68:	20000450 	.word	0x20000450
 8005a6c:	20000410 	.word	0x20000410
 8005a70:	20000458 	.word	0x20000458
 8005a74:	20000174 	.word	0x20000174
 8005a78:	20000170 	.word	0x20000170
 8005a7c:	20000464 	.word	0x20000464
 8005a80:	20000460 	.word	0x20000460
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005a8e:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <xTaskGetTickCount+0x1c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005a94:	687b      	ldr	r3, [r7, #4]
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	20000454 	.word	0x20000454

08005aa8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aae:	f001 fe6b 	bl	8007788 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005ab6:	4b04      	ldr	r3, [pc, #16]	; (8005ac8 <xTaskGetTickCountFromISR+0x20>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005abc:	683b      	ldr	r3, [r7, #0]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000454 	.word	0x20000454

08005acc <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	617b      	str	r3, [r7, #20]
 8005adc:	231f      	movs	r3, #31
 8005ade:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8005ae0:	f7ff ff28 	bl	8005934 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8005ae4:	4b3b      	ldr	r3, [pc, #236]	; (8005bd4 <uxTaskGetSystemState+0x108>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d36a      	bcc.n	8005bc4 <uxTaskGetSystemState+0xf8>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3b01      	subs	r3, #1
 8005af2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	4613      	mov	r3, r2
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	4413      	add	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	461a      	mov	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	1898      	adds	r0, r3, r2
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4a32      	ldr	r2, [pc, #200]	; (8005bd8 <uxTaskGetSystemState+0x10c>)
 8005b10:	4413      	add	r3, r2
 8005b12:	2201      	movs	r2, #1
 8005b14:	4619      	mov	r1, r3
 8005b16:	f000 fbe7 	bl	80062e8 <prvListTasksWithinSingleList>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4413      	add	r3, r2
 8005b20:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e2      	bne.n	8005aee <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	00db      	lsls	r3, r3, #3
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	461a      	mov	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	4a28      	ldr	r2, [pc, #160]	; (8005bdc <uxTaskGetSystemState+0x110>)
 8005b3a:	6811      	ldr	r1, [r2, #0]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 fbd2 	bl	80062e8 <prvListTasksWithinSingleList>
 8005b44:	4602      	mov	r2, r0
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	4413      	add	r3, r2
 8005b4a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	461a      	mov	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	4a20      	ldr	r2, [pc, #128]	; (8005be0 <uxTaskGetSystemState+0x114>)
 8005b5e:	6811      	ldr	r1, [r2, #0]
 8005b60:	2202      	movs	r2, #2
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fbc0 	bl	80062e8 <prvListTasksWithinSingleList>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	4413      	add	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4613      	mov	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	4413      	add	r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4413      	add	r3, r2
 8005b80:	2204      	movs	r2, #4
 8005b82:	4918      	ldr	r1, [pc, #96]	; (8005be4 <uxTaskGetSystemState+0x118>)
 8005b84:	4618      	mov	r0, r3
 8005b86:	f000 fbaf 	bl	80062e8 <prvListTasksWithinSingleList>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	4413      	add	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8005b92:	697a      	ldr	r2, [r7, #20]
 8005b94:	4613      	mov	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	2203      	movs	r2, #3
 8005ba4:	4910      	ldr	r1, [pc, #64]	; (8005be8 <uxTaskGetSystemState+0x11c>)
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fb9e 	bl	80062e8 <prvListTasksWithinSingleList>
 8005bac:	4602      	mov	r2, r0
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d004      	beq.n	8005bc4 <uxTaskGetSystemState+0xf8>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005bba:	f7fa fd0e 	bl	80005da <getRunTimeCounterValue>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8005bc4:	f7ff fec4 	bl	8005950 <xTaskResumeAll>

		return uxTask;
 8005bc8:	697b      	ldr	r3, [r7, #20]
	}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000450 	.word	0x20000450
 8005bd8:	20000174 	.word	0x20000174
 8005bdc:	20000408 	.word	0x20000408
 8005be0:	2000040c 	.word	0x2000040c
 8005be4:	20000424 	.word	0x20000424
 8005be8:	2000043c 	.word	0x2000043c

08005bec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bf6:	4b4e      	ldr	r3, [pc, #312]	; (8005d30 <xTaskIncrementTick+0x144>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f040 808e 	bne.w	8005d1c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c00:	4b4c      	ldr	r3, [pc, #304]	; (8005d34 <xTaskIncrementTick+0x148>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005c08:	4a4a      	ldr	r2, [pc, #296]	; (8005d34 <xTaskIncrementTick+0x148>)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d120      	bne.n	8005c56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005c14:	4b48      	ldr	r3, [pc, #288]	; (8005d38 <xTaskIncrementTick+0x14c>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <xTaskIncrementTick+0x48>
	__asm volatile
 8005c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c22:	f383 8811 	msr	BASEPRI, r3
 8005c26:	f3bf 8f6f 	isb	sy
 8005c2a:	f3bf 8f4f 	dsb	sy
 8005c2e:	603b      	str	r3, [r7, #0]
}
 8005c30:	bf00      	nop
 8005c32:	e7fe      	b.n	8005c32 <xTaskIncrementTick+0x46>
 8005c34:	4b40      	ldr	r3, [pc, #256]	; (8005d38 <xTaskIncrementTick+0x14c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	4b40      	ldr	r3, [pc, #256]	; (8005d3c <xTaskIncrementTick+0x150>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a3e      	ldr	r2, [pc, #248]	; (8005d38 <xTaskIncrementTick+0x14c>)
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	4a3e      	ldr	r2, [pc, #248]	; (8005d3c <xTaskIncrementTick+0x150>)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	4b3d      	ldr	r3, [pc, #244]	; (8005d40 <xTaskIncrementTick+0x154>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	4a3c      	ldr	r2, [pc, #240]	; (8005d40 <xTaskIncrementTick+0x154>)
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	f000 fbcd 	bl	80063f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c56:	4b3b      	ldr	r3, [pc, #236]	; (8005d44 <xTaskIncrementTick+0x158>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d348      	bcc.n	8005cf2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c60:	4b35      	ldr	r3, [pc, #212]	; (8005d38 <xTaskIncrementTick+0x14c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d104      	bne.n	8005c74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c6a:	4b36      	ldr	r3, [pc, #216]	; (8005d44 <xTaskIncrementTick+0x158>)
 8005c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c70:	601a      	str	r2, [r3, #0]
					break;
 8005c72:	e03e      	b.n	8005cf2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c74:	4b30      	ldr	r3, [pc, #192]	; (8005d38 <xTaskIncrementTick+0x14c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d203      	bcs.n	8005c94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c8c:	4a2d      	ldr	r2, [pc, #180]	; (8005d44 <xTaskIncrementTick+0x158>)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c92:	e02e      	b.n	8005cf2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe f9c1 	bl	8004020 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d004      	beq.n	8005cb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	3318      	adds	r3, #24
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe f9b8 	bl	8004020 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	409a      	lsls	r2, r3
 8005cb8:	4b23      	ldr	r3, [pc, #140]	; (8005d48 <xTaskIncrementTick+0x15c>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	4a22      	ldr	r2, [pc, #136]	; (8005d48 <xTaskIncrementTick+0x15c>)
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4a1f      	ldr	r2, [pc, #124]	; (8005d4c <xTaskIncrementTick+0x160>)
 8005cd0:	441a      	add	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4610      	mov	r0, r2
 8005cda:	f7fe f944 	bl	8003f66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce2:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <xTaskIncrementTick+0x164>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d3b9      	bcc.n	8005c60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005cec:	2301      	movs	r3, #1
 8005cee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005cf0:	e7b6      	b.n	8005c60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005cf2:	4b17      	ldr	r3, [pc, #92]	; (8005d50 <xTaskIncrementTick+0x164>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf8:	4914      	ldr	r1, [pc, #80]	; (8005d4c <xTaskIncrementTick+0x160>)
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d901      	bls.n	8005d0e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005d0e:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <xTaskIncrementTick+0x168>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005d16:	2301      	movs	r3, #1
 8005d18:	617b      	str	r3, [r7, #20]
 8005d1a:	e004      	b.n	8005d26 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005d1c:	4b0e      	ldr	r3, [pc, #56]	; (8005d58 <xTaskIncrementTick+0x16c>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3301      	adds	r3, #1
 8005d22:	4a0d      	ldr	r2, [pc, #52]	; (8005d58 <xTaskIncrementTick+0x16c>)
 8005d24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005d26:	697b      	ldr	r3, [r7, #20]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	20000478 	.word	0x20000478
 8005d34:	20000454 	.word	0x20000454
 8005d38:	20000408 	.word	0x20000408
 8005d3c:	2000040c 	.word	0x2000040c
 8005d40:	20000468 	.word	0x20000468
 8005d44:	20000470 	.word	0x20000470
 8005d48:	20000458 	.word	0x20000458
 8005d4c:	20000174 	.word	0x20000174
 8005d50:	20000170 	.word	0x20000170
 8005d54:	20000464 	.word	0x20000464
 8005d58:	20000460 	.word	0x20000460

08005d5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b086      	sub	sp, #24
 8005d60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d62:	4b35      	ldr	r3, [pc, #212]	; (8005e38 <vTaskSwitchContext+0xdc>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d003      	beq.n	8005d72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d6a:	4b34      	ldr	r3, [pc, #208]	; (8005e3c <vTaskSwitchContext+0xe0>)
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d70:	e05d      	b.n	8005e2e <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 8005d72:	4b32      	ldr	r3, [pc, #200]	; (8005e3c <vTaskSwitchContext+0xe0>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005d78:	f7fa fc2f 	bl	80005da <getRunTimeCounterValue>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	4a30      	ldr	r2, [pc, #192]	; (8005e40 <vTaskSwitchContext+0xe4>)
 8005d80:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005d82:	4b2f      	ldr	r3, [pc, #188]	; (8005e40 <vTaskSwitchContext+0xe4>)
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4b2f      	ldr	r3, [pc, #188]	; (8005e44 <vTaskSwitchContext+0xe8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d909      	bls.n	8005da2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005d8e:	4b2e      	ldr	r3, [pc, #184]	; (8005e48 <vTaskSwitchContext+0xec>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8005d94:	4a2a      	ldr	r2, [pc, #168]	; (8005e40 <vTaskSwitchContext+0xe4>)
 8005d96:	6810      	ldr	r0, [r2, #0]
 8005d98:	4a2a      	ldr	r2, [pc, #168]	; (8005e44 <vTaskSwitchContext+0xe8>)
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	1a82      	subs	r2, r0, r2
 8005d9e:	440a      	add	r2, r1
 8005da0:	659a      	str	r2, [r3, #88]	; 0x58
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005da2:	4b27      	ldr	r3, [pc, #156]	; (8005e40 <vTaskSwitchContext+0xe4>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a27      	ldr	r2, [pc, #156]	; (8005e44 <vTaskSwitchContext+0xe8>)
 8005da8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005daa:	4b28      	ldr	r3, [pc, #160]	; (8005e4c <vTaskSwitchContext+0xf0>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	fab3 f383 	clz	r3, r3
 8005db6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005db8:	7afb      	ldrb	r3, [r7, #11]
 8005dba:	f1c3 031f 	rsb	r3, r3, #31
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	4923      	ldr	r1, [pc, #140]	; (8005e50 <vTaskSwitchContext+0xf4>)
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4413      	add	r3, r2
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	440b      	add	r3, r1
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d10a      	bne.n	8005dea <vTaskSwitchContext+0x8e>
	__asm volatile
 8005dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd8:	f383 8811 	msr	BASEPRI, r3
 8005ddc:	f3bf 8f6f 	isb	sy
 8005de0:	f3bf 8f4f 	dsb	sy
 8005de4:	607b      	str	r3, [r7, #4]
}
 8005de6:	bf00      	nop
 8005de8:	e7fe      	b.n	8005de8 <vTaskSwitchContext+0x8c>
 8005dea:	697a      	ldr	r2, [r7, #20]
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <vTaskSwitchContext+0xf4>)
 8005df6:	4413      	add	r3, r2
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	605a      	str	r2, [r3, #4]
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	685a      	ldr	r2, [r3, #4]
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d104      	bne.n	8005e1a <vTaskSwitchContext+0xbe>
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	685a      	ldr	r2, [r3, #4]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	4a09      	ldr	r2, [pc, #36]	; (8005e48 <vTaskSwitchContext+0xec>)
 8005e22:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e24:	4b08      	ldr	r3, [pc, #32]	; (8005e48 <vTaskSwitchContext+0xec>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	335c      	adds	r3, #92	; 0x5c
 8005e2a:	4a0a      	ldr	r2, [pc, #40]	; (8005e54 <vTaskSwitchContext+0xf8>)
 8005e2c:	6013      	str	r3, [r2, #0]
}
 8005e2e:	bf00      	nop
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop
 8005e38:	20000478 	.word	0x20000478
 8005e3c:	20000464 	.word	0x20000464
 8005e40:	20000480 	.word	0x20000480
 8005e44:	2000047c 	.word	0x2000047c
 8005e48:	20000170 	.word	0x20000170
 8005e4c:	20000458 	.word	0x20000458
 8005e50:	20000174 	.word	0x20000174
 8005e54:	2000005c 	.word	0x2000005c

08005e58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	60fb      	str	r3, [r7, #12]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e7e:	4b07      	ldr	r3, [pc, #28]	; (8005e9c <vTaskPlaceOnEventList+0x44>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3318      	adds	r3, #24
 8005e84:	4619      	mov	r1, r3
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7fe f891 	bl	8003fae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	6838      	ldr	r0, [r7, #0]
 8005e90:	f000 fe9a 	bl	8006bc8 <prvAddCurrentTaskToDelayedList>
}
 8005e94:	bf00      	nop
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000170 	.word	0x20000170

08005ea0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b086      	sub	sp, #24
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10a      	bne.n	8005ec8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	617b      	str	r3, [r7, #20]
}
 8005ec4:	bf00      	nop
 8005ec6:	e7fe      	b.n	8005ec6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	; (8005ef4 <vTaskPlaceOnEventListRestricted+0x54>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3318      	adds	r3, #24
 8005ece:	4619      	mov	r1, r3
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f7fe f848 	bl	8003f66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005edc:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	68b8      	ldr	r0, [r7, #8]
 8005ee6:	f000 fe6f 	bl	8006bc8 <prvAddCurrentTaskToDelayedList>
	}
 8005eea:	bf00      	nop
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	bf00      	nop
 8005ef4:	20000170 	.word	0x20000170

08005ef8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	60fb      	str	r3, [r7, #12]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	3318      	adds	r3, #24
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fe f879 	bl	8004020 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f2e:	4b1d      	ldr	r3, [pc, #116]	; (8005fa4 <xTaskRemoveFromEventList+0xac>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d11c      	bne.n	8005f70 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe f870 	bl	8004020 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	2201      	movs	r2, #1
 8005f46:	409a      	lsls	r2, r3
 8005f48:	4b17      	ldr	r3, [pc, #92]	; (8005fa8 <xTaskRemoveFromEventList+0xb0>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	4a16      	ldr	r2, [pc, #88]	; (8005fa8 <xTaskRemoveFromEventList+0xb0>)
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4a13      	ldr	r2, [pc, #76]	; (8005fac <xTaskRemoveFromEventList+0xb4>)
 8005f60:	441a      	add	r2, r3
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	3304      	adds	r3, #4
 8005f66:	4619      	mov	r1, r3
 8005f68:	4610      	mov	r0, r2
 8005f6a:	f7fd fffc 	bl	8003f66 <vListInsertEnd>
 8005f6e:	e005      	b.n	8005f7c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	3318      	adds	r3, #24
 8005f74:	4619      	mov	r1, r3
 8005f76:	480e      	ldr	r0, [pc, #56]	; (8005fb0 <xTaskRemoveFromEventList+0xb8>)
 8005f78:	f7fd fff5 	bl	8003f66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f80:	4b0c      	ldr	r3, [pc, #48]	; (8005fb4 <xTaskRemoveFromEventList+0xbc>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d905      	bls.n	8005f96 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f8e:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <xTaskRemoveFromEventList+0xc0>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	e001      	b.n	8005f9a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f9a:	697b      	ldr	r3, [r7, #20]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3718      	adds	r7, #24
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20000478 	.word	0x20000478
 8005fa8:	20000458 	.word	0x20000458
 8005fac:	20000174 	.word	0x20000174
 8005fb0:	20000410 	.word	0x20000410
 8005fb4:	20000170 	.word	0x20000170
 8005fb8:	20000464 	.word	0x20000464

08005fbc <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10a      	bne.n	8005fe0 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	60fb      	str	r3, [r7, #12]
}
 8005fdc:	bf00      	nop
 8005fde:	e7fe      	b.n	8005fde <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8005fe0:	f001 faf0 	bl	80075c4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005fe4:	4b06      	ldr	r3, [pc, #24]	; (8006000 <vTaskSetTimeOutState+0x44>)
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8005fec:	4b05      	ldr	r3, [pc, #20]	; (8006004 <vTaskSetTimeOutState+0x48>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8005ff4:	f001 fb16 	bl	8007624 <vPortExitCritical>
}
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000468 	.word	0x20000468
 8006004:	20000454 	.word	0x20000454

08006008 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006010:	4b06      	ldr	r3, [pc, #24]	; (800602c <vTaskInternalSetTimeOutState+0x24>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <vTaskInternalSetTimeOutState+0x28>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	605a      	str	r2, [r3, #4]
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000468 	.word	0x20000468
 8006030:	20000454 	.word	0x20000454

08006034 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	613b      	str	r3, [r7, #16]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10a      	bne.n	8006076 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006064:	f383 8811 	msr	BASEPRI, r3
 8006068:	f3bf 8f6f 	isb	sy
 800606c:	f3bf 8f4f 	dsb	sy
 8006070:	60fb      	str	r3, [r7, #12]
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006076:	f001 faa5 	bl	80075c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800607a:	4b1d      	ldr	r3, [pc, #116]	; (80060f0 <xTaskCheckForTimeOut+0xbc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d102      	bne.n	800609a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006094:	2300      	movs	r3, #0
 8006096:	61fb      	str	r3, [r7, #28]
 8006098:	e023      	b.n	80060e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4b15      	ldr	r3, [pc, #84]	; (80060f4 <xTaskCheckForTimeOut+0xc0>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d007      	beq.n	80060b6 <xTaskCheckForTimeOut+0x82>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	69ba      	ldr	r2, [r7, #24]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d302      	bcc.n	80060b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80060b0:	2301      	movs	r3, #1
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	e015      	b.n	80060e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d20b      	bcs.n	80060d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	1ad2      	subs	r2, r2, r3
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f7ff ff9b 	bl	8006008 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80060d2:	2300      	movs	r3, #0
 80060d4:	61fb      	str	r3, [r7, #28]
 80060d6:	e004      	b.n	80060e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80060de:	2301      	movs	r3, #1
 80060e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80060e2:	f001 fa9f 	bl	8007624 <vPortExitCritical>

	return xReturn;
 80060e6:	69fb      	ldr	r3, [r7, #28]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	20000454 	.word	0x20000454
 80060f4:	20000468 	.word	0x20000468

080060f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80060f8:	b480      	push	{r7}
 80060fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80060fc:	4b03      	ldr	r3, [pc, #12]	; (800610c <vTaskMissedYield+0x14>)
 80060fe:	2201      	movs	r2, #1
 8006100:	601a      	str	r2, [r3, #0]
}
 8006102:	bf00      	nop
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	20000464 	.word	0x20000464

08006110 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006118:	f000 f852 	bl	80061c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <prvIdleTask+0x28>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d9f9      	bls.n	8006118 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <prvIdleTask+0x2c>)
 8006126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006134:	e7f0      	b.n	8006118 <prvIdleTask+0x8>
 8006136:	bf00      	nop
 8006138:	20000174 	.word	0x20000174
 800613c:	e000ed04 	.word	0xe000ed04

08006140 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006146:	2300      	movs	r3, #0
 8006148:	607b      	str	r3, [r7, #4]
 800614a:	e00c      	b.n	8006166 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	4613      	mov	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4a12      	ldr	r2, [pc, #72]	; (80061a0 <prvInitialiseTaskLists+0x60>)
 8006158:	4413      	add	r3, r2
 800615a:	4618      	mov	r0, r3
 800615c:	f7fd fed6 	bl	8003f0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3301      	adds	r3, #1
 8006164:	607b      	str	r3, [r7, #4]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b1e      	cmp	r3, #30
 800616a:	d9ef      	bls.n	800614c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800616c:	480d      	ldr	r0, [pc, #52]	; (80061a4 <prvInitialiseTaskLists+0x64>)
 800616e:	f7fd fecd 	bl	8003f0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006172:	480d      	ldr	r0, [pc, #52]	; (80061a8 <prvInitialiseTaskLists+0x68>)
 8006174:	f7fd feca 	bl	8003f0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006178:	480c      	ldr	r0, [pc, #48]	; (80061ac <prvInitialiseTaskLists+0x6c>)
 800617a:	f7fd fec7 	bl	8003f0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800617e:	480c      	ldr	r0, [pc, #48]	; (80061b0 <prvInitialiseTaskLists+0x70>)
 8006180:	f7fd fec4 	bl	8003f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006184:	480b      	ldr	r0, [pc, #44]	; (80061b4 <prvInitialiseTaskLists+0x74>)
 8006186:	f7fd fec1 	bl	8003f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800618a:	4b0b      	ldr	r3, [pc, #44]	; (80061b8 <prvInitialiseTaskLists+0x78>)
 800618c:	4a05      	ldr	r2, [pc, #20]	; (80061a4 <prvInitialiseTaskLists+0x64>)
 800618e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006190:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <prvInitialiseTaskLists+0x7c>)
 8006192:	4a05      	ldr	r2, [pc, #20]	; (80061a8 <prvInitialiseTaskLists+0x68>)
 8006194:	601a      	str	r2, [r3, #0]
}
 8006196:	bf00      	nop
 8006198:	3708      	adds	r7, #8
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop
 80061a0:	20000174 	.word	0x20000174
 80061a4:	200003e0 	.word	0x200003e0
 80061a8:	200003f4 	.word	0x200003f4
 80061ac:	20000410 	.word	0x20000410
 80061b0:	20000424 	.word	0x20000424
 80061b4:	2000043c 	.word	0x2000043c
 80061b8:	20000408 	.word	0x20000408
 80061bc:	2000040c 	.word	0x2000040c

080061c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b082      	sub	sp, #8
 80061c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061c6:	e019      	b.n	80061fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80061c8:	f001 f9fc 	bl	80075c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061cc:	4b10      	ldr	r3, [pc, #64]	; (8006210 <prvCheckTasksWaitingTermination+0x50>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fd ff21 	bl	8004020 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061de:	4b0d      	ldr	r3, [pc, #52]	; (8006214 <prvCheckTasksWaitingTermination+0x54>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	4a0b      	ldr	r2, [pc, #44]	; (8006214 <prvCheckTasksWaitingTermination+0x54>)
 80061e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061e8:	4b0b      	ldr	r3, [pc, #44]	; (8006218 <prvCheckTasksWaitingTermination+0x58>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	4a0a      	ldr	r2, [pc, #40]	; (8006218 <prvCheckTasksWaitingTermination+0x58>)
 80061f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061f2:	f001 fa17 	bl	8007624 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f8e4 	bl	80063c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061fc:	4b06      	ldr	r3, [pc, #24]	; (8006218 <prvCheckTasksWaitingTermination+0x58>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d1e1      	bne.n	80061c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000424 	.word	0x20000424
 8006214:	20000450 	.word	0x20000450
 8006218:	20000438 	.word	0x20000438

0800621c <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 800621c:	b580      	push	{r7, lr}
 800621e:	b086      	sub	sp, #24
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
 8006228:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d102      	bne.n	8006236 <vTaskGetInfo+0x1a>
 8006230:	4b2c      	ldr	r3, [pc, #176]	; (80062e4 <vTaskGetInfo+0xc8>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	e000      	b.n	8006238 <vTaskGetInfo+0x1c>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	2b05      	cmp	r3, #5
 8006276:	d01a      	beq.n	80062ae <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8006278:	4b1a      	ldr	r3, [pc, #104]	; (80062e4 <vTaskGetInfo+0xc8>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	429a      	cmp	r2, r3
 8006280:	d103      	bne.n	800628a <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2200      	movs	r2, #0
 8006286:	731a      	strb	r2, [r3, #12]
 8006288:	e018      	b.n	80062bc <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	2b03      	cmp	r3, #3
 8006294:	d112      	bne.n	80062bc <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8006296:	f7ff fb4d 	bl	8005934 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d002      	beq.n	80062a8 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2202      	movs	r2, #2
 80062a6:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80062a8:	f7ff fb52 	bl	8005950 <xTaskResumeAll>
 80062ac:	e006      	b.n	80062bc <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80062ae:	6978      	ldr	r0, [r7, #20]
 80062b0:	f7ff fa82 	bl	80057b8 <eTaskGetState>
 80062b4:	4603      	mov	r3, r0
 80062b6:	461a      	mov	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d009      	beq.n	80062d6 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 f860 	bl	800638c <prvTaskCheckFreeStackSpace>
 80062cc:	4603      	mov	r3, r0
 80062ce:	461a      	mov	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80062d4:	e002      	b.n	80062dc <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2200      	movs	r2, #0
 80062da:	841a      	strh	r2, [r3, #32]
	}
 80062dc:	bf00      	nop
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000170 	.word	0x20000170

080062e8 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08a      	sub	sp, #40	; 0x28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	4613      	mov	r3, r2
 80062f4:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80062f6:	2300      	movs	r3, #0
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d03f      	beq.n	8006382 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	623b      	str	r3, [r7, #32]
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	605a      	str	r2, [r3, #4]
 8006310:	6a3b      	ldr	r3, [r7, #32]
 8006312:	685a      	ldr	r2, [r3, #4]
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	3308      	adds	r3, #8
 8006318:	429a      	cmp	r2, r3
 800631a:	d104      	bne.n	8006326 <prvListTasksWithinSingleList+0x3e>
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	605a      	str	r2, [r3, #4]
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	61bb      	str	r3, [r7, #24]
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	605a      	str	r2, [r3, #4]
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	685a      	ldr	r2, [r3, #4]
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	3308      	adds	r3, #8
 8006344:	429a      	cmp	r2, r3
 8006346:	d104      	bne.n	8006352 <prvListTasksWithinSingleList+0x6a>
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800635a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800635c:	4613      	mov	r3, r2
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	4413      	add	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	461a      	mov	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	1899      	adds	r1, r3, r2
 800636a:	79fb      	ldrb	r3, [r7, #7]
 800636c:	2201      	movs	r2, #1
 800636e:	6978      	ldr	r0, [r7, #20]
 8006370:	f7ff ff54 	bl	800621c <vTaskGetInfo>
				uxTask++;
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	3301      	adds	r3, #1
 8006378:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	429a      	cmp	r2, r3
 8006380:	d1d5      	bne.n	800632e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8006382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006384:	4618      	mov	r0, r3
 8006386:	3728      	adds	r7, #40	; 0x28
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 800638c:	b480      	push	{r7}
 800638e:	b085      	sub	sp, #20
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8006398:	e005      	b.n	80063a6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3301      	adds	r3, #1
 800639e:	607b      	str	r3, [r7, #4]
			ulCount++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3301      	adds	r3, #1
 80063a4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	2ba5      	cmp	r3, #165	; 0xa5
 80063ac:	d0f5      	beq.n	800639a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	089b      	lsrs	r3, r3, #2
 80063b2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	b29b      	uxth	r3, r3
	}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b082      	sub	sp, #8
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	335c      	adds	r3, #92	; 0x5c
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 fc2b 	bl	8007c2c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 fae0 	bl	80079a0 <vPortFree>
			vPortFree( pxTCB );
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 fadd 	bl	80079a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f6:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <prvResetNextTaskUnblockTime+0x38>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d104      	bne.n	800640a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <prvResetNextTaskUnblockTime+0x3c>)
 8006402:	f04f 32ff 	mov.w	r2, #4294967295
 8006406:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006408:	e008      	b.n	800641c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800640a:	4b07      	ldr	r3, [pc, #28]	; (8006428 <prvResetNextTaskUnblockTime+0x38>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	4a04      	ldr	r2, [pc, #16]	; (800642c <prvResetNextTaskUnblockTime+0x3c>)
 800641a:	6013      	str	r3, [r2, #0]
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr
 8006428:	20000408 	.word	0x20000408
 800642c:	20000470 	.word	0x20000470

08006430 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006436:	4b05      	ldr	r3, [pc, #20]	; (800644c <xTaskGetCurrentTaskHandle+0x1c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800643c:	687b      	ldr	r3, [r7, #4]
	}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	20000170 	.word	0x20000170

08006450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006456:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <xTaskGetSchedulerState+0x34>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d102      	bne.n	8006464 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800645e:	2301      	movs	r3, #1
 8006460:	607b      	str	r3, [r7, #4]
 8006462:	e008      	b.n	8006476 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006464:	4b08      	ldr	r3, [pc, #32]	; (8006488 <xTaskGetSchedulerState+0x38>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d102      	bne.n	8006472 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800646c:	2302      	movs	r3, #2
 800646e:	607b      	str	r3, [r7, #4]
 8006470:	e001      	b.n	8006476 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006472:	2300      	movs	r3, #0
 8006474:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006476:	687b      	ldr	r3, [r7, #4]
	}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	2000045c 	.word	0x2000045c
 8006488:	20000478 	.word	0x20000478

0800648c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d05e      	beq.n	8006560 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a6:	4b31      	ldr	r3, [pc, #196]	; (800656c <xTaskPriorityInherit+0xe0>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d24e      	bcs.n	800654e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	db06      	blt.n	80064c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b8:	4b2c      	ldr	r3, [pc, #176]	; (800656c <xTaskPriorityInherit+0xe0>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	f1c3 021f 	rsb	r2, r3, #31
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	6959      	ldr	r1, [r3, #20]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4a26      	ldr	r2, [pc, #152]	; (8006570 <xTaskPriorityInherit+0xe4>)
 80064d8:	4413      	add	r3, r2
 80064da:	4299      	cmp	r1, r3
 80064dc:	d12f      	bne.n	800653e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fd fd9c 	bl	8004020 <uxListRemove>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	2201      	movs	r2, #1
 80064f4:	fa02 f303 	lsl.w	r3, r2, r3
 80064f8:	43da      	mvns	r2, r3
 80064fa:	4b1e      	ldr	r3, [pc, #120]	; (8006574 <xTaskPriorityInherit+0xe8>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4013      	ands	r3, r2
 8006500:	4a1c      	ldr	r2, [pc, #112]	; (8006574 <xTaskPriorityInherit+0xe8>)
 8006502:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006504:	4b19      	ldr	r3, [pc, #100]	; (800656c <xTaskPriorityInherit+0xe0>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006512:	2201      	movs	r2, #1
 8006514:	409a      	lsls	r2, r3
 8006516:	4b17      	ldr	r3, [pc, #92]	; (8006574 <xTaskPriorityInherit+0xe8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4313      	orrs	r3, r2
 800651c:	4a15      	ldr	r2, [pc, #84]	; (8006574 <xTaskPriorityInherit+0xe8>)
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006524:	4613      	mov	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4a10      	ldr	r2, [pc, #64]	; (8006570 <xTaskPriorityInherit+0xe4>)
 800652e:	441a      	add	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	3304      	adds	r3, #4
 8006534:	4619      	mov	r1, r3
 8006536:	4610      	mov	r0, r2
 8006538:	f7fd fd15 	bl	8003f66 <vListInsertEnd>
 800653c:	e004      	b.n	8006548 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800653e:	4b0b      	ldr	r3, [pc, #44]	; (800656c <xTaskPriorityInherit+0xe0>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006548:	2301      	movs	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	e008      	b.n	8006560 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006552:	4b06      	ldr	r3, [pc, #24]	; (800656c <xTaskPriorityInherit+0xe0>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006558:	429a      	cmp	r2, r3
 800655a:	d201      	bcs.n	8006560 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800655c:	2301      	movs	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006560:	68fb      	ldr	r3, [r7, #12]
	}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	20000170 	.word	0x20000170
 8006570:	20000174 	.word	0x20000174
 8006574:	20000458 	.word	0x20000458

08006578 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d06e      	beq.n	800666c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800658e:	4b3a      	ldr	r3, [pc, #232]	; (8006678 <xTaskPriorityDisinherit+0x100>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	429a      	cmp	r2, r3
 8006596:	d00a      	beq.n	80065ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659c:	f383 8811 	msr	BASEPRI, r3
 80065a0:	f3bf 8f6f 	isb	sy
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	60fb      	str	r3, [r7, #12]
}
 80065aa:	bf00      	nop
 80065ac:	e7fe      	b.n	80065ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10a      	bne.n	80065cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80065b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ba:	f383 8811 	msr	BASEPRI, r3
 80065be:	f3bf 8f6f 	isb	sy
 80065c2:	f3bf 8f4f 	dsb	sy
 80065c6:	60bb      	str	r3, [r7, #8]
}
 80065c8:	bf00      	nop
 80065ca:	e7fe      	b.n	80065ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d0:	1e5a      	subs	r2, r3, #1
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065de:	429a      	cmp	r2, r3
 80065e0:	d044      	beq.n	800666c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d140      	bne.n	800666c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	3304      	adds	r3, #4
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fd fd16 	bl	8004020 <uxListRemove>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d115      	bne.n	8006626 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fe:	491f      	ldr	r1, [pc, #124]	; (800667c <xTaskPriorityDisinherit+0x104>)
 8006600:	4613      	mov	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	440b      	add	r3, r1
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10a      	bne.n	8006626 <xTaskPriorityDisinherit+0xae>
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	2201      	movs	r2, #1
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	43da      	mvns	r2, r3
 800661c:	4b18      	ldr	r3, [pc, #96]	; (8006680 <xTaskPriorityDisinherit+0x108>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4013      	ands	r3, r2
 8006622:	4a17      	ldr	r2, [pc, #92]	; (8006680 <xTaskPriorityDisinherit+0x108>)
 8006624:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006632:	f1c3 021f 	rsb	r2, r3, #31
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	2201      	movs	r2, #1
 8006640:	409a      	lsls	r2, r3
 8006642:	4b0f      	ldr	r3, [pc, #60]	; (8006680 <xTaskPriorityDisinherit+0x108>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4313      	orrs	r3, r2
 8006648:	4a0d      	ldr	r2, [pc, #52]	; (8006680 <xTaskPriorityDisinherit+0x108>)
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4a08      	ldr	r2, [pc, #32]	; (800667c <xTaskPriorityDisinherit+0x104>)
 800665a:	441a      	add	r2, r3
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	3304      	adds	r3, #4
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f7fd fc7f 	bl	8003f66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006668:	2301      	movs	r3, #1
 800666a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800666c:	697b      	ldr	r3, [r7, #20]
	}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000170 	.word	0x20000170
 800667c:	20000174 	.word	0x20000174
 8006680:	20000458 	.word	0x20000458

08006684 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006684:	b580      	push	{r7, lr}
 8006686:	b088      	sub	sp, #32
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006692:	2301      	movs	r3, #1
 8006694:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d077      	beq.n	800678c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	60fb      	str	r3, [r7, #12]
}
 80066b6:	bf00      	nop
 80066b8:	e7fe      	b.n	80066b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d902      	bls.n	80066ca <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	61fb      	str	r3, [r7, #28]
 80066c8:	e002      	b.n	80066d0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d058      	beq.n	800678c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d153      	bne.n	800678c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80066e4:	4b2b      	ldr	r3, [pc, #172]	; (8006794 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d10a      	bne.n	8006704 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80066ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f2:	f383 8811 	msr	BASEPRI, r3
 80066f6:	f3bf 8f6f 	isb	sy
 80066fa:	f3bf 8f4f 	dsb	sy
 80066fe:	60bb      	str	r3, [r7, #8]
}
 8006700:	bf00      	nop
 8006702:	e7fe      	b.n	8006702 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	69fa      	ldr	r2, [r7, #28]
 800670e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	699b      	ldr	r3, [r3, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	db04      	blt.n	8006722 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f1c3 021f 	rsb	r2, r3, #31
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	6959      	ldr	r1, [r3, #20]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	4a19      	ldr	r2, [pc, #100]	; (8006798 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006732:	4413      	add	r3, r2
 8006734:	4299      	cmp	r1, r3
 8006736:	d129      	bne.n	800678c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	3304      	adds	r3, #4
 800673c:	4618      	mov	r0, r3
 800673e:	f7fd fc6f 	bl	8004020 <uxListRemove>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10a      	bne.n	800675e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800674c:	2201      	movs	r2, #1
 800674e:	fa02 f303 	lsl.w	r3, r2, r3
 8006752:	43da      	mvns	r2, r3
 8006754:	4b11      	ldr	r3, [pc, #68]	; (800679c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4013      	ands	r3, r2
 800675a:	4a10      	ldr	r2, [pc, #64]	; (800679c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800675c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006762:	2201      	movs	r2, #1
 8006764:	409a      	lsls	r2, r3
 8006766:	4b0d      	ldr	r3, [pc, #52]	; (800679c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4313      	orrs	r3, r2
 800676c:	4a0b      	ldr	r2, [pc, #44]	; (800679c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800676e:	6013      	str	r3, [r2, #0]
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4a06      	ldr	r2, [pc, #24]	; (8006798 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800677e:	441a      	add	r2, r3
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4610      	mov	r0, r2
 8006788:	f7fd fbed 	bl	8003f66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800678c:	bf00      	nop
 800678e:	3720      	adds	r7, #32
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20000170 	.word	0x20000170
 8006798:	20000174 	.word	0x20000174
 800679c:	20000458 	.word	0x20000458

080067a0 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 fabf 	bl	8007d30 <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7f9 fd34 	bl	8000220 <strlen>
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	e007      	b.n	80067cc <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4413      	add	r3, r2
 80067c2:	2220      	movs	r2, #32
 80067c4:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3301      	adds	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2b0e      	cmp	r3, #14
 80067d0:	d9f4      	bls.n	80067bc <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	4413      	add	r3, r2
 80067d8:	2200      	movs	r2, #0
 80067da:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
	}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 80067ec:	b590      	push	{r4, r7, lr}
 80067ee:	b089      	sub	sp, #36	; 0x24
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80067fa:	4b45      	ldr	r3, [pc, #276]	; (8006910 <vTaskList+0x124>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8006800:	4b43      	ldr	r3, [pc, #268]	; (8006910 <vTaskList+0x124>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	4613      	mov	r3, r2
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	4413      	add	r3, r2
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	4618      	mov	r0, r3
 800680e:	f000 fffb 	bl	8007808 <pvPortMalloc>
 8006812:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d076      	beq.n	8006908 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800681a:	2200      	movs	r2, #0
 800681c:	68f9      	ldr	r1, [r7, #12]
 800681e:	68b8      	ldr	r0, [r7, #8]
 8006820:	f7ff f954 	bl	8005acc <uxTaskGetSystemState>
 8006824:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	e066      	b.n	80068fa <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 800682c:	697a      	ldr	r2, [r7, #20]
 800682e:	4613      	mov	r3, r2
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	4413      	add	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	461a      	mov	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4413      	add	r3, r2
 800683c:	7b1b      	ldrb	r3, [r3, #12]
 800683e:	2b04      	cmp	r3, #4
 8006840:	d81b      	bhi.n	800687a <vTaskList+0x8e>
 8006842:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <vTaskList+0x5c>)
 8006844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006848:	0800685d 	.word	0x0800685d
 800684c:	08006863 	.word	0x08006863
 8006850:	08006869 	.word	0x08006869
 8006854:	0800686f 	.word	0x0800686f
 8006858:	08006875 	.word	0x08006875
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 800685c:	2358      	movs	r3, #88	; 0x58
 800685e:	74fb      	strb	r3, [r7, #19]
										break;
 8006860:	e00e      	b.n	8006880 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8006862:	2352      	movs	r3, #82	; 0x52
 8006864:	74fb      	strb	r3, [r7, #19]
										break;
 8006866:	e00b      	b.n	8006880 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8006868:	2342      	movs	r3, #66	; 0x42
 800686a:	74fb      	strb	r3, [r7, #19]
										break;
 800686c:	e008      	b.n	8006880 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 800686e:	2353      	movs	r3, #83	; 0x53
 8006870:	74fb      	strb	r3, [r7, #19]
										break;
 8006872:	e005      	b.n	8006880 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8006874:	2344      	movs	r3, #68	; 0x44
 8006876:	74fb      	strb	r3, [r7, #19]
										break;
 8006878:	e002      	b.n	8006880 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800687a:	2300      	movs	r3, #0
 800687c:	74fb      	strb	r3, [r7, #19]
										break;
 800687e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8006880:	697a      	ldr	r2, [r7, #20]
 8006882:	4613      	mov	r3, r2
 8006884:	00db      	lsls	r3, r3, #3
 8006886:	4413      	add	r3, r2
 8006888:	009b      	lsls	r3, r3, #2
 800688a:	461a      	mov	r2, r3
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	4413      	add	r3, r2
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff ff83 	bl	80067a0 <prvWriteNameToBuffer>
 800689a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 800689c:	7cf9      	ldrb	r1, [r7, #19]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4613      	mov	r3, r2
 80068a2:	00db      	lsls	r3, r3, #3
 80068a4:	4413      	add	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	461a      	mov	r2, r3
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	4413      	add	r3, r2
 80068ae:	6918      	ldr	r0, [r3, #16]
 80068b0:	697a      	ldr	r2, [r7, #20]
 80068b2:	4613      	mov	r3, r2
 80068b4:	00db      	lsls	r3, r3, #3
 80068b6:	4413      	add	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	461a      	mov	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	4413      	add	r3, r2
 80068c0:	8c1b      	ldrh	r3, [r3, #32]
 80068c2:	461c      	mov	r4, r3
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4613      	mov	r3, r2
 80068c8:	00db      	lsls	r3, r3, #3
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	461a      	mov	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4413      	add	r3, r2
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	9301      	str	r3, [sp, #4]
 80068d8:	9400      	str	r4, [sp, #0]
 80068da:	4603      	mov	r3, r0
 80068dc:	460a      	mov	r2, r1
 80068de:	490d      	ldr	r1, [pc, #52]	; (8006914 <vTaskList+0x128>)
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 f97b 	bl	8007bdc <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7f9 fc9a 	bl	8000220 <strlen>
 80068ec:	4602      	mov	r2, r0
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4413      	add	r3, r2
 80068f2:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	3301      	adds	r3, #1
 80068f8:	617b      	str	r3, [r7, #20]
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d394      	bcc.n	800682c <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8006902:	68b8      	ldr	r0, [r7, #8]
 8006904:	f001 f84c 	bl	80079a0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006908:	bf00      	nop
 800690a:	371c      	adds	r7, #28
 800690c:	46bd      	mov	sp, r7
 800690e:	bd90      	pop	{r4, r7, pc}
 8006910:	20000450 	.word	0x20000450
 8006914:	08008664 	.word	0x08008664

08006918 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800691c:	4b07      	ldr	r3, [pc, #28]	; (800693c <pvTaskIncrementMutexHeldCount+0x24>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006924:	4b05      	ldr	r3, [pc, #20]	; (800693c <pvTaskIncrementMutexHeldCount+0x24>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800692a:	3201      	adds	r2, #1
 800692c:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 800692e:	4b03      	ldr	r3, [pc, #12]	; (800693c <pvTaskIncrementMutexHeldCount+0x24>)
 8006930:	681b      	ldr	r3, [r3, #0]
	}
 8006932:	4618      	mov	r0, r3
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	20000170 	.word	0x20000170

08006940 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800694e:	f000 fe39 	bl	80075c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006952:	4b29      	ldr	r3, [pc, #164]	; (80069f8 <xTaskNotifyWait+0xb8>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d01c      	beq.n	800699a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006960:	4b25      	ldr	r3, [pc, #148]	; (80069f8 <xTaskNotifyWait+0xb8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	43d2      	mvns	r2, r2
 800696c:	400a      	ands	r2, r1
 800696e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006972:	4b21      	ldr	r3, [pc, #132]	; (80069f8 <xTaskNotifyWait+0xb8>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

				if( xTicksToWait > ( TickType_t ) 0 )
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00b      	beq.n	800699a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006982:	2101      	movs	r1, #1
 8006984:	6838      	ldr	r0, [r7, #0]
 8006986:	f000 f91f 	bl	8006bc8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800698a:	4b1c      	ldr	r3, [pc, #112]	; (80069fc <xTaskNotifyWait+0xbc>)
 800698c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006990:	601a      	str	r2, [r3, #0]
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800699a:	f000 fe43 	bl	8007624 <vPortExitCritical>

		taskENTER_CRITICAL();
 800699e:	f000 fe11 	bl	80075c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d005      	beq.n	80069b4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80069a8:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <xTaskNotifyWait+0xb8>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80069b4:	4b10      	ldr	r3, [pc, #64]	; (80069f8 <xTaskNotifyWait+0xb8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d002      	beq.n	80069c8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80069c2:	2300      	movs	r3, #0
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	e00a      	b.n	80069de <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80069c8:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <xTaskNotifyWait+0xb8>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	43d2      	mvns	r2, r2
 80069d4:	400a      	ands	r2, r1
 80069d6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				xReturn = pdTRUE;
 80069da:	2301      	movs	r3, #1
 80069dc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80069de:	4b06      	ldr	r3, [pc, #24]	; (80069f8 <xTaskNotifyWait+0xb8>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
		}
		taskEXIT_CRITICAL();
 80069e8:	f000 fe1c 	bl	8007624 <vPortExitCritical>

		return xReturn;
 80069ec:	697b      	ldr	r3, [r7, #20]
	}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20000170 	.word	0x20000170
 80069fc:	e000ed04 	.word	0xe000ed04

08006a00 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b08a      	sub	sp, #40	; 0x28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	603b      	str	r3, [r7, #0]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8006a10:	2301      	movs	r3, #1
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <xTaskGenericNotify+0x30>
	__asm volatile
 8006a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1e:	f383 8811 	msr	BASEPRI, r3
 8006a22:	f3bf 8f6f 	isb	sy
 8006a26:	f3bf 8f4f 	dsb	sy
 8006a2a:	61bb      	str	r3, [r7, #24]
}
 8006a2c:	bf00      	nop
 8006a2e:	e7fe      	b.n	8006a2e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006a34:	f000 fdc6 	bl	80075c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006a4e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	2202      	movs	r2, #2
 8006a54:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac

			switch( eAction )
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d82d      	bhi.n	8006aba <xTaskGenericNotify+0xba>
 8006a5e:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <xTaskGenericNotify+0x64>)
 8006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a64:	08006add 	.word	0x08006add
 8006a68:	08006a79 	.word	0x08006a79
 8006a6c:	08006a8b 	.word	0x08006a8b
 8006a70:	08006a9b 	.word	0x08006a9b
 8006a74:	08006aa5 	.word	0x08006aa5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	431a      	orrs	r2, r3
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8006a88:	e02b      	b.n	8006ae2 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006a90:	1c5a      	adds	r2, r3, #1
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8006a98:	e023      	b.n	8006ae2 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	68ba      	ldr	r2, [r7, #8]
 8006a9e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					break;
 8006aa2:	e01e      	b.n	8006ae2 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006aa4:	7ffb      	ldrb	r3, [r7, #31]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d004      	beq.n	8006ab4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006ab2:	e016      	b.n	8006ae2 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8006ab8:	e013      	b.n	8006ae2 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac4:	d00c      	beq.n	8006ae0 <xTaskGenericNotify+0xe0>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	617b      	str	r3, [r7, #20]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <xTaskGenericNotify+0xda>
					break;
 8006adc:	bf00      	nop
 8006ade:	e000      	b.n	8006ae2 <xTaskGenericNotify+0xe2>

					break;
 8006ae0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006ae2:	7ffb      	ldrb	r3, [r7, #31]
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d139      	bne.n	8006b5c <xTaskGenericNotify+0x15c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7fd fa97 	bl	8004020 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006af2:	6a3b      	ldr	r3, [r7, #32]
 8006af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af6:	2201      	movs	r2, #1
 8006af8:	409a      	lsls	r2, r3
 8006afa:	4b1c      	ldr	r3, [pc, #112]	; (8006b6c <xTaskGenericNotify+0x16c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	4a1a      	ldr	r2, [pc, #104]	; (8006b6c <xTaskGenericNotify+0x16c>)
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b08:	4613      	mov	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4a17      	ldr	r2, [pc, #92]	; (8006b70 <xTaskGenericNotify+0x170>)
 8006b12:	441a      	add	r2, r3
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	3304      	adds	r3, #4
 8006b18:	4619      	mov	r1, r3
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	f7fd fa23 	bl	8003f66 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006b20:	6a3b      	ldr	r3, [r7, #32]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d00a      	beq.n	8006b3e <xTaskGenericNotify+0x13e>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	613b      	str	r3, [r7, #16]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xTaskGenericNotify+0x13c>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b3e:	6a3b      	ldr	r3, [r7, #32]
 8006b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b42:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <xTaskGenericNotify+0x174>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d907      	bls.n	8006b5c <xTaskGenericNotify+0x15c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	; (8006b78 <xTaskGenericNotify+0x178>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006b5c:	f000 fd62 	bl	8007624 <vPortExitCritical>

		return xReturn;
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3728      	adds	r7, #40	; 0x28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	20000458 	.word	0x20000458
 8006b70:	20000174 	.word	0x20000174
 8006b74:	20000170 	.word	0x20000170
 8006b78:	e000ed04 	.word	0xe000ed04

08006b7c <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d102      	bne.n	8006b90 <xTaskNotifyStateClear+0x14>
 8006b8a:	4b0e      	ldr	r3, [pc, #56]	; (8006bc4 <xTaskNotifyStateClear+0x48>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	e000      	b.n	8006b92 <xTaskNotifyStateClear+0x16>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8006b94:	f000 fd16 	bl	80075c4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d106      	bne.n	8006bb2 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
				xReturn = pdPASS;
 8006bac:	2301      	movs	r3, #1
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e001      	b.n	8006bb6 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8006bb6:	f000 fd35 	bl	8007624 <vPortExitCritical>

		return xReturn;
 8006bba:	68fb      	ldr	r3, [r7, #12]
	}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	20000170 	.word	0x20000170

08006bc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006bd2:	4b29      	ldr	r3, [pc, #164]	; (8006c78 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bd8:	4b28      	ldr	r3, [pc, #160]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3304      	adds	r3, #4
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fd fa1e 	bl	8004020 <uxListRemove>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006bea:	4b24      	ldr	r3, [pc, #144]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf6:	43da      	mvns	r2, r3
 8006bf8:	4b21      	ldr	r3, [pc, #132]	; (8006c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	4a20      	ldr	r2, [pc, #128]	; (8006c80 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006c00:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c08:	d10a      	bne.n	8006c20 <prvAddCurrentTaskToDelayedList+0x58>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d007      	beq.n	8006c20 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c10:	4b1a      	ldr	r3, [pc, #104]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3304      	adds	r3, #4
 8006c16:	4619      	mov	r1, r3
 8006c18:	481a      	ldr	r0, [pc, #104]	; (8006c84 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006c1a:	f7fd f9a4 	bl	8003f66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c1e:	e026      	b.n	8006c6e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4413      	add	r3, r2
 8006c26:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c28:	4b14      	ldr	r3, [pc, #80]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d209      	bcs.n	8006c4c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c38:	4b13      	ldr	r3, [pc, #76]	; (8006c88 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	4b0f      	ldr	r3, [pc, #60]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3304      	adds	r3, #4
 8006c42:	4619      	mov	r1, r3
 8006c44:	4610      	mov	r0, r2
 8006c46:	f7fd f9b2 	bl	8003fae <vListInsert>
}
 8006c4a:	e010      	b.n	8006c6e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c4c:	4b0f      	ldr	r3, [pc, #60]	; (8006c8c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	3304      	adds	r3, #4
 8006c56:	4619      	mov	r1, r3
 8006c58:	4610      	mov	r0, r2
 8006c5a:	f7fd f9a8 	bl	8003fae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	; (8006c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d202      	bcs.n	8006c6e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006c68:	4a09      	ldr	r2, [pc, #36]	; (8006c90 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6013      	str	r3, [r2, #0]
}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000454 	.word	0x20000454
 8006c7c:	20000170 	.word	0x20000170
 8006c80:	20000458 	.word	0x20000458
 8006c84:	2000043c 	.word	0x2000043c
 8006c88:	2000040c 	.word	0x2000040c
 8006c8c:	20000408 	.word	0x20000408
 8006c90:	20000470 	.word	0x20000470

08006c94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c9e:	f000 fb31 	bl	8007304 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ca2:	4b11      	ldr	r3, [pc, #68]	; (8006ce8 <xTimerCreateTimerTask+0x54>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00b      	beq.n	8006cc2 <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8006caa:	4b10      	ldr	r3, [pc, #64]	; (8006cec <xTimerCreateTimerTask+0x58>)
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	2302      	movs	r3, #2
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cb8:	490d      	ldr	r1, [pc, #52]	; (8006cf0 <xTimerCreateTimerTask+0x5c>)
 8006cba:	480e      	ldr	r0, [pc, #56]	; (8006cf4 <xTimerCreateTimerTask+0x60>)
 8006cbc:	f7fe fbec 	bl	8005498 <xTaskCreate>
 8006cc0:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <xTimerCreateTimerTask+0x4a>
	__asm volatile
 8006cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ccc:	f383 8811 	msr	BASEPRI, r3
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	603b      	str	r3, [r7, #0]
}
 8006cda:	bf00      	nop
 8006cdc:	e7fe      	b.n	8006cdc <xTimerCreateTimerTask+0x48>
	return xReturn;
 8006cde:	687b      	ldr	r3, [r7, #4]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	200004b4 	.word	0x200004b4
 8006cec:	200004b8 	.word	0x200004b8
 8006cf0:	0800868c 	.word	0x0800868c
 8006cf4:	08006ee5 	.word	0x08006ee5

08006cf8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	607a      	str	r2, [r7, #4]
 8006d04:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006d06:	202c      	movs	r0, #44	; 0x2c
 8006d08:	f000 fd7e 	bl	8007808 <pvPortMalloc>
 8006d0c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006d0e:	697b      	ldr	r3, [r7, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00d      	beq.n	8006d30 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	9301      	str	r3, [sp, #4]
 8006d20:	6a3b      	ldr	r3, [r7, #32]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	68b9      	ldr	r1, [r7, #8]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f000 f805 	bl	8006d3a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006d30:	697b      	ldr	r3, [r7, #20]
	}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b086      	sub	sp, #24
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	617b      	str	r3, [r7, #20]
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01e      	beq.n	8006da8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006d6a:	f000 facb 	bl	8007304 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	6a3a      	ldr	r2, [r7, #32]
 8006d84:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d88:	3304      	adds	r3, #4
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fd f8de 	bl	8003f4c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d008      	beq.n	8006da8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d9c:	f043 0304 	orr.w	r3, r3, #4
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006da8:	bf00      	nop
 8006daa:	3718      	adds	r7, #24
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b08a      	sub	sp, #40	; 0x28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d10a      	bne.n	8006dde <xTimerGenericCommand+0x2e>
	__asm volatile
 8006dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dcc:	f383 8811 	msr	BASEPRI, r3
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	f3bf 8f4f 	dsb	sy
 8006dd8:	623b      	str	r3, [r7, #32]
}
 8006dda:	bf00      	nop
 8006ddc:	e7fe      	b.n	8006ddc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dde:	4b1a      	ldr	r3, [pc, #104]	; (8006e48 <xTimerGenericCommand+0x98>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d02a      	beq.n	8006e3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b05      	cmp	r3, #5
 8006df6:	dc18      	bgt.n	8006e2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006df8:	f7ff fb2a 	bl	8006450 <xTaskGetSchedulerState>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d109      	bne.n	8006e16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006e02:	4b11      	ldr	r3, [pc, #68]	; (8006e48 <xTimerGenericCommand+0x98>)
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	f107 0114 	add.w	r1, r7, #20
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0e:	f7fd fa25 	bl	800425c <xQueueGenericSend>
 8006e12:	6278      	str	r0, [r7, #36]	; 0x24
 8006e14:	e012      	b.n	8006e3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006e16:	4b0c      	ldr	r3, [pc, #48]	; (8006e48 <xTimerGenericCommand+0x98>)
 8006e18:	6818      	ldr	r0, [r3, #0]
 8006e1a:	f107 0114 	add.w	r1, r7, #20
 8006e1e:	2300      	movs	r3, #0
 8006e20:	2200      	movs	r2, #0
 8006e22:	f7fd fa1b 	bl	800425c <xQueueGenericSend>
 8006e26:	6278      	str	r0, [r7, #36]	; 0x24
 8006e28:	e008      	b.n	8006e3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e2a:	4b07      	ldr	r3, [pc, #28]	; (8006e48 <xTimerGenericCommand+0x98>)
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	f107 0114 	add.w	r1, r7, #20
 8006e32:	2300      	movs	r3, #0
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	f7fd fb0f 	bl	8004458 <xQueueGenericSendFromISR>
 8006e3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3728      	adds	r7, #40	; 0x28
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	200004b4 	.word	0x200004b4

08006e4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b088      	sub	sp, #32
 8006e50:	af02      	add	r7, sp, #8
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e56:	4b22      	ldr	r3, [pc, #136]	; (8006ee0 <prvProcessExpiredTimer+0x94>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	3304      	adds	r3, #4
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fd f8db 	bl	8004020 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d022      	beq.n	8006ebe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	699a      	ldr	r2, [r3, #24]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	18d1      	adds	r1, r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	6978      	ldr	r0, [r7, #20]
 8006e86:	f000 f8d1 	bl	800702c <prvInsertTimerInActiveList>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01f      	beq.n	8006ed0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e90:	2300      	movs	r3, #0
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	2300      	movs	r3, #0
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	2100      	movs	r1, #0
 8006e9a:	6978      	ldr	r0, [r7, #20]
 8006e9c:	f7ff ff88 	bl	8006db0 <xTimerGenericCommand>
 8006ea0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d113      	bne.n	8006ed0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eac:	f383 8811 	msr	BASEPRI, r3
 8006eb0:	f3bf 8f6f 	isb	sy
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	60fb      	str	r3, [r7, #12]
}
 8006eba:	bf00      	nop
 8006ebc:	e7fe      	b.n	8006ebc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	b2da      	uxtb	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	6a1b      	ldr	r3, [r3, #32]
 8006ed4:	6978      	ldr	r0, [r7, #20]
 8006ed6:	4798      	blx	r3
}
 8006ed8:	bf00      	nop
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	200004ac 	.word	0x200004ac

08006ee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eec:	f107 0308 	add.w	r3, r7, #8
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 f857 	bl	8006fa4 <prvGetNextExpireTime>
 8006ef6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4619      	mov	r1, r3
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f000 f803 	bl	8006f08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006f02:	f000 f8d5 	bl	80070b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006f06:	e7f1      	b.n	8006eec <prvTimerTask+0x8>

08006f08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006f12:	f7fe fd0f 	bl	8005934 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f16:	f107 0308 	add.w	r3, r7, #8
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 f866 	bl	8006fec <prvSampleTimeNow>
 8006f20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d130      	bne.n	8006f8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10a      	bne.n	8006f44 <prvProcessTimerOrBlockTask+0x3c>
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d806      	bhi.n	8006f44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f36:	f7fe fd0b 	bl	8005950 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f3a:	68f9      	ldr	r1, [r7, #12]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7ff ff85 	bl	8006e4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f42:	e024      	b.n	8006f8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d008      	beq.n	8006f5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f4a:	4b13      	ldr	r3, [pc, #76]	; (8006f98 <prvProcessTimerOrBlockTask+0x90>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <prvProcessTimerOrBlockTask+0x50>
 8006f54:	2301      	movs	r3, #1
 8006f56:	e000      	b.n	8006f5a <prvProcessTimerOrBlockTask+0x52>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f5c:	4b0f      	ldr	r3, [pc, #60]	; (8006f9c <prvProcessTimerOrBlockTask+0x94>)
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	1ad3      	subs	r3, r2, r3
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	4619      	mov	r1, r3
 8006f6a:	f7fd fedb 	bl	8004d24 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f6e:	f7fe fcef 	bl	8005950 <xTaskResumeAll>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10a      	bne.n	8006f8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f78:	4b09      	ldr	r3, [pc, #36]	; (8006fa0 <prvProcessTimerOrBlockTask+0x98>)
 8006f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	f3bf 8f6f 	isb	sy
}
 8006f88:	e001      	b.n	8006f8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f8a:	f7fe fce1 	bl	8005950 <xTaskResumeAll>
}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	200004b0 	.word	0x200004b0
 8006f9c:	200004b4 	.word	0x200004b4
 8006fa0:	e000ed04 	.word	0xe000ed04

08006fa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006fac:	4b0e      	ldr	r3, [pc, #56]	; (8006fe8 <prvGetNextExpireTime+0x44>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <prvGetNextExpireTime+0x16>
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	e000      	b.n	8006fbc <prvGetNextExpireTime+0x18>
 8006fba:	2200      	movs	r2, #0
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d105      	bne.n	8006fd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fc8:	4b07      	ldr	r3, [pc, #28]	; (8006fe8 <prvGetNextExpireTime+0x44>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	e001      	b.n	8006fd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	200004ac 	.word	0x200004ac

08006fec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ff4:	f7fe fd48 	bl	8005a88 <xTaskGetTickCount>
 8006ff8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ffa:	4b0b      	ldr	r3, [pc, #44]	; (8007028 <prvSampleTimeNow+0x3c>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	429a      	cmp	r2, r3
 8007002:	d205      	bcs.n	8007010 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007004:	f000 f91a 	bl	800723c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e002      	b.n	8007016 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007016:	4a04      	ldr	r2, [pc, #16]	; (8007028 <prvSampleTimeNow+0x3c>)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800701c:	68fb      	ldr	r3, [r7, #12]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	200004bc 	.word	0x200004bc

0800702c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800703a:	2300      	movs	r3, #0
 800703c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	429a      	cmp	r2, r3
 8007050:	d812      	bhi.n	8007078 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	1ad2      	subs	r2, r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	699b      	ldr	r3, [r3, #24]
 800705c:	429a      	cmp	r2, r3
 800705e:	d302      	bcc.n	8007066 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007060:	2301      	movs	r3, #1
 8007062:	617b      	str	r3, [r7, #20]
 8007064:	e01b      	b.n	800709e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007066:	4b10      	ldr	r3, [pc, #64]	; (80070a8 <prvInsertTimerInActiveList+0x7c>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	3304      	adds	r3, #4
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f7fc ff9c 	bl	8003fae <vListInsert>
 8007076:	e012      	b.n	800709e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	429a      	cmp	r2, r3
 800707e:	d206      	bcs.n	800708e <prvInsertTimerInActiveList+0x62>
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d302      	bcc.n	800708e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007088:	2301      	movs	r3, #1
 800708a:	617b      	str	r3, [r7, #20]
 800708c:	e007      	b.n	800709e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800708e:	4b07      	ldr	r3, [pc, #28]	; (80070ac <prvInsertTimerInActiveList+0x80>)
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f7fc ff88 	bl	8003fae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800709e:	697b      	ldr	r3, [r7, #20]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	200004b0 	.word	0x200004b0
 80070ac:	200004ac 	.word	0x200004ac

080070b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b08c      	sub	sp, #48	; 0x30
 80070b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070b6:	e0ae      	b.n	8007216 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f2c0 80ab 	blt.w	8007216 <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	695b      	ldr	r3, [r3, #20]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d004      	beq.n	80070d6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ce:	3304      	adds	r3, #4
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7fc ffa5 	bl	8004020 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070d6:	1d3b      	adds	r3, r7, #4
 80070d8:	4618      	mov	r0, r3
 80070da:	f7ff ff87 	bl	8006fec <prvSampleTimeNow>
 80070de:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b09      	cmp	r3, #9
 80070e4:	f200 8096 	bhi.w	8007214 <prvProcessReceivedCommands+0x164>
 80070e8:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <prvProcessReceivedCommands+0x40>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	08007119 	.word	0x08007119
 80070f4:	08007119 	.word	0x08007119
 80070f8:	08007119 	.word	0x08007119
 80070fc:	0800718d 	.word	0x0800718d
 8007100:	080071a1 	.word	0x080071a1
 8007104:	080071eb 	.word	0x080071eb
 8007108:	08007119 	.word	0x08007119
 800710c:	08007119 	.word	0x08007119
 8007110:	0800718d 	.word	0x0800718d
 8007114:	080071a1 	.word	0x080071a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	b2da      	uxtb	r2, r3
 8007124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	18d1      	adds	r1, r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a3a      	ldr	r2, [r7, #32]
 8007136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007138:	f7ff ff78 	bl	800702c <prvInsertTimerInActiveList>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d069      	beq.n	8007216 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007148:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d05e      	beq.n	8007216 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	699b      	ldr	r3, [r3, #24]
 800715e:	441a      	add	r2, r3
 8007160:	2300      	movs	r3, #0
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	2300      	movs	r3, #0
 8007166:	2100      	movs	r1, #0
 8007168:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800716a:	f7ff fe21 	bl	8006db0 <xTimerGenericCommand>
 800716e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d14f      	bne.n	8007216 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	61bb      	str	r3, [r7, #24]
}
 8007188:	bf00      	nop
 800718a:	e7fe      	b.n	800718a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800718c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800718e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007192:	f023 0301 	bic.w	r3, r3, #1
 8007196:	b2da      	uxtb	r2, r3
 8007198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800719e:	e03a      	b.n	8007216 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071a6:	f043 0301 	orr.w	r3, r3, #1
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d10a      	bne.n	80071d6 <prvProcessReceivedCommands+0x126>
	__asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	617b      	str	r3, [r7, #20]
}
 80071d2:	bf00      	nop
 80071d4:	e7fe      	b.n	80071d4 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	699a      	ldr	r2, [r3, #24]
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	18d1      	adds	r1, r2, r3
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	6a3a      	ldr	r2, [r7, #32]
 80071e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071e4:	f7ff ff22 	bl	800702c <prvInsertTimerInActiveList>
					break;
 80071e8:	e015      	b.n	8007216 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80071ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d103      	bne.n	8007200 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80071f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071fa:	f000 fbd1 	bl	80079a0 <vPortFree>
 80071fe:	e00a      	b.n	8007216 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007206:	f023 0301 	bic.w	r3, r3, #1
 800720a:	b2da      	uxtb	r2, r3
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007212:	e000      	b.n	8007216 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8007214:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007216:	4b08      	ldr	r3, [pc, #32]	; (8007238 <prvProcessReceivedCommands+0x188>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f107 0108 	add.w	r1, r7, #8
 800721e:	2200      	movs	r2, #0
 8007220:	4618      	mov	r0, r3
 8007222:	f7fd fa41 	bl	80046a8 <xQueueReceive>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	f47f af45 	bne.w	80070b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800722e:	bf00      	nop
 8007230:	bf00      	nop
 8007232:	3728      	adds	r7, #40	; 0x28
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	200004b4 	.word	0x200004b4

0800723c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007242:	e048      	b.n	80072d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007244:	4b2d      	ldr	r3, [pc, #180]	; (80072fc <prvSwitchTimerLists+0xc0>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800724e:	4b2b      	ldr	r3, [pc, #172]	; (80072fc <prvSwitchTimerLists+0xc0>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	3304      	adds	r3, #4
 800725c:	4618      	mov	r0, r3
 800725e:	f7fc fedf 	bl	8004020 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007270:	f003 0304 	and.w	r3, r3, #4
 8007274:	2b00      	cmp	r3, #0
 8007276:	d02e      	beq.n	80072d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	693a      	ldr	r2, [r7, #16]
 800727e:	4413      	add	r3, r2
 8007280:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007282:	68ba      	ldr	r2, [r7, #8]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	429a      	cmp	r2, r3
 8007288:	d90e      	bls.n	80072a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007296:	4b19      	ldr	r3, [pc, #100]	; (80072fc <prvSwitchTimerLists+0xc0>)
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f7fc fe84 	bl	8003fae <vListInsert>
 80072a6:	e016      	b.n	80072d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072a8:	2300      	movs	r3, #0
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	2300      	movs	r3, #0
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	2100      	movs	r1, #0
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7ff fd7c 	bl	8006db0 <xTimerGenericCommand>
 80072b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10a      	bne.n	80072d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80072c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c4:	f383 8811 	msr	BASEPRI, r3
 80072c8:	f3bf 8f6f 	isb	sy
 80072cc:	f3bf 8f4f 	dsb	sy
 80072d0:	603b      	str	r3, [r7, #0]
}
 80072d2:	bf00      	nop
 80072d4:	e7fe      	b.n	80072d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072d6:	4b09      	ldr	r3, [pc, #36]	; (80072fc <prvSwitchTimerLists+0xc0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1b1      	bne.n	8007244 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072e0:	4b06      	ldr	r3, [pc, #24]	; (80072fc <prvSwitchTimerLists+0xc0>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <prvSwitchTimerLists+0xc4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a04      	ldr	r2, [pc, #16]	; (80072fc <prvSwitchTimerLists+0xc0>)
 80072ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072ee:	4a04      	ldr	r2, [pc, #16]	; (8007300 <prvSwitchTimerLists+0xc4>)
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	6013      	str	r3, [r2, #0]
}
 80072f4:	bf00      	nop
 80072f6:	3718      	adds	r7, #24
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	200004ac 	.word	0x200004ac
 8007300:	200004b0 	.word	0x200004b0

08007304 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007308:	f000 f95c 	bl	80075c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800730c:	4b12      	ldr	r3, [pc, #72]	; (8007358 <prvCheckForValidListAndQueue+0x54>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d11d      	bne.n	8007350 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8007314:	4811      	ldr	r0, [pc, #68]	; (800735c <prvCheckForValidListAndQueue+0x58>)
 8007316:	f7fc fdf9 	bl	8003f0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800731a:	4811      	ldr	r0, [pc, #68]	; (8007360 <prvCheckForValidListAndQueue+0x5c>)
 800731c:	f7fc fdf6 	bl	8003f0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007320:	4b10      	ldr	r3, [pc, #64]	; (8007364 <prvCheckForValidListAndQueue+0x60>)
 8007322:	4a0e      	ldr	r2, [pc, #56]	; (800735c <prvCheckForValidListAndQueue+0x58>)
 8007324:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007326:	4b10      	ldr	r3, [pc, #64]	; (8007368 <prvCheckForValidListAndQueue+0x64>)
 8007328:	4a0d      	ldr	r2, [pc, #52]	; (8007360 <prvCheckForValidListAndQueue+0x5c>)
 800732a:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800732c:	2200      	movs	r2, #0
 800732e:	210c      	movs	r1, #12
 8007330:	200a      	movs	r0, #10
 8007332:	f7fc ff07 	bl	8004144 <xQueueGenericCreate>
 8007336:	4603      	mov	r3, r0
 8007338:	4a07      	ldr	r2, [pc, #28]	; (8007358 <prvCheckForValidListAndQueue+0x54>)
 800733a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800733c:	4b06      	ldr	r3, [pc, #24]	; (8007358 <prvCheckForValidListAndQueue+0x54>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d005      	beq.n	8007350 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007344:	4b04      	ldr	r3, [pc, #16]	; (8007358 <prvCheckForValidListAndQueue+0x54>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4908      	ldr	r1, [pc, #32]	; (800736c <prvCheckForValidListAndQueue+0x68>)
 800734a:	4618      	mov	r0, r3
 800734c:	f7fd fcc0 	bl	8004cd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007350:	f000 f968 	bl	8007624 <vPortExitCritical>
}
 8007354:	bf00      	nop
 8007356:	bd80      	pop	{r7, pc}
 8007358:	200004b4 	.word	0x200004b4
 800735c:	20000484 	.word	0x20000484
 8007360:	20000498 	.word	0x20000498
 8007364:	200004ac 	.word	0x200004ac
 8007368:	200004b0 	.word	0x200004b0
 800736c:	08008694 	.word	0x08008694

08007370 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	3b04      	subs	r3, #4
 8007380:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	3b04      	subs	r3, #4
 800738e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f023 0201 	bic.w	r2, r3, #1
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3b04      	subs	r3, #4
 800739e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073a0:	4a0c      	ldr	r2, [pc, #48]	; (80073d4 <pxPortInitialiseStack+0x64>)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3b14      	subs	r3, #20
 80073aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3b04      	subs	r3, #4
 80073b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f06f 0202 	mvn.w	r2, #2
 80073be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	3b20      	subs	r3, #32
 80073c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073c6:	68fb      	ldr	r3, [r7, #12]
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	080073d9 	.word	0x080073d9

080073d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073de:	2300      	movs	r3, #0
 80073e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073e2:	4b12      	ldr	r3, [pc, #72]	; (800742c <prvTaskExitError+0x54>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ea:	d00a      	beq.n	8007402 <prvTaskExitError+0x2a>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	60fb      	str	r3, [r7, #12]
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <prvTaskExitError+0x28>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	60bb      	str	r3, [r7, #8]
}
 8007414:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007416:	bf00      	nop
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0fc      	beq.n	8007418 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800741e:	bf00      	nop
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	2000000c 	.word	0x2000000c

08007430 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007430:	4b07      	ldr	r3, [pc, #28]	; (8007450 <pxCurrentTCBConst2>)
 8007432:	6819      	ldr	r1, [r3, #0]
 8007434:	6808      	ldr	r0, [r1, #0]
 8007436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743a:	f380 8809 	msr	PSP, r0
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f04f 0000 	mov.w	r0, #0
 8007446:	f380 8811 	msr	BASEPRI, r0
 800744a:	4770      	bx	lr
 800744c:	f3af 8000 	nop.w

08007450 <pxCurrentTCBConst2>:
 8007450:	20000170 	.word	0x20000170
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop

08007458 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007458:	4808      	ldr	r0, [pc, #32]	; (800747c <prvPortStartFirstTask+0x24>)
 800745a:	6800      	ldr	r0, [r0, #0]
 800745c:	6800      	ldr	r0, [r0, #0]
 800745e:	f380 8808 	msr	MSP, r0
 8007462:	f04f 0000 	mov.w	r0, #0
 8007466:	f380 8814 	msr	CONTROL, r0
 800746a:	b662      	cpsie	i
 800746c:	b661      	cpsie	f
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	df00      	svc	0
 8007478:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800747a:	bf00      	nop
 800747c:	e000ed08 	.word	0xe000ed08

08007480 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b086      	sub	sp, #24
 8007484:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007486:	4b46      	ldr	r3, [pc, #280]	; (80075a0 <xPortStartScheduler+0x120>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a46      	ldr	r2, [pc, #280]	; (80075a4 <xPortStartScheduler+0x124>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d10a      	bne.n	80074a6 <xPortStartScheduler+0x26>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	613b      	str	r3, [r7, #16]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074a6:	4b3e      	ldr	r3, [pc, #248]	; (80075a0 <xPortStartScheduler+0x120>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a3f      	ldr	r2, [pc, #252]	; (80075a8 <xPortStartScheduler+0x128>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d10a      	bne.n	80074c6 <xPortStartScheduler+0x46>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	60fb      	str	r3, [r7, #12]
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074c6:	4b39      	ldr	r3, [pc, #228]	; (80075ac <xPortStartScheduler+0x12c>)
 80074c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	22ff      	movs	r2, #255	; 0xff
 80074d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	4b31      	ldr	r3, [pc, #196]	; (80075b0 <xPortStartScheduler+0x130>)
 80074ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074ee:	4b31      	ldr	r3, [pc, #196]	; (80075b4 <xPortStartScheduler+0x134>)
 80074f0:	2207      	movs	r2, #7
 80074f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074f4:	e009      	b.n	800750a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074f6:	4b2f      	ldr	r3, [pc, #188]	; (80075b4 <xPortStartScheduler+0x134>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	3b01      	subs	r3, #1
 80074fc:	4a2d      	ldr	r2, [pc, #180]	; (80075b4 <xPortStartScheduler+0x134>)
 80074fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	b2db      	uxtb	r3, r3
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	b2db      	uxtb	r3, r3
 8007508:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800750a:	78fb      	ldrb	r3, [r7, #3]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007512:	2b80      	cmp	r3, #128	; 0x80
 8007514:	d0ef      	beq.n	80074f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007516:	4b27      	ldr	r3, [pc, #156]	; (80075b4 <xPortStartScheduler+0x134>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f1c3 0307 	rsb	r3, r3, #7
 800751e:	2b04      	cmp	r3, #4
 8007520:	d00a      	beq.n	8007538 <xPortStartScheduler+0xb8>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	60bb      	str	r3, [r7, #8]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007538:	4b1e      	ldr	r3, [pc, #120]	; (80075b4 <xPortStartScheduler+0x134>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	4a1d      	ldr	r2, [pc, #116]	; (80075b4 <xPortStartScheduler+0x134>)
 8007540:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007542:	4b1c      	ldr	r3, [pc, #112]	; (80075b4 <xPortStartScheduler+0x134>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800754a:	4a1a      	ldr	r2, [pc, #104]	; (80075b4 <xPortStartScheduler+0x134>)
 800754c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	b2da      	uxtb	r2, r3
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007556:	4b18      	ldr	r3, [pc, #96]	; (80075b8 <xPortStartScheduler+0x138>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a17      	ldr	r2, [pc, #92]	; (80075b8 <xPortStartScheduler+0x138>)
 800755c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007560:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007562:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <xPortStartScheduler+0x138>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a14      	ldr	r2, [pc, #80]	; (80075b8 <xPortStartScheduler+0x138>)
 8007568:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800756c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800756e:	f000 f8dd 	bl	800772c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007572:	4b12      	ldr	r3, [pc, #72]	; (80075bc <xPortStartScheduler+0x13c>)
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007578:	f000 f8fc 	bl	8007774 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800757c:	4b10      	ldr	r3, [pc, #64]	; (80075c0 <xPortStartScheduler+0x140>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a0f      	ldr	r2, [pc, #60]	; (80075c0 <xPortStartScheduler+0x140>)
 8007582:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007586:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007588:	f7ff ff66 	bl	8007458 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800758c:	f7fe fbe6 	bl	8005d5c <vTaskSwitchContext>
	prvTaskExitError();
 8007590:	f7ff ff22 	bl	80073d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007594:	2300      	movs	r3, #0
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	e000ed00 	.word	0xe000ed00
 80075a4:	410fc271 	.word	0x410fc271
 80075a8:	410fc270 	.word	0x410fc270
 80075ac:	e000e400 	.word	0xe000e400
 80075b0:	200004c0 	.word	0x200004c0
 80075b4:	200004c4 	.word	0x200004c4
 80075b8:	e000ed20 	.word	0xe000ed20
 80075bc:	2000000c 	.word	0x2000000c
 80075c0:	e000ef34 	.word	0xe000ef34

080075c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	607b      	str	r3, [r7, #4]
}
 80075dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075de:	4b0f      	ldr	r3, [pc, #60]	; (800761c <vPortEnterCritical+0x58>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3301      	adds	r3, #1
 80075e4:	4a0d      	ldr	r2, [pc, #52]	; (800761c <vPortEnterCritical+0x58>)
 80075e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075e8:	4b0c      	ldr	r3, [pc, #48]	; (800761c <vPortEnterCritical+0x58>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d10f      	bne.n	8007610 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <vPortEnterCritical+0x5c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00a      	beq.n	8007610 <vPortEnterCritical+0x4c>
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	603b      	str	r3, [r7, #0]
}
 800760c:	bf00      	nop
 800760e:	e7fe      	b.n	800760e <vPortEnterCritical+0x4a>
	}
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	2000000c 	.word	0x2000000c
 8007620:	e000ed04 	.word	0xe000ed04

08007624 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800762a:	4b12      	ldr	r3, [pc, #72]	; (8007674 <vPortExitCritical+0x50>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <vPortExitCritical+0x24>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	607b      	str	r3, [r7, #4]
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007648:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <vPortExitCritical+0x50>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3b01      	subs	r3, #1
 800764e:	4a09      	ldr	r2, [pc, #36]	; (8007674 <vPortExitCritical+0x50>)
 8007650:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007652:	4b08      	ldr	r3, [pc, #32]	; (8007674 <vPortExitCritical+0x50>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d105      	bne.n	8007666 <vPortExitCritical+0x42>
 800765a:	2300      	movs	r3, #0
 800765c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	f383 8811 	msr	BASEPRI, r3
}
 8007664:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	2000000c 	.word	0x2000000c
	...

08007680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007680:	f3ef 8009 	mrs	r0, PSP
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	4b15      	ldr	r3, [pc, #84]	; (80076e0 <pxCurrentTCBConst>)
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	f01e 0f10 	tst.w	lr, #16
 8007690:	bf08      	it	eq
 8007692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800769a:	6010      	str	r0, [r2, #0]
 800769c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076a4:	f380 8811 	msr	BASEPRI, r0
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	f3bf 8f6f 	isb	sy
 80076b0:	f7fe fb54 	bl	8005d5c <vTaskSwitchContext>
 80076b4:	f04f 0000 	mov.w	r0, #0
 80076b8:	f380 8811 	msr	BASEPRI, r0
 80076bc:	bc09      	pop	{r0, r3}
 80076be:	6819      	ldr	r1, [r3, #0]
 80076c0:	6808      	ldr	r0, [r1, #0]
 80076c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c6:	f01e 0f10 	tst.w	lr, #16
 80076ca:	bf08      	it	eq
 80076cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076d0:	f380 8809 	msr	PSP, r0
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	f3af 8000 	nop.w

080076e0 <pxCurrentTCBConst>:
 80076e0:	20000170 	.word	0x20000170
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076e4:	bf00      	nop
 80076e6:	bf00      	nop

080076e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b082      	sub	sp, #8
 80076ec:	af00      	add	r7, sp, #0
	__asm volatile
 80076ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f2:	f383 8811 	msr	BASEPRI, r3
 80076f6:	f3bf 8f6f 	isb	sy
 80076fa:	f3bf 8f4f 	dsb	sy
 80076fe:	607b      	str	r3, [r7, #4]
}
 8007700:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007702:	f7fe fa73 	bl	8005bec <xTaskIncrementTick>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d003      	beq.n	8007714 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800770c:	4b06      	ldr	r3, [pc, #24]	; (8007728 <xPortSysTickHandler+0x40>)
 800770e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	2300      	movs	r3, #0
 8007716:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f383 8811 	msr	BASEPRI, r3
}
 800771e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007720:	bf00      	nop
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	e000ed04 	.word	0xe000ed04

0800772c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007730:	4b0b      	ldr	r3, [pc, #44]	; (8007760 <vPortSetupTimerInterrupt+0x34>)
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007736:	4b0b      	ldr	r3, [pc, #44]	; (8007764 <vPortSetupTimerInterrupt+0x38>)
 8007738:	2200      	movs	r2, #0
 800773a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800773c:	4b0a      	ldr	r3, [pc, #40]	; (8007768 <vPortSetupTimerInterrupt+0x3c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a0a      	ldr	r2, [pc, #40]	; (800776c <vPortSetupTimerInterrupt+0x40>)
 8007742:	fba2 2303 	umull	r2, r3, r2, r3
 8007746:	099b      	lsrs	r3, r3, #6
 8007748:	4a09      	ldr	r2, [pc, #36]	; (8007770 <vPortSetupTimerInterrupt+0x44>)
 800774a:	3b01      	subs	r3, #1
 800774c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800774e:	4b04      	ldr	r3, [pc, #16]	; (8007760 <vPortSetupTimerInterrupt+0x34>)
 8007750:	2207      	movs	r2, #7
 8007752:	601a      	str	r2, [r3, #0]
}
 8007754:	bf00      	nop
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop
 8007760:	e000e010 	.word	0xe000e010
 8007764:	e000e018 	.word	0xe000e018
 8007768:	20000000 	.word	0x20000000
 800776c:	10624dd3 	.word	0x10624dd3
 8007770:	e000e014 	.word	0xe000e014

08007774 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007774:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007784 <vPortEnableVFP+0x10>
 8007778:	6801      	ldr	r1, [r0, #0]
 800777a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800777e:	6001      	str	r1, [r0, #0]
 8007780:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007782:	bf00      	nop
 8007784:	e000ed88 	.word	0xe000ed88

08007788 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800778e:	f3ef 8305 	mrs	r3, IPSR
 8007792:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b0f      	cmp	r3, #15
 8007798:	d914      	bls.n	80077c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800779a:	4a17      	ldr	r2, [pc, #92]	; (80077f8 <vPortValidateInterruptPriority+0x70>)
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	4413      	add	r3, r2
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077a4:	4b15      	ldr	r3, [pc, #84]	; (80077fc <vPortValidateInterruptPriority+0x74>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	7afa      	ldrb	r2, [r7, #11]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d20a      	bcs.n	80077c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	607b      	str	r3, [r7, #4]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077c4:	4b0e      	ldr	r3, [pc, #56]	; (8007800 <vPortValidateInterruptPriority+0x78>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <vPortValidateInterruptPriority+0x7c>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d90a      	bls.n	80077ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80077d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	603b      	str	r3, [r7, #0]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <vPortValidateInterruptPriority+0x60>
	}
 80077ea:	bf00      	nop
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	e000e3f0 	.word	0xe000e3f0
 80077fc:	200004c0 	.word	0x200004c0
 8007800:	e000ed0c 	.word	0xe000ed0c
 8007804:	200004c4 	.word	0x200004c4

08007808 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b08a      	sub	sp, #40	; 0x28
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007814:	f7fe f88e 	bl	8005934 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007818:	4b5b      	ldr	r3, [pc, #364]	; (8007988 <pvPortMalloc+0x180>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007820:	f000 f920 	bl	8007a64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007824:	4b59      	ldr	r3, [pc, #356]	; (800798c <pvPortMalloc+0x184>)
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4013      	ands	r3, r2
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 8093 	bne.w	8007958 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01d      	beq.n	8007874 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007838:	2208      	movs	r2, #8
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4413      	add	r3, r2
 800783e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f003 0307 	and.w	r3, r3, #7
 8007846:	2b00      	cmp	r3, #0
 8007848:	d014      	beq.n	8007874 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f023 0307 	bic.w	r3, r3, #7
 8007850:	3308      	adds	r3, #8
 8007852:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f003 0307 	and.w	r3, r3, #7
 800785a:	2b00      	cmp	r3, #0
 800785c:	d00a      	beq.n	8007874 <pvPortMalloc+0x6c>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	617b      	str	r3, [r7, #20]
}
 8007870:	bf00      	nop
 8007872:	e7fe      	b.n	8007872 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d06e      	beq.n	8007958 <pvPortMalloc+0x150>
 800787a:	4b45      	ldr	r3, [pc, #276]	; (8007990 <pvPortMalloc+0x188>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	429a      	cmp	r2, r3
 8007882:	d869      	bhi.n	8007958 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007884:	4b43      	ldr	r3, [pc, #268]	; (8007994 <pvPortMalloc+0x18c>)
 8007886:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007888:	4b42      	ldr	r3, [pc, #264]	; (8007994 <pvPortMalloc+0x18c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800788e:	e004      	b.n	800789a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800789a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d903      	bls.n	80078ac <pvPortMalloc+0xa4>
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f1      	bne.n	8007890 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078ac:	4b36      	ldr	r3, [pc, #216]	; (8007988 <pvPortMalloc+0x180>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d050      	beq.n	8007958 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2208      	movs	r2, #8
 80078bc:	4413      	add	r3, r2
 80078be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ca:	685a      	ldr	r2, [r3, #4]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	1ad2      	subs	r2, r2, r3
 80078d0:	2308      	movs	r3, #8
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d91f      	bls.n	8007918 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4413      	add	r3, r2
 80078de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00a      	beq.n	8007900 <pvPortMalloc+0xf8>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	613b      	str	r3, [r7, #16]
}
 80078fc:	bf00      	nop
 80078fe:	e7fe      	b.n	80078fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	685a      	ldr	r2, [r3, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	1ad2      	subs	r2, r2, r3
 8007908:	69bb      	ldr	r3, [r7, #24]
 800790a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007912:	69b8      	ldr	r0, [r7, #24]
 8007914:	f000 f908 	bl	8007b28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007918:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <pvPortMalloc+0x188>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	4a1b      	ldr	r2, [pc, #108]	; (8007990 <pvPortMalloc+0x188>)
 8007924:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007926:	4b1a      	ldr	r3, [pc, #104]	; (8007990 <pvPortMalloc+0x188>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4b1b      	ldr	r3, [pc, #108]	; (8007998 <pvPortMalloc+0x190>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	429a      	cmp	r2, r3
 8007930:	d203      	bcs.n	800793a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007932:	4b17      	ldr	r3, [pc, #92]	; (8007990 <pvPortMalloc+0x188>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a18      	ldr	r2, [pc, #96]	; (8007998 <pvPortMalloc+0x190>)
 8007938:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800793a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	4b13      	ldr	r3, [pc, #76]	; (800798c <pvPortMalloc+0x184>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	431a      	orrs	r2, r3
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800794e:	4b13      	ldr	r3, [pc, #76]	; (800799c <pvPortMalloc+0x194>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3301      	adds	r3, #1
 8007954:	4a11      	ldr	r2, [pc, #68]	; (800799c <pvPortMalloc+0x194>)
 8007956:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007958:	f7fd fffa 	bl	8005950 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f003 0307 	and.w	r3, r3, #7
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <pvPortMalloc+0x174>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	60fb      	str	r3, [r7, #12]
}
 8007978:	bf00      	nop
 800797a:	e7fe      	b.n	800797a <pvPortMalloc+0x172>
	return pvReturn;
 800797c:	69fb      	ldr	r3, [r7, #28]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3728      	adds	r7, #40	; 0x28
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	200054d0 	.word	0x200054d0
 800798c:	200054e4 	.word	0x200054e4
 8007990:	200054d4 	.word	0x200054d4
 8007994:	200054c8 	.word	0x200054c8
 8007998:	200054d8 	.word	0x200054d8
 800799c:	200054dc 	.word	0x200054dc

080079a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d04d      	beq.n	8007a4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079b2:	2308      	movs	r3, #8
 80079b4:	425b      	negs	r3, r3
 80079b6:	697a      	ldr	r2, [r7, #20]
 80079b8:	4413      	add	r3, r2
 80079ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <vPortFree+0xb8>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <vPortFree+0x44>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60fb      	str	r3, [r7, #12]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d00a      	beq.n	8007a02 <vPortFree+0x62>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	60bb      	str	r3, [r7, #8]
}
 80079fe:	bf00      	nop
 8007a00:	e7fe      	b.n	8007a00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	4b14      	ldr	r3, [pc, #80]	; (8007a58 <vPortFree+0xb8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4013      	ands	r3, r2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d01e      	beq.n	8007a4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d11a      	bne.n	8007a4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <vPortFree+0xb8>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	43db      	mvns	r3, r3
 8007a22:	401a      	ands	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a28:	f7fd ff84 	bl	8005934 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	4b0a      	ldr	r3, [pc, #40]	; (8007a5c <vPortFree+0xbc>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4413      	add	r3, r2
 8007a36:	4a09      	ldr	r2, [pc, #36]	; (8007a5c <vPortFree+0xbc>)
 8007a38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a3a:	6938      	ldr	r0, [r7, #16]
 8007a3c:	f000 f874 	bl	8007b28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a40:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <vPortFree+0xc0>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	4a06      	ldr	r2, [pc, #24]	; (8007a60 <vPortFree+0xc0>)
 8007a48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a4a:	f7fd ff81 	bl	8005950 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a4e:	bf00      	nop
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	200054e4 	.word	0x200054e4
 8007a5c:	200054d4 	.word	0x200054d4
 8007a60:	200054e0 	.word	0x200054e0

08007a64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a6a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8007a6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a70:	4b27      	ldr	r3, [pc, #156]	; (8007b10 <prvHeapInit+0xac>)
 8007a72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f003 0307 	and.w	r3, r3, #7
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00c      	beq.n	8007a98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3307      	adds	r3, #7
 8007a82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f023 0307 	bic.w	r3, r3, #7
 8007a8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	4a1f      	ldr	r2, [pc, #124]	; (8007b10 <prvHeapInit+0xac>)
 8007a94:	4413      	add	r3, r2
 8007a96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a9c:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <prvHeapInit+0xb0>)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <prvHeapInit+0xb0>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	4413      	add	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 0307 	bic.w	r3, r3, #7
 8007abe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <prvHeapInit+0xb4>)
 8007ac4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ac6:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <prvHeapInit+0xb4>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2200      	movs	r2, #0
 8007acc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ace:	4b12      	ldr	r3, [pc, #72]	; (8007b18 <prvHeapInit+0xb4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	1ad2      	subs	r2, r2, r3
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ae4:	4b0c      	ldr	r3, [pc, #48]	; (8007b18 <prvHeapInit+0xb4>)
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	4a0a      	ldr	r2, [pc, #40]	; (8007b1c <prvHeapInit+0xb8>)
 8007af2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	4a09      	ldr	r2, [pc, #36]	; (8007b20 <prvHeapInit+0xbc>)
 8007afa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007afc:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <prvHeapInit+0xc0>)
 8007afe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b02:	601a      	str	r2, [r3, #0]
}
 8007b04:	bf00      	nop
 8007b06:	3714      	adds	r7, #20
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	200004c8 	.word	0x200004c8
 8007b14:	200054c8 	.word	0x200054c8
 8007b18:	200054d0 	.word	0x200054d0
 8007b1c:	200054d8 	.word	0x200054d8
 8007b20:	200054d4 	.word	0x200054d4
 8007b24:	200054e4 	.word	0x200054e4

08007b28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b30:	4b28      	ldr	r3, [pc, #160]	; (8007bd4 <prvInsertBlockIntoFreeList+0xac>)
 8007b32:	60fb      	str	r3, [r7, #12]
 8007b34:	e002      	b.n	8007b3c <prvInsertBlockIntoFreeList+0x14>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	60fb      	str	r3, [r7, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d8f7      	bhi.n	8007b36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	4413      	add	r3, r2
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d108      	bne.n	8007b6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	441a      	add	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	441a      	add	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d118      	bne.n	8007bb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d00d      	beq.n	8007ba6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	441a      	add	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	e008      	b.n	8007bb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007ba6:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <prvInsertBlockIntoFreeList+0xb0>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	601a      	str	r2, [r3, #0]
 8007bae:	e003      	b.n	8007bb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d002      	beq.n	8007bc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	200054c8 	.word	0x200054c8
 8007bd8:	200054d0 	.word	0x200054d0

08007bdc <siprintf>:
 8007bdc:	b40e      	push	{r1, r2, r3}
 8007bde:	b500      	push	{lr}
 8007be0:	b09c      	sub	sp, #112	; 0x70
 8007be2:	ab1d      	add	r3, sp, #116	; 0x74
 8007be4:	9002      	str	r0, [sp, #8]
 8007be6:	9006      	str	r0, [sp, #24]
 8007be8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bec:	4809      	ldr	r0, [pc, #36]	; (8007c14 <siprintf+0x38>)
 8007bee:	9107      	str	r1, [sp, #28]
 8007bf0:	9104      	str	r1, [sp, #16]
 8007bf2:	4909      	ldr	r1, [pc, #36]	; (8007c18 <siprintf+0x3c>)
 8007bf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bf8:	9105      	str	r1, [sp, #20]
 8007bfa:	6800      	ldr	r0, [r0, #0]
 8007bfc:	9301      	str	r3, [sp, #4]
 8007bfe:	a902      	add	r1, sp, #8
 8007c00:	f000 f9fe 	bl	8008000 <_svfiprintf_r>
 8007c04:	9b02      	ldr	r3, [sp, #8]
 8007c06:	2200      	movs	r2, #0
 8007c08:	701a      	strb	r2, [r3, #0]
 8007c0a:	b01c      	add	sp, #112	; 0x70
 8007c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c10:	b003      	add	sp, #12
 8007c12:	4770      	bx	lr
 8007c14:	2000005c 	.word	0x2000005c
 8007c18:	ffff0208 	.word	0xffff0208

08007c1c <memset>:
 8007c1c:	4402      	add	r2, r0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d100      	bne.n	8007c26 <memset+0xa>
 8007c24:	4770      	bx	lr
 8007c26:	f803 1b01 	strb.w	r1, [r3], #1
 8007c2a:	e7f9      	b.n	8007c20 <memset+0x4>

08007c2c <_reclaim_reent>:
 8007c2c:	4b29      	ldr	r3, [pc, #164]	; (8007cd4 <_reclaim_reent+0xa8>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4283      	cmp	r3, r0
 8007c32:	b570      	push	{r4, r5, r6, lr}
 8007c34:	4604      	mov	r4, r0
 8007c36:	d04b      	beq.n	8007cd0 <_reclaim_reent+0xa4>
 8007c38:	69c3      	ldr	r3, [r0, #28]
 8007c3a:	b143      	cbz	r3, 8007c4e <_reclaim_reent+0x22>
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d144      	bne.n	8007ccc <_reclaim_reent+0xa0>
 8007c42:	69e3      	ldr	r3, [r4, #28]
 8007c44:	6819      	ldr	r1, [r3, #0]
 8007c46:	b111      	cbz	r1, 8007c4e <_reclaim_reent+0x22>
 8007c48:	4620      	mov	r0, r4
 8007c4a:	f000 f887 	bl	8007d5c <_free_r>
 8007c4e:	6961      	ldr	r1, [r4, #20]
 8007c50:	b111      	cbz	r1, 8007c58 <_reclaim_reent+0x2c>
 8007c52:	4620      	mov	r0, r4
 8007c54:	f000 f882 	bl	8007d5c <_free_r>
 8007c58:	69e1      	ldr	r1, [r4, #28]
 8007c5a:	b111      	cbz	r1, 8007c62 <_reclaim_reent+0x36>
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f000 f87d 	bl	8007d5c <_free_r>
 8007c62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007c64:	b111      	cbz	r1, 8007c6c <_reclaim_reent+0x40>
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 f878 	bl	8007d5c <_free_r>
 8007c6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c6e:	b111      	cbz	r1, 8007c76 <_reclaim_reent+0x4a>
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 f873 	bl	8007d5c <_free_r>
 8007c76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007c78:	b111      	cbz	r1, 8007c80 <_reclaim_reent+0x54>
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f000 f86e 	bl	8007d5c <_free_r>
 8007c80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c82:	b111      	cbz	r1, 8007c8a <_reclaim_reent+0x5e>
 8007c84:	4620      	mov	r0, r4
 8007c86:	f000 f869 	bl	8007d5c <_free_r>
 8007c8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007c8c:	b111      	cbz	r1, 8007c94 <_reclaim_reent+0x68>
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 f864 	bl	8007d5c <_free_r>
 8007c94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007c96:	b111      	cbz	r1, 8007c9e <_reclaim_reent+0x72>
 8007c98:	4620      	mov	r0, r4
 8007c9a:	f000 f85f 	bl	8007d5c <_free_r>
 8007c9e:	6a23      	ldr	r3, [r4, #32]
 8007ca0:	b1b3      	cbz	r3, 8007cd0 <_reclaim_reent+0xa4>
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ca8:	4718      	bx	r3
 8007caa:	5949      	ldr	r1, [r1, r5]
 8007cac:	b941      	cbnz	r1, 8007cc0 <_reclaim_reent+0x94>
 8007cae:	3504      	adds	r5, #4
 8007cb0:	69e3      	ldr	r3, [r4, #28]
 8007cb2:	2d80      	cmp	r5, #128	; 0x80
 8007cb4:	68d9      	ldr	r1, [r3, #12]
 8007cb6:	d1f8      	bne.n	8007caa <_reclaim_reent+0x7e>
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f000 f84f 	bl	8007d5c <_free_r>
 8007cbe:	e7c0      	b.n	8007c42 <_reclaim_reent+0x16>
 8007cc0:	680e      	ldr	r6, [r1, #0]
 8007cc2:	4620      	mov	r0, r4
 8007cc4:	f000 f84a 	bl	8007d5c <_free_r>
 8007cc8:	4631      	mov	r1, r6
 8007cca:	e7ef      	b.n	8007cac <_reclaim_reent+0x80>
 8007ccc:	2500      	movs	r5, #0
 8007cce:	e7ef      	b.n	8007cb0 <_reclaim_reent+0x84>
 8007cd0:	bd70      	pop	{r4, r5, r6, pc}
 8007cd2:	bf00      	nop
 8007cd4:	2000005c 	.word	0x2000005c

08007cd8 <__errno>:
 8007cd8:	4b01      	ldr	r3, [pc, #4]	; (8007ce0 <__errno+0x8>)
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	2000005c 	.word	0x2000005c

08007ce4 <__libc_init_array>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	4d0d      	ldr	r5, [pc, #52]	; (8007d1c <__libc_init_array+0x38>)
 8007ce8:	4c0d      	ldr	r4, [pc, #52]	; (8007d20 <__libc_init_array+0x3c>)
 8007cea:	1b64      	subs	r4, r4, r5
 8007cec:	10a4      	asrs	r4, r4, #2
 8007cee:	2600      	movs	r6, #0
 8007cf0:	42a6      	cmp	r6, r4
 8007cf2:	d109      	bne.n	8007d08 <__libc_init_array+0x24>
 8007cf4:	4d0b      	ldr	r5, [pc, #44]	; (8007d24 <__libc_init_array+0x40>)
 8007cf6:	4c0c      	ldr	r4, [pc, #48]	; (8007d28 <__libc_init_array+0x44>)
 8007cf8:	f000 fc72 	bl	80085e0 <_init>
 8007cfc:	1b64      	subs	r4, r4, r5
 8007cfe:	10a4      	asrs	r4, r4, #2
 8007d00:	2600      	movs	r6, #0
 8007d02:	42a6      	cmp	r6, r4
 8007d04:	d105      	bne.n	8007d12 <__libc_init_array+0x2e>
 8007d06:	bd70      	pop	{r4, r5, r6, pc}
 8007d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0c:	4798      	blx	r3
 8007d0e:	3601      	adds	r6, #1
 8007d10:	e7ee      	b.n	8007cf0 <__libc_init_array+0xc>
 8007d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d16:	4798      	blx	r3
 8007d18:	3601      	adds	r6, #1
 8007d1a:	e7f2      	b.n	8007d02 <__libc_init_array+0x1e>
 8007d1c:	08008718 	.word	0x08008718
 8007d20:	08008718 	.word	0x08008718
 8007d24:	08008718 	.word	0x08008718
 8007d28:	0800871c 	.word	0x0800871c

08007d2c <__retarget_lock_acquire_recursive>:
 8007d2c:	4770      	bx	lr

08007d2e <__retarget_lock_release_recursive>:
 8007d2e:	4770      	bx	lr

08007d30 <strcpy>:
 8007d30:	4603      	mov	r3, r0
 8007d32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d36:	f803 2b01 	strb.w	r2, [r3], #1
 8007d3a:	2a00      	cmp	r2, #0
 8007d3c:	d1f9      	bne.n	8007d32 <strcpy+0x2>
 8007d3e:	4770      	bx	lr

08007d40 <memcpy>:
 8007d40:	440a      	add	r2, r1
 8007d42:	4291      	cmp	r1, r2
 8007d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d48:	d100      	bne.n	8007d4c <memcpy+0xc>
 8007d4a:	4770      	bx	lr
 8007d4c:	b510      	push	{r4, lr}
 8007d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d56:	4291      	cmp	r1, r2
 8007d58:	d1f9      	bne.n	8007d4e <memcpy+0xe>
 8007d5a:	bd10      	pop	{r4, pc}

08007d5c <_free_r>:
 8007d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d5e:	2900      	cmp	r1, #0
 8007d60:	d044      	beq.n	8007dec <_free_r+0x90>
 8007d62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d66:	9001      	str	r0, [sp, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d6e:	bfb8      	it	lt
 8007d70:	18e4      	addlt	r4, r4, r3
 8007d72:	f000 f8df 	bl	8007f34 <__malloc_lock>
 8007d76:	4a1e      	ldr	r2, [pc, #120]	; (8007df0 <_free_r+0x94>)
 8007d78:	9801      	ldr	r0, [sp, #4]
 8007d7a:	6813      	ldr	r3, [r2, #0]
 8007d7c:	b933      	cbnz	r3, 8007d8c <_free_r+0x30>
 8007d7e:	6063      	str	r3, [r4, #4]
 8007d80:	6014      	str	r4, [r2, #0]
 8007d82:	b003      	add	sp, #12
 8007d84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d88:	f000 b8da 	b.w	8007f40 <__malloc_unlock>
 8007d8c:	42a3      	cmp	r3, r4
 8007d8e:	d908      	bls.n	8007da2 <_free_r+0x46>
 8007d90:	6825      	ldr	r5, [r4, #0]
 8007d92:	1961      	adds	r1, r4, r5
 8007d94:	428b      	cmp	r3, r1
 8007d96:	bf01      	itttt	eq
 8007d98:	6819      	ldreq	r1, [r3, #0]
 8007d9a:	685b      	ldreq	r3, [r3, #4]
 8007d9c:	1949      	addeq	r1, r1, r5
 8007d9e:	6021      	streq	r1, [r4, #0]
 8007da0:	e7ed      	b.n	8007d7e <_free_r+0x22>
 8007da2:	461a      	mov	r2, r3
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	b10b      	cbz	r3, 8007dac <_free_r+0x50>
 8007da8:	42a3      	cmp	r3, r4
 8007daa:	d9fa      	bls.n	8007da2 <_free_r+0x46>
 8007dac:	6811      	ldr	r1, [r2, #0]
 8007dae:	1855      	adds	r5, r2, r1
 8007db0:	42a5      	cmp	r5, r4
 8007db2:	d10b      	bne.n	8007dcc <_free_r+0x70>
 8007db4:	6824      	ldr	r4, [r4, #0]
 8007db6:	4421      	add	r1, r4
 8007db8:	1854      	adds	r4, r2, r1
 8007dba:	42a3      	cmp	r3, r4
 8007dbc:	6011      	str	r1, [r2, #0]
 8007dbe:	d1e0      	bne.n	8007d82 <_free_r+0x26>
 8007dc0:	681c      	ldr	r4, [r3, #0]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	6053      	str	r3, [r2, #4]
 8007dc6:	440c      	add	r4, r1
 8007dc8:	6014      	str	r4, [r2, #0]
 8007dca:	e7da      	b.n	8007d82 <_free_r+0x26>
 8007dcc:	d902      	bls.n	8007dd4 <_free_r+0x78>
 8007dce:	230c      	movs	r3, #12
 8007dd0:	6003      	str	r3, [r0, #0]
 8007dd2:	e7d6      	b.n	8007d82 <_free_r+0x26>
 8007dd4:	6825      	ldr	r5, [r4, #0]
 8007dd6:	1961      	adds	r1, r4, r5
 8007dd8:	428b      	cmp	r3, r1
 8007dda:	bf04      	itt	eq
 8007ddc:	6819      	ldreq	r1, [r3, #0]
 8007dde:	685b      	ldreq	r3, [r3, #4]
 8007de0:	6063      	str	r3, [r4, #4]
 8007de2:	bf04      	itt	eq
 8007de4:	1949      	addeq	r1, r1, r5
 8007de6:	6021      	streq	r1, [r4, #0]
 8007de8:	6054      	str	r4, [r2, #4]
 8007dea:	e7ca      	b.n	8007d82 <_free_r+0x26>
 8007dec:	b003      	add	sp, #12
 8007dee:	bd30      	pop	{r4, r5, pc}
 8007df0:	20005628 	.word	0x20005628

08007df4 <sbrk_aligned>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	4e0e      	ldr	r6, [pc, #56]	; (8007e30 <sbrk_aligned+0x3c>)
 8007df8:	460c      	mov	r4, r1
 8007dfa:	6831      	ldr	r1, [r6, #0]
 8007dfc:	4605      	mov	r5, r0
 8007dfe:	b911      	cbnz	r1, 8007e06 <sbrk_aligned+0x12>
 8007e00:	f000 fba6 	bl	8008550 <_sbrk_r>
 8007e04:	6030      	str	r0, [r6, #0]
 8007e06:	4621      	mov	r1, r4
 8007e08:	4628      	mov	r0, r5
 8007e0a:	f000 fba1 	bl	8008550 <_sbrk_r>
 8007e0e:	1c43      	adds	r3, r0, #1
 8007e10:	d00a      	beq.n	8007e28 <sbrk_aligned+0x34>
 8007e12:	1cc4      	adds	r4, r0, #3
 8007e14:	f024 0403 	bic.w	r4, r4, #3
 8007e18:	42a0      	cmp	r0, r4
 8007e1a:	d007      	beq.n	8007e2c <sbrk_aligned+0x38>
 8007e1c:	1a21      	subs	r1, r4, r0
 8007e1e:	4628      	mov	r0, r5
 8007e20:	f000 fb96 	bl	8008550 <_sbrk_r>
 8007e24:	3001      	adds	r0, #1
 8007e26:	d101      	bne.n	8007e2c <sbrk_aligned+0x38>
 8007e28:	f04f 34ff 	mov.w	r4, #4294967295
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	2000562c 	.word	0x2000562c

08007e34 <_malloc_r>:
 8007e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e38:	1ccd      	adds	r5, r1, #3
 8007e3a:	f025 0503 	bic.w	r5, r5, #3
 8007e3e:	3508      	adds	r5, #8
 8007e40:	2d0c      	cmp	r5, #12
 8007e42:	bf38      	it	cc
 8007e44:	250c      	movcc	r5, #12
 8007e46:	2d00      	cmp	r5, #0
 8007e48:	4607      	mov	r7, r0
 8007e4a:	db01      	blt.n	8007e50 <_malloc_r+0x1c>
 8007e4c:	42a9      	cmp	r1, r5
 8007e4e:	d905      	bls.n	8007e5c <_malloc_r+0x28>
 8007e50:	230c      	movs	r3, #12
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	2600      	movs	r6, #0
 8007e56:	4630      	mov	r0, r6
 8007e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f30 <_malloc_r+0xfc>
 8007e60:	f000 f868 	bl	8007f34 <__malloc_lock>
 8007e64:	f8d8 3000 	ldr.w	r3, [r8]
 8007e68:	461c      	mov	r4, r3
 8007e6a:	bb5c      	cbnz	r4, 8007ec4 <_malloc_r+0x90>
 8007e6c:	4629      	mov	r1, r5
 8007e6e:	4638      	mov	r0, r7
 8007e70:	f7ff ffc0 	bl	8007df4 <sbrk_aligned>
 8007e74:	1c43      	adds	r3, r0, #1
 8007e76:	4604      	mov	r4, r0
 8007e78:	d155      	bne.n	8007f26 <_malloc_r+0xf2>
 8007e7a:	f8d8 4000 	ldr.w	r4, [r8]
 8007e7e:	4626      	mov	r6, r4
 8007e80:	2e00      	cmp	r6, #0
 8007e82:	d145      	bne.n	8007f10 <_malloc_r+0xdc>
 8007e84:	2c00      	cmp	r4, #0
 8007e86:	d048      	beq.n	8007f1a <_malloc_r+0xe6>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	4631      	mov	r1, r6
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	eb04 0903 	add.w	r9, r4, r3
 8007e92:	f000 fb5d 	bl	8008550 <_sbrk_r>
 8007e96:	4581      	cmp	r9, r0
 8007e98:	d13f      	bne.n	8007f1a <_malloc_r+0xe6>
 8007e9a:	6821      	ldr	r1, [r4, #0]
 8007e9c:	1a6d      	subs	r5, r5, r1
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7ff ffa7 	bl	8007df4 <sbrk_aligned>
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d037      	beq.n	8007f1a <_malloc_r+0xe6>
 8007eaa:	6823      	ldr	r3, [r4, #0]
 8007eac:	442b      	add	r3, r5
 8007eae:	6023      	str	r3, [r4, #0]
 8007eb0:	f8d8 3000 	ldr.w	r3, [r8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d038      	beq.n	8007f2a <_malloc_r+0xf6>
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	42a2      	cmp	r2, r4
 8007ebc:	d12b      	bne.n	8007f16 <_malloc_r+0xe2>
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	605a      	str	r2, [r3, #4]
 8007ec2:	e00f      	b.n	8007ee4 <_malloc_r+0xb0>
 8007ec4:	6822      	ldr	r2, [r4, #0]
 8007ec6:	1b52      	subs	r2, r2, r5
 8007ec8:	d41f      	bmi.n	8007f0a <_malloc_r+0xd6>
 8007eca:	2a0b      	cmp	r2, #11
 8007ecc:	d917      	bls.n	8007efe <_malloc_r+0xca>
 8007ece:	1961      	adds	r1, r4, r5
 8007ed0:	42a3      	cmp	r3, r4
 8007ed2:	6025      	str	r5, [r4, #0]
 8007ed4:	bf18      	it	ne
 8007ed6:	6059      	strne	r1, [r3, #4]
 8007ed8:	6863      	ldr	r3, [r4, #4]
 8007eda:	bf08      	it	eq
 8007edc:	f8c8 1000 	streq.w	r1, [r8]
 8007ee0:	5162      	str	r2, [r4, r5]
 8007ee2:	604b      	str	r3, [r1, #4]
 8007ee4:	4638      	mov	r0, r7
 8007ee6:	f104 060b 	add.w	r6, r4, #11
 8007eea:	f000 f829 	bl	8007f40 <__malloc_unlock>
 8007eee:	f026 0607 	bic.w	r6, r6, #7
 8007ef2:	1d23      	adds	r3, r4, #4
 8007ef4:	1af2      	subs	r2, r6, r3
 8007ef6:	d0ae      	beq.n	8007e56 <_malloc_r+0x22>
 8007ef8:	1b9b      	subs	r3, r3, r6
 8007efa:	50a3      	str	r3, [r4, r2]
 8007efc:	e7ab      	b.n	8007e56 <_malloc_r+0x22>
 8007efe:	42a3      	cmp	r3, r4
 8007f00:	6862      	ldr	r2, [r4, #4]
 8007f02:	d1dd      	bne.n	8007ec0 <_malloc_r+0x8c>
 8007f04:	f8c8 2000 	str.w	r2, [r8]
 8007f08:	e7ec      	b.n	8007ee4 <_malloc_r+0xb0>
 8007f0a:	4623      	mov	r3, r4
 8007f0c:	6864      	ldr	r4, [r4, #4]
 8007f0e:	e7ac      	b.n	8007e6a <_malloc_r+0x36>
 8007f10:	4634      	mov	r4, r6
 8007f12:	6876      	ldr	r6, [r6, #4]
 8007f14:	e7b4      	b.n	8007e80 <_malloc_r+0x4c>
 8007f16:	4613      	mov	r3, r2
 8007f18:	e7cc      	b.n	8007eb4 <_malloc_r+0x80>
 8007f1a:	230c      	movs	r3, #12
 8007f1c:	603b      	str	r3, [r7, #0]
 8007f1e:	4638      	mov	r0, r7
 8007f20:	f000 f80e 	bl	8007f40 <__malloc_unlock>
 8007f24:	e797      	b.n	8007e56 <_malloc_r+0x22>
 8007f26:	6025      	str	r5, [r4, #0]
 8007f28:	e7dc      	b.n	8007ee4 <_malloc_r+0xb0>
 8007f2a:	605b      	str	r3, [r3, #4]
 8007f2c:	deff      	udf	#255	; 0xff
 8007f2e:	bf00      	nop
 8007f30:	20005628 	.word	0x20005628

08007f34 <__malloc_lock>:
 8007f34:	4801      	ldr	r0, [pc, #4]	; (8007f3c <__malloc_lock+0x8>)
 8007f36:	f7ff bef9 	b.w	8007d2c <__retarget_lock_acquire_recursive>
 8007f3a:	bf00      	nop
 8007f3c:	20005624 	.word	0x20005624

08007f40 <__malloc_unlock>:
 8007f40:	4801      	ldr	r0, [pc, #4]	; (8007f48 <__malloc_unlock+0x8>)
 8007f42:	f7ff bef4 	b.w	8007d2e <__retarget_lock_release_recursive>
 8007f46:	bf00      	nop
 8007f48:	20005624 	.word	0x20005624

08007f4c <__ssputs_r>:
 8007f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f50:	688e      	ldr	r6, [r1, #8]
 8007f52:	461f      	mov	r7, r3
 8007f54:	42be      	cmp	r6, r7
 8007f56:	680b      	ldr	r3, [r1, #0]
 8007f58:	4682      	mov	sl, r0
 8007f5a:	460c      	mov	r4, r1
 8007f5c:	4690      	mov	r8, r2
 8007f5e:	d82c      	bhi.n	8007fba <__ssputs_r+0x6e>
 8007f60:	898a      	ldrh	r2, [r1, #12]
 8007f62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f66:	d026      	beq.n	8007fb6 <__ssputs_r+0x6a>
 8007f68:	6965      	ldr	r5, [r4, #20]
 8007f6a:	6909      	ldr	r1, [r1, #16]
 8007f6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f70:	eba3 0901 	sub.w	r9, r3, r1
 8007f74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f78:	1c7b      	adds	r3, r7, #1
 8007f7a:	444b      	add	r3, r9
 8007f7c:	106d      	asrs	r5, r5, #1
 8007f7e:	429d      	cmp	r5, r3
 8007f80:	bf38      	it	cc
 8007f82:	461d      	movcc	r5, r3
 8007f84:	0553      	lsls	r3, r2, #21
 8007f86:	d527      	bpl.n	8007fd8 <__ssputs_r+0x8c>
 8007f88:	4629      	mov	r1, r5
 8007f8a:	f7ff ff53 	bl	8007e34 <_malloc_r>
 8007f8e:	4606      	mov	r6, r0
 8007f90:	b360      	cbz	r0, 8007fec <__ssputs_r+0xa0>
 8007f92:	6921      	ldr	r1, [r4, #16]
 8007f94:	464a      	mov	r2, r9
 8007f96:	f7ff fed3 	bl	8007d40 <memcpy>
 8007f9a:	89a3      	ldrh	r3, [r4, #12]
 8007f9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fa4:	81a3      	strh	r3, [r4, #12]
 8007fa6:	6126      	str	r6, [r4, #16]
 8007fa8:	6165      	str	r5, [r4, #20]
 8007faa:	444e      	add	r6, r9
 8007fac:	eba5 0509 	sub.w	r5, r5, r9
 8007fb0:	6026      	str	r6, [r4, #0]
 8007fb2:	60a5      	str	r5, [r4, #8]
 8007fb4:	463e      	mov	r6, r7
 8007fb6:	42be      	cmp	r6, r7
 8007fb8:	d900      	bls.n	8007fbc <__ssputs_r+0x70>
 8007fba:	463e      	mov	r6, r7
 8007fbc:	6820      	ldr	r0, [r4, #0]
 8007fbe:	4632      	mov	r2, r6
 8007fc0:	4641      	mov	r1, r8
 8007fc2:	f000 faab 	bl	800851c <memmove>
 8007fc6:	68a3      	ldr	r3, [r4, #8]
 8007fc8:	1b9b      	subs	r3, r3, r6
 8007fca:	60a3      	str	r3, [r4, #8]
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	4433      	add	r3, r6
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	2000      	movs	r0, #0
 8007fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd8:	462a      	mov	r2, r5
 8007fda:	f000 fac9 	bl	8008570 <_realloc_r>
 8007fde:	4606      	mov	r6, r0
 8007fe0:	2800      	cmp	r0, #0
 8007fe2:	d1e0      	bne.n	8007fa6 <__ssputs_r+0x5a>
 8007fe4:	6921      	ldr	r1, [r4, #16]
 8007fe6:	4650      	mov	r0, sl
 8007fe8:	f7ff feb8 	bl	8007d5c <_free_r>
 8007fec:	230c      	movs	r3, #12
 8007fee:	f8ca 3000 	str.w	r3, [sl]
 8007ff2:	89a3      	ldrh	r3, [r4, #12]
 8007ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff8:	81a3      	strh	r3, [r4, #12]
 8007ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffe:	e7e9      	b.n	8007fd4 <__ssputs_r+0x88>

08008000 <_svfiprintf_r>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	4698      	mov	r8, r3
 8008006:	898b      	ldrh	r3, [r1, #12]
 8008008:	061b      	lsls	r3, r3, #24
 800800a:	b09d      	sub	sp, #116	; 0x74
 800800c:	4607      	mov	r7, r0
 800800e:	460d      	mov	r5, r1
 8008010:	4614      	mov	r4, r2
 8008012:	d50e      	bpl.n	8008032 <_svfiprintf_r+0x32>
 8008014:	690b      	ldr	r3, [r1, #16]
 8008016:	b963      	cbnz	r3, 8008032 <_svfiprintf_r+0x32>
 8008018:	2140      	movs	r1, #64	; 0x40
 800801a:	f7ff ff0b 	bl	8007e34 <_malloc_r>
 800801e:	6028      	str	r0, [r5, #0]
 8008020:	6128      	str	r0, [r5, #16]
 8008022:	b920      	cbnz	r0, 800802e <_svfiprintf_r+0x2e>
 8008024:	230c      	movs	r3, #12
 8008026:	603b      	str	r3, [r7, #0]
 8008028:	f04f 30ff 	mov.w	r0, #4294967295
 800802c:	e0d0      	b.n	80081d0 <_svfiprintf_r+0x1d0>
 800802e:	2340      	movs	r3, #64	; 0x40
 8008030:	616b      	str	r3, [r5, #20]
 8008032:	2300      	movs	r3, #0
 8008034:	9309      	str	r3, [sp, #36]	; 0x24
 8008036:	2320      	movs	r3, #32
 8008038:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800803c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008040:	2330      	movs	r3, #48	; 0x30
 8008042:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80081e8 <_svfiprintf_r+0x1e8>
 8008046:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800804a:	f04f 0901 	mov.w	r9, #1
 800804e:	4623      	mov	r3, r4
 8008050:	469a      	mov	sl, r3
 8008052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008056:	b10a      	cbz	r2, 800805c <_svfiprintf_r+0x5c>
 8008058:	2a25      	cmp	r2, #37	; 0x25
 800805a:	d1f9      	bne.n	8008050 <_svfiprintf_r+0x50>
 800805c:	ebba 0b04 	subs.w	fp, sl, r4
 8008060:	d00b      	beq.n	800807a <_svfiprintf_r+0x7a>
 8008062:	465b      	mov	r3, fp
 8008064:	4622      	mov	r2, r4
 8008066:	4629      	mov	r1, r5
 8008068:	4638      	mov	r0, r7
 800806a:	f7ff ff6f 	bl	8007f4c <__ssputs_r>
 800806e:	3001      	adds	r0, #1
 8008070:	f000 80a9 	beq.w	80081c6 <_svfiprintf_r+0x1c6>
 8008074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008076:	445a      	add	r2, fp
 8008078:	9209      	str	r2, [sp, #36]	; 0x24
 800807a:	f89a 3000 	ldrb.w	r3, [sl]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 80a1 	beq.w	80081c6 <_svfiprintf_r+0x1c6>
 8008084:	2300      	movs	r3, #0
 8008086:	f04f 32ff 	mov.w	r2, #4294967295
 800808a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800808e:	f10a 0a01 	add.w	sl, sl, #1
 8008092:	9304      	str	r3, [sp, #16]
 8008094:	9307      	str	r3, [sp, #28]
 8008096:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800809a:	931a      	str	r3, [sp, #104]	; 0x68
 800809c:	4654      	mov	r4, sl
 800809e:	2205      	movs	r2, #5
 80080a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a4:	4850      	ldr	r0, [pc, #320]	; (80081e8 <_svfiprintf_r+0x1e8>)
 80080a6:	f7f8 f8c3 	bl	8000230 <memchr>
 80080aa:	9a04      	ldr	r2, [sp, #16]
 80080ac:	b9d8      	cbnz	r0, 80080e6 <_svfiprintf_r+0xe6>
 80080ae:	06d0      	lsls	r0, r2, #27
 80080b0:	bf44      	itt	mi
 80080b2:	2320      	movmi	r3, #32
 80080b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080b8:	0711      	lsls	r1, r2, #28
 80080ba:	bf44      	itt	mi
 80080bc:	232b      	movmi	r3, #43	; 0x2b
 80080be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080c2:	f89a 3000 	ldrb.w	r3, [sl]
 80080c6:	2b2a      	cmp	r3, #42	; 0x2a
 80080c8:	d015      	beq.n	80080f6 <_svfiprintf_r+0xf6>
 80080ca:	9a07      	ldr	r2, [sp, #28]
 80080cc:	4654      	mov	r4, sl
 80080ce:	2000      	movs	r0, #0
 80080d0:	f04f 0c0a 	mov.w	ip, #10
 80080d4:	4621      	mov	r1, r4
 80080d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080da:	3b30      	subs	r3, #48	; 0x30
 80080dc:	2b09      	cmp	r3, #9
 80080de:	d94d      	bls.n	800817c <_svfiprintf_r+0x17c>
 80080e0:	b1b0      	cbz	r0, 8008110 <_svfiprintf_r+0x110>
 80080e2:	9207      	str	r2, [sp, #28]
 80080e4:	e014      	b.n	8008110 <_svfiprintf_r+0x110>
 80080e6:	eba0 0308 	sub.w	r3, r0, r8
 80080ea:	fa09 f303 	lsl.w	r3, r9, r3
 80080ee:	4313      	orrs	r3, r2
 80080f0:	9304      	str	r3, [sp, #16]
 80080f2:	46a2      	mov	sl, r4
 80080f4:	e7d2      	b.n	800809c <_svfiprintf_r+0x9c>
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	1d19      	adds	r1, r3, #4
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	9103      	str	r1, [sp, #12]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	bfbb      	ittet	lt
 8008102:	425b      	neglt	r3, r3
 8008104:	f042 0202 	orrlt.w	r2, r2, #2
 8008108:	9307      	strge	r3, [sp, #28]
 800810a:	9307      	strlt	r3, [sp, #28]
 800810c:	bfb8      	it	lt
 800810e:	9204      	strlt	r2, [sp, #16]
 8008110:	7823      	ldrb	r3, [r4, #0]
 8008112:	2b2e      	cmp	r3, #46	; 0x2e
 8008114:	d10c      	bne.n	8008130 <_svfiprintf_r+0x130>
 8008116:	7863      	ldrb	r3, [r4, #1]
 8008118:	2b2a      	cmp	r3, #42	; 0x2a
 800811a:	d134      	bne.n	8008186 <_svfiprintf_r+0x186>
 800811c:	9b03      	ldr	r3, [sp, #12]
 800811e:	1d1a      	adds	r2, r3, #4
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	9203      	str	r2, [sp, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	bfb8      	it	lt
 8008128:	f04f 33ff 	movlt.w	r3, #4294967295
 800812c:	3402      	adds	r4, #2
 800812e:	9305      	str	r3, [sp, #20]
 8008130:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80081f8 <_svfiprintf_r+0x1f8>
 8008134:	7821      	ldrb	r1, [r4, #0]
 8008136:	2203      	movs	r2, #3
 8008138:	4650      	mov	r0, sl
 800813a:	f7f8 f879 	bl	8000230 <memchr>
 800813e:	b138      	cbz	r0, 8008150 <_svfiprintf_r+0x150>
 8008140:	9b04      	ldr	r3, [sp, #16]
 8008142:	eba0 000a 	sub.w	r0, r0, sl
 8008146:	2240      	movs	r2, #64	; 0x40
 8008148:	4082      	lsls	r2, r0
 800814a:	4313      	orrs	r3, r2
 800814c:	3401      	adds	r4, #1
 800814e:	9304      	str	r3, [sp, #16]
 8008150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008154:	4825      	ldr	r0, [pc, #148]	; (80081ec <_svfiprintf_r+0x1ec>)
 8008156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800815a:	2206      	movs	r2, #6
 800815c:	f7f8 f868 	bl	8000230 <memchr>
 8008160:	2800      	cmp	r0, #0
 8008162:	d038      	beq.n	80081d6 <_svfiprintf_r+0x1d6>
 8008164:	4b22      	ldr	r3, [pc, #136]	; (80081f0 <_svfiprintf_r+0x1f0>)
 8008166:	bb1b      	cbnz	r3, 80081b0 <_svfiprintf_r+0x1b0>
 8008168:	9b03      	ldr	r3, [sp, #12]
 800816a:	3307      	adds	r3, #7
 800816c:	f023 0307 	bic.w	r3, r3, #7
 8008170:	3308      	adds	r3, #8
 8008172:	9303      	str	r3, [sp, #12]
 8008174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008176:	4433      	add	r3, r6
 8008178:	9309      	str	r3, [sp, #36]	; 0x24
 800817a:	e768      	b.n	800804e <_svfiprintf_r+0x4e>
 800817c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008180:	460c      	mov	r4, r1
 8008182:	2001      	movs	r0, #1
 8008184:	e7a6      	b.n	80080d4 <_svfiprintf_r+0xd4>
 8008186:	2300      	movs	r3, #0
 8008188:	3401      	adds	r4, #1
 800818a:	9305      	str	r3, [sp, #20]
 800818c:	4619      	mov	r1, r3
 800818e:	f04f 0c0a 	mov.w	ip, #10
 8008192:	4620      	mov	r0, r4
 8008194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008198:	3a30      	subs	r2, #48	; 0x30
 800819a:	2a09      	cmp	r2, #9
 800819c:	d903      	bls.n	80081a6 <_svfiprintf_r+0x1a6>
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0c6      	beq.n	8008130 <_svfiprintf_r+0x130>
 80081a2:	9105      	str	r1, [sp, #20]
 80081a4:	e7c4      	b.n	8008130 <_svfiprintf_r+0x130>
 80081a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80081aa:	4604      	mov	r4, r0
 80081ac:	2301      	movs	r3, #1
 80081ae:	e7f0      	b.n	8008192 <_svfiprintf_r+0x192>
 80081b0:	ab03      	add	r3, sp, #12
 80081b2:	9300      	str	r3, [sp, #0]
 80081b4:	462a      	mov	r2, r5
 80081b6:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <_svfiprintf_r+0x1f4>)
 80081b8:	a904      	add	r1, sp, #16
 80081ba:	4638      	mov	r0, r7
 80081bc:	f3af 8000 	nop.w
 80081c0:	1c42      	adds	r2, r0, #1
 80081c2:	4606      	mov	r6, r0
 80081c4:	d1d6      	bne.n	8008174 <_svfiprintf_r+0x174>
 80081c6:	89ab      	ldrh	r3, [r5, #12]
 80081c8:	065b      	lsls	r3, r3, #25
 80081ca:	f53f af2d 	bmi.w	8008028 <_svfiprintf_r+0x28>
 80081ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081d0:	b01d      	add	sp, #116	; 0x74
 80081d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d6:	ab03      	add	r3, sp, #12
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	462a      	mov	r2, r5
 80081dc:	4b05      	ldr	r3, [pc, #20]	; (80081f4 <_svfiprintf_r+0x1f4>)
 80081de:	a904      	add	r1, sp, #16
 80081e0:	4638      	mov	r0, r7
 80081e2:	f000 f879 	bl	80082d8 <_printf_i>
 80081e6:	e7eb      	b.n	80081c0 <_svfiprintf_r+0x1c0>
 80081e8:	080086dc 	.word	0x080086dc
 80081ec:	080086e6 	.word	0x080086e6
 80081f0:	00000000 	.word	0x00000000
 80081f4:	08007f4d 	.word	0x08007f4d
 80081f8:	080086e2 	.word	0x080086e2

080081fc <_printf_common>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	4616      	mov	r6, r2
 8008202:	4699      	mov	r9, r3
 8008204:	688a      	ldr	r2, [r1, #8]
 8008206:	690b      	ldr	r3, [r1, #16]
 8008208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800820c:	4293      	cmp	r3, r2
 800820e:	bfb8      	it	lt
 8008210:	4613      	movlt	r3, r2
 8008212:	6033      	str	r3, [r6, #0]
 8008214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008218:	4607      	mov	r7, r0
 800821a:	460c      	mov	r4, r1
 800821c:	b10a      	cbz	r2, 8008222 <_printf_common+0x26>
 800821e:	3301      	adds	r3, #1
 8008220:	6033      	str	r3, [r6, #0]
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	0699      	lsls	r1, r3, #26
 8008226:	bf42      	ittt	mi
 8008228:	6833      	ldrmi	r3, [r6, #0]
 800822a:	3302      	addmi	r3, #2
 800822c:	6033      	strmi	r3, [r6, #0]
 800822e:	6825      	ldr	r5, [r4, #0]
 8008230:	f015 0506 	ands.w	r5, r5, #6
 8008234:	d106      	bne.n	8008244 <_printf_common+0x48>
 8008236:	f104 0a19 	add.w	sl, r4, #25
 800823a:	68e3      	ldr	r3, [r4, #12]
 800823c:	6832      	ldr	r2, [r6, #0]
 800823e:	1a9b      	subs	r3, r3, r2
 8008240:	42ab      	cmp	r3, r5
 8008242:	dc26      	bgt.n	8008292 <_printf_common+0x96>
 8008244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008248:	1e13      	subs	r3, r2, #0
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	bf18      	it	ne
 800824e:	2301      	movne	r3, #1
 8008250:	0692      	lsls	r2, r2, #26
 8008252:	d42b      	bmi.n	80082ac <_printf_common+0xb0>
 8008254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008258:	4649      	mov	r1, r9
 800825a:	4638      	mov	r0, r7
 800825c:	47c0      	blx	r8
 800825e:	3001      	adds	r0, #1
 8008260:	d01e      	beq.n	80082a0 <_printf_common+0xa4>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	6922      	ldr	r2, [r4, #16]
 8008266:	f003 0306 	and.w	r3, r3, #6
 800826a:	2b04      	cmp	r3, #4
 800826c:	bf02      	ittt	eq
 800826e:	68e5      	ldreq	r5, [r4, #12]
 8008270:	6833      	ldreq	r3, [r6, #0]
 8008272:	1aed      	subeq	r5, r5, r3
 8008274:	68a3      	ldr	r3, [r4, #8]
 8008276:	bf0c      	ite	eq
 8008278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800827c:	2500      	movne	r5, #0
 800827e:	4293      	cmp	r3, r2
 8008280:	bfc4      	itt	gt
 8008282:	1a9b      	subgt	r3, r3, r2
 8008284:	18ed      	addgt	r5, r5, r3
 8008286:	2600      	movs	r6, #0
 8008288:	341a      	adds	r4, #26
 800828a:	42b5      	cmp	r5, r6
 800828c:	d11a      	bne.n	80082c4 <_printf_common+0xc8>
 800828e:	2000      	movs	r0, #0
 8008290:	e008      	b.n	80082a4 <_printf_common+0xa8>
 8008292:	2301      	movs	r3, #1
 8008294:	4652      	mov	r2, sl
 8008296:	4649      	mov	r1, r9
 8008298:	4638      	mov	r0, r7
 800829a:	47c0      	blx	r8
 800829c:	3001      	adds	r0, #1
 800829e:	d103      	bne.n	80082a8 <_printf_common+0xac>
 80082a0:	f04f 30ff 	mov.w	r0, #4294967295
 80082a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a8:	3501      	adds	r5, #1
 80082aa:	e7c6      	b.n	800823a <_printf_common+0x3e>
 80082ac:	18e1      	adds	r1, r4, r3
 80082ae:	1c5a      	adds	r2, r3, #1
 80082b0:	2030      	movs	r0, #48	; 0x30
 80082b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082b6:	4422      	add	r2, r4
 80082b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082c0:	3302      	adds	r3, #2
 80082c2:	e7c7      	b.n	8008254 <_printf_common+0x58>
 80082c4:	2301      	movs	r3, #1
 80082c6:	4622      	mov	r2, r4
 80082c8:	4649      	mov	r1, r9
 80082ca:	4638      	mov	r0, r7
 80082cc:	47c0      	blx	r8
 80082ce:	3001      	adds	r0, #1
 80082d0:	d0e6      	beq.n	80082a0 <_printf_common+0xa4>
 80082d2:	3601      	adds	r6, #1
 80082d4:	e7d9      	b.n	800828a <_printf_common+0x8e>
	...

080082d8 <_printf_i>:
 80082d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082dc:	7e0f      	ldrb	r7, [r1, #24]
 80082de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082e0:	2f78      	cmp	r7, #120	; 0x78
 80082e2:	4691      	mov	r9, r2
 80082e4:	4680      	mov	r8, r0
 80082e6:	460c      	mov	r4, r1
 80082e8:	469a      	mov	sl, r3
 80082ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082ee:	d807      	bhi.n	8008300 <_printf_i+0x28>
 80082f0:	2f62      	cmp	r7, #98	; 0x62
 80082f2:	d80a      	bhi.n	800830a <_printf_i+0x32>
 80082f4:	2f00      	cmp	r7, #0
 80082f6:	f000 80d4 	beq.w	80084a2 <_printf_i+0x1ca>
 80082fa:	2f58      	cmp	r7, #88	; 0x58
 80082fc:	f000 80c0 	beq.w	8008480 <_printf_i+0x1a8>
 8008300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008308:	e03a      	b.n	8008380 <_printf_i+0xa8>
 800830a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800830e:	2b15      	cmp	r3, #21
 8008310:	d8f6      	bhi.n	8008300 <_printf_i+0x28>
 8008312:	a101      	add	r1, pc, #4	; (adr r1, 8008318 <_printf_i+0x40>)
 8008314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008318:	08008371 	.word	0x08008371
 800831c:	08008385 	.word	0x08008385
 8008320:	08008301 	.word	0x08008301
 8008324:	08008301 	.word	0x08008301
 8008328:	08008301 	.word	0x08008301
 800832c:	08008301 	.word	0x08008301
 8008330:	08008385 	.word	0x08008385
 8008334:	08008301 	.word	0x08008301
 8008338:	08008301 	.word	0x08008301
 800833c:	08008301 	.word	0x08008301
 8008340:	08008301 	.word	0x08008301
 8008344:	08008489 	.word	0x08008489
 8008348:	080083b1 	.word	0x080083b1
 800834c:	08008443 	.word	0x08008443
 8008350:	08008301 	.word	0x08008301
 8008354:	08008301 	.word	0x08008301
 8008358:	080084ab 	.word	0x080084ab
 800835c:	08008301 	.word	0x08008301
 8008360:	080083b1 	.word	0x080083b1
 8008364:	08008301 	.word	0x08008301
 8008368:	08008301 	.word	0x08008301
 800836c:	0800844b 	.word	0x0800844b
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	1d1a      	adds	r2, r3, #4
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	602a      	str	r2, [r5, #0]
 8008378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800837c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008380:	2301      	movs	r3, #1
 8008382:	e09f      	b.n	80084c4 <_printf_i+0x1ec>
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	682b      	ldr	r3, [r5, #0]
 8008388:	0607      	lsls	r7, r0, #24
 800838a:	f103 0104 	add.w	r1, r3, #4
 800838e:	6029      	str	r1, [r5, #0]
 8008390:	d501      	bpl.n	8008396 <_printf_i+0xbe>
 8008392:	681e      	ldr	r6, [r3, #0]
 8008394:	e003      	b.n	800839e <_printf_i+0xc6>
 8008396:	0646      	lsls	r6, r0, #25
 8008398:	d5fb      	bpl.n	8008392 <_printf_i+0xba>
 800839a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800839e:	2e00      	cmp	r6, #0
 80083a0:	da03      	bge.n	80083aa <_printf_i+0xd2>
 80083a2:	232d      	movs	r3, #45	; 0x2d
 80083a4:	4276      	negs	r6, r6
 80083a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083aa:	485a      	ldr	r0, [pc, #360]	; (8008514 <_printf_i+0x23c>)
 80083ac:	230a      	movs	r3, #10
 80083ae:	e012      	b.n	80083d6 <_printf_i+0xfe>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	6820      	ldr	r0, [r4, #0]
 80083b4:	1d19      	adds	r1, r3, #4
 80083b6:	6029      	str	r1, [r5, #0]
 80083b8:	0605      	lsls	r5, r0, #24
 80083ba:	d501      	bpl.n	80083c0 <_printf_i+0xe8>
 80083bc:	681e      	ldr	r6, [r3, #0]
 80083be:	e002      	b.n	80083c6 <_printf_i+0xee>
 80083c0:	0641      	lsls	r1, r0, #25
 80083c2:	d5fb      	bpl.n	80083bc <_printf_i+0xe4>
 80083c4:	881e      	ldrh	r6, [r3, #0]
 80083c6:	4853      	ldr	r0, [pc, #332]	; (8008514 <_printf_i+0x23c>)
 80083c8:	2f6f      	cmp	r7, #111	; 0x6f
 80083ca:	bf0c      	ite	eq
 80083cc:	2308      	moveq	r3, #8
 80083ce:	230a      	movne	r3, #10
 80083d0:	2100      	movs	r1, #0
 80083d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083d6:	6865      	ldr	r5, [r4, #4]
 80083d8:	60a5      	str	r5, [r4, #8]
 80083da:	2d00      	cmp	r5, #0
 80083dc:	bfa2      	ittt	ge
 80083de:	6821      	ldrge	r1, [r4, #0]
 80083e0:	f021 0104 	bicge.w	r1, r1, #4
 80083e4:	6021      	strge	r1, [r4, #0]
 80083e6:	b90e      	cbnz	r6, 80083ec <_printf_i+0x114>
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	d04b      	beq.n	8008484 <_printf_i+0x1ac>
 80083ec:	4615      	mov	r5, r2
 80083ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80083f2:	fb03 6711 	mls	r7, r3, r1, r6
 80083f6:	5dc7      	ldrb	r7, [r0, r7]
 80083f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083fc:	4637      	mov	r7, r6
 80083fe:	42bb      	cmp	r3, r7
 8008400:	460e      	mov	r6, r1
 8008402:	d9f4      	bls.n	80083ee <_printf_i+0x116>
 8008404:	2b08      	cmp	r3, #8
 8008406:	d10b      	bne.n	8008420 <_printf_i+0x148>
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	07de      	lsls	r6, r3, #31
 800840c:	d508      	bpl.n	8008420 <_printf_i+0x148>
 800840e:	6923      	ldr	r3, [r4, #16]
 8008410:	6861      	ldr	r1, [r4, #4]
 8008412:	4299      	cmp	r1, r3
 8008414:	bfde      	ittt	le
 8008416:	2330      	movle	r3, #48	; 0x30
 8008418:	f805 3c01 	strble.w	r3, [r5, #-1]
 800841c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008420:	1b52      	subs	r2, r2, r5
 8008422:	6122      	str	r2, [r4, #16]
 8008424:	f8cd a000 	str.w	sl, [sp]
 8008428:	464b      	mov	r3, r9
 800842a:	aa03      	add	r2, sp, #12
 800842c:	4621      	mov	r1, r4
 800842e:	4640      	mov	r0, r8
 8008430:	f7ff fee4 	bl	80081fc <_printf_common>
 8008434:	3001      	adds	r0, #1
 8008436:	d14a      	bne.n	80084ce <_printf_i+0x1f6>
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	b004      	add	sp, #16
 800843e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	f043 0320 	orr.w	r3, r3, #32
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	4833      	ldr	r0, [pc, #204]	; (8008518 <_printf_i+0x240>)
 800844c:	2778      	movs	r7, #120	; 0x78
 800844e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	6829      	ldr	r1, [r5, #0]
 8008456:	061f      	lsls	r7, r3, #24
 8008458:	f851 6b04 	ldr.w	r6, [r1], #4
 800845c:	d402      	bmi.n	8008464 <_printf_i+0x18c>
 800845e:	065f      	lsls	r7, r3, #25
 8008460:	bf48      	it	mi
 8008462:	b2b6      	uxthmi	r6, r6
 8008464:	07df      	lsls	r7, r3, #31
 8008466:	bf48      	it	mi
 8008468:	f043 0320 	orrmi.w	r3, r3, #32
 800846c:	6029      	str	r1, [r5, #0]
 800846e:	bf48      	it	mi
 8008470:	6023      	strmi	r3, [r4, #0]
 8008472:	b91e      	cbnz	r6, 800847c <_printf_i+0x1a4>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	f023 0320 	bic.w	r3, r3, #32
 800847a:	6023      	str	r3, [r4, #0]
 800847c:	2310      	movs	r3, #16
 800847e:	e7a7      	b.n	80083d0 <_printf_i+0xf8>
 8008480:	4824      	ldr	r0, [pc, #144]	; (8008514 <_printf_i+0x23c>)
 8008482:	e7e4      	b.n	800844e <_printf_i+0x176>
 8008484:	4615      	mov	r5, r2
 8008486:	e7bd      	b.n	8008404 <_printf_i+0x12c>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	6826      	ldr	r6, [r4, #0]
 800848c:	6961      	ldr	r1, [r4, #20]
 800848e:	1d18      	adds	r0, r3, #4
 8008490:	6028      	str	r0, [r5, #0]
 8008492:	0635      	lsls	r5, r6, #24
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	d501      	bpl.n	800849c <_printf_i+0x1c4>
 8008498:	6019      	str	r1, [r3, #0]
 800849a:	e002      	b.n	80084a2 <_printf_i+0x1ca>
 800849c:	0670      	lsls	r0, r6, #25
 800849e:	d5fb      	bpl.n	8008498 <_printf_i+0x1c0>
 80084a0:	8019      	strh	r1, [r3, #0]
 80084a2:	2300      	movs	r3, #0
 80084a4:	6123      	str	r3, [r4, #16]
 80084a6:	4615      	mov	r5, r2
 80084a8:	e7bc      	b.n	8008424 <_printf_i+0x14c>
 80084aa:	682b      	ldr	r3, [r5, #0]
 80084ac:	1d1a      	adds	r2, r3, #4
 80084ae:	602a      	str	r2, [r5, #0]
 80084b0:	681d      	ldr	r5, [r3, #0]
 80084b2:	6862      	ldr	r2, [r4, #4]
 80084b4:	2100      	movs	r1, #0
 80084b6:	4628      	mov	r0, r5
 80084b8:	f7f7 feba 	bl	8000230 <memchr>
 80084bc:	b108      	cbz	r0, 80084c2 <_printf_i+0x1ea>
 80084be:	1b40      	subs	r0, r0, r5
 80084c0:	6060      	str	r0, [r4, #4]
 80084c2:	6863      	ldr	r3, [r4, #4]
 80084c4:	6123      	str	r3, [r4, #16]
 80084c6:	2300      	movs	r3, #0
 80084c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084cc:	e7aa      	b.n	8008424 <_printf_i+0x14c>
 80084ce:	6923      	ldr	r3, [r4, #16]
 80084d0:	462a      	mov	r2, r5
 80084d2:	4649      	mov	r1, r9
 80084d4:	4640      	mov	r0, r8
 80084d6:	47d0      	blx	sl
 80084d8:	3001      	adds	r0, #1
 80084da:	d0ad      	beq.n	8008438 <_printf_i+0x160>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	079b      	lsls	r3, r3, #30
 80084e0:	d413      	bmi.n	800850a <_printf_i+0x232>
 80084e2:	68e0      	ldr	r0, [r4, #12]
 80084e4:	9b03      	ldr	r3, [sp, #12]
 80084e6:	4298      	cmp	r0, r3
 80084e8:	bfb8      	it	lt
 80084ea:	4618      	movlt	r0, r3
 80084ec:	e7a6      	b.n	800843c <_printf_i+0x164>
 80084ee:	2301      	movs	r3, #1
 80084f0:	4632      	mov	r2, r6
 80084f2:	4649      	mov	r1, r9
 80084f4:	4640      	mov	r0, r8
 80084f6:	47d0      	blx	sl
 80084f8:	3001      	adds	r0, #1
 80084fa:	d09d      	beq.n	8008438 <_printf_i+0x160>
 80084fc:	3501      	adds	r5, #1
 80084fe:	68e3      	ldr	r3, [r4, #12]
 8008500:	9903      	ldr	r1, [sp, #12]
 8008502:	1a5b      	subs	r3, r3, r1
 8008504:	42ab      	cmp	r3, r5
 8008506:	dcf2      	bgt.n	80084ee <_printf_i+0x216>
 8008508:	e7eb      	b.n	80084e2 <_printf_i+0x20a>
 800850a:	2500      	movs	r5, #0
 800850c:	f104 0619 	add.w	r6, r4, #25
 8008510:	e7f5      	b.n	80084fe <_printf_i+0x226>
 8008512:	bf00      	nop
 8008514:	080086ed 	.word	0x080086ed
 8008518:	080086fe 	.word	0x080086fe

0800851c <memmove>:
 800851c:	4288      	cmp	r0, r1
 800851e:	b510      	push	{r4, lr}
 8008520:	eb01 0402 	add.w	r4, r1, r2
 8008524:	d902      	bls.n	800852c <memmove+0x10>
 8008526:	4284      	cmp	r4, r0
 8008528:	4623      	mov	r3, r4
 800852a:	d807      	bhi.n	800853c <memmove+0x20>
 800852c:	1e43      	subs	r3, r0, #1
 800852e:	42a1      	cmp	r1, r4
 8008530:	d008      	beq.n	8008544 <memmove+0x28>
 8008532:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008536:	f803 2f01 	strb.w	r2, [r3, #1]!
 800853a:	e7f8      	b.n	800852e <memmove+0x12>
 800853c:	4402      	add	r2, r0
 800853e:	4601      	mov	r1, r0
 8008540:	428a      	cmp	r2, r1
 8008542:	d100      	bne.n	8008546 <memmove+0x2a>
 8008544:	bd10      	pop	{r4, pc}
 8008546:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800854a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800854e:	e7f7      	b.n	8008540 <memmove+0x24>

08008550 <_sbrk_r>:
 8008550:	b538      	push	{r3, r4, r5, lr}
 8008552:	4d06      	ldr	r5, [pc, #24]	; (800856c <_sbrk_r+0x1c>)
 8008554:	2300      	movs	r3, #0
 8008556:	4604      	mov	r4, r0
 8008558:	4608      	mov	r0, r1
 800855a:	602b      	str	r3, [r5, #0]
 800855c:	f7f8 fbda 	bl	8000d14 <_sbrk>
 8008560:	1c43      	adds	r3, r0, #1
 8008562:	d102      	bne.n	800856a <_sbrk_r+0x1a>
 8008564:	682b      	ldr	r3, [r5, #0]
 8008566:	b103      	cbz	r3, 800856a <_sbrk_r+0x1a>
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	bd38      	pop	{r3, r4, r5, pc}
 800856c:	20005620 	.word	0x20005620

08008570 <_realloc_r>:
 8008570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008574:	4680      	mov	r8, r0
 8008576:	4614      	mov	r4, r2
 8008578:	460e      	mov	r6, r1
 800857a:	b921      	cbnz	r1, 8008586 <_realloc_r+0x16>
 800857c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008580:	4611      	mov	r1, r2
 8008582:	f7ff bc57 	b.w	8007e34 <_malloc_r>
 8008586:	b92a      	cbnz	r2, 8008594 <_realloc_r+0x24>
 8008588:	f7ff fbe8 	bl	8007d5c <_free_r>
 800858c:	4625      	mov	r5, r4
 800858e:	4628      	mov	r0, r5
 8008590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008594:	f000 f81b 	bl	80085ce <_malloc_usable_size_r>
 8008598:	4284      	cmp	r4, r0
 800859a:	4607      	mov	r7, r0
 800859c:	d802      	bhi.n	80085a4 <_realloc_r+0x34>
 800859e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80085a2:	d812      	bhi.n	80085ca <_realloc_r+0x5a>
 80085a4:	4621      	mov	r1, r4
 80085a6:	4640      	mov	r0, r8
 80085a8:	f7ff fc44 	bl	8007e34 <_malloc_r>
 80085ac:	4605      	mov	r5, r0
 80085ae:	2800      	cmp	r0, #0
 80085b0:	d0ed      	beq.n	800858e <_realloc_r+0x1e>
 80085b2:	42bc      	cmp	r4, r7
 80085b4:	4622      	mov	r2, r4
 80085b6:	4631      	mov	r1, r6
 80085b8:	bf28      	it	cs
 80085ba:	463a      	movcs	r2, r7
 80085bc:	f7ff fbc0 	bl	8007d40 <memcpy>
 80085c0:	4631      	mov	r1, r6
 80085c2:	4640      	mov	r0, r8
 80085c4:	f7ff fbca 	bl	8007d5c <_free_r>
 80085c8:	e7e1      	b.n	800858e <_realloc_r+0x1e>
 80085ca:	4635      	mov	r5, r6
 80085cc:	e7df      	b.n	800858e <_realloc_r+0x1e>

080085ce <_malloc_usable_size_r>:
 80085ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085d2:	1f18      	subs	r0, r3, #4
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	bfbc      	itt	lt
 80085d8:	580b      	ldrlt	r3, [r1, r0]
 80085da:	18c0      	addlt	r0, r0, r3
 80085dc:	4770      	bx	lr
	...

080085e0 <_init>:
 80085e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e2:	bf00      	nop
 80085e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e6:	bc08      	pop	{r3}
 80085e8:	469e      	mov	lr, r3
 80085ea:	4770      	bx	lr

080085ec <_fini>:
 80085ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ee:	bf00      	nop
 80085f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f2:	bc08      	pop	{r3}
 80085f4:	469e      	mov	lr, r3
 80085f6:	4770      	bx	lr
