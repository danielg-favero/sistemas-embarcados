
state_machines.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002450  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08002630  08002630  00012630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026cc  080026cc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  080026cc  080026cc  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026cc  080026cc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026d0  080026d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  080026d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000008c  08002760  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08002760  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000049fc  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001334  00000000  00000000  00024afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000658  00000000  00000000  00025e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000499  00000000  00000000  00026488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cde4  00000000  00000000  00026921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006727  00000000  00000000  00043705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b17cc  00000000  00000000  00049e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001ecc  00000000  00000000  000fb5f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000fd4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08002618 	.word	0x08002618

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	08002618 	.word	0x08002618

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <handler>:
/**
  * @brief  The application entry point.
  * @retval int
  */

void handler(unsigned char *string) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
	printf("Imprimindo dados recebidos...\n\r");
 80002c8:	4805      	ldr	r0, [pc, #20]	; (80002e0 <handler+0x20>)
 80002ca:	f001 fb31 	bl	8001930 <iprintf>
	printf("%s\n\r", string);
 80002ce:	6879      	ldr	r1, [r7, #4]
 80002d0:	4804      	ldr	r0, [pc, #16]	; (80002e4 <handler+0x24>)
 80002d2:	f001 fb2d 	bl	8001930 <iprintf>
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	08002630 	.word	0x08002630
 80002e4:	08002650 	.word	0x08002650

080002e8 <error>:

void error(unsigned char* string) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	printf("%s\n\r", string);
 80002f0:	6879      	ldr	r1, [r7, #4]
 80002f2:	4803      	ldr	r0, [pc, #12]	; (8000300 <error+0x18>)
 80002f4:	f001 fb1c 	bl	8001930 <iprintf>
}
 80002f8:	bf00      	nop
 80002fa:	3708      	adds	r7, #8
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	08002650 	.word	0x08002650

08000304 <main>:

int main(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	b0d8      	sub	sp, #352	; 0x160
 8000308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800030a:	f000 fb65 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800030e:	f000 f83d 	bl	800038c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000312:	f000 f885 	bl	8000420 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  sm_t sm1, sm2;
  initialize(&sm1, 43707, handler, error);
 8000316:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800031a:	4b17      	ldr	r3, [pc, #92]	; (8000378 <main+0x74>)
 800031c:	4a17      	ldr	r2, [pc, #92]	; (800037c <main+0x78>)
 800031e:	f64a 21bb 	movw	r1, #43707	; 0xaabb
 8000322:	f000 f9b7 	bl	8000694 <initialize>
  initialize(&sm2, 13500, handler, error);
 8000326:	4638      	mov	r0, r7
 8000328:	4b13      	ldr	r3, [pc, #76]	; (8000378 <main+0x74>)
 800032a:	4a14      	ldr	r2, [pc, #80]	; (800037c <main+0x78>)
 800032c:	f243 41bc 	movw	r1, #13500	; 0x34bc
 8000330:	f000 f9b0 	bl	8000694 <initialize>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  execute(&sm1, data1, sizeof(data1));
 8000334:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000338:	2209      	movs	r2, #9
 800033a:	4911      	ldr	r1, [pc, #68]	; (8000380 <main+0x7c>)
 800033c:	4618      	mov	r0, r3
 800033e:	f000 f9f9 	bl	8000734 <execute>
	  execute(&sm2, data1, sizeof(data1));
 8000342:	463b      	mov	r3, r7
 8000344:	2209      	movs	r2, #9
 8000346:	490e      	ldr	r1, [pc, #56]	; (8000380 <main+0x7c>)
 8000348:	4618      	mov	r0, r3
 800034a:	f000 f9f3 	bl	8000734 <execute>

	  execute(&sm1, data2, sizeof(data2));
 800034e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000352:	2205      	movs	r2, #5
 8000354:	490b      	ldr	r1, [pc, #44]	; (8000384 <main+0x80>)
 8000356:	4618      	mov	r0, r3
 8000358:	f000 f9ec 	bl	8000734 <execute>
	  execute(&sm2, data2, sizeof(data2));
 800035c:	463b      	mov	r3, r7
 800035e:	2205      	movs	r2, #5
 8000360:	4908      	ldr	r1, [pc, #32]	; (8000384 <main+0x80>)
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f9e6 	bl	8000734 <execute>

	  execute(&sm1, data3, sizeof(data3));
 8000368:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800036c:	220e      	movs	r2, #14
 800036e:	4906      	ldr	r1, [pc, #24]	; (8000388 <main+0x84>)
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f9df 	bl	8000734 <execute>
	  execute(&sm1, data1, sizeof(data1));
 8000376:	e7dd      	b.n	8000334 <main+0x30>
 8000378:	080002e9 	.word	0x080002e9
 800037c:	080002c1 	.word	0x080002c1
 8000380:	20000000 	.word	0x20000000
 8000384:	2000000c 	.word	0x2000000c
 8000388:	20000014 	.word	0x20000014

0800038c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b094      	sub	sp, #80	; 0x50
 8000390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000392:	f107 0318 	add.w	r3, r7, #24
 8000396:	2238      	movs	r2, #56	; 0x38
 8000398:	2100      	movs	r1, #0
 800039a:	4618      	mov	r0, r3
 800039c:	f001 fb1d 	bl	80019da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
 80003ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003b2:	f000 fc6d 	bl	8000c90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80003b6:	2301      	movs	r3, #1
 80003b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c0:	2302      	movs	r3, #2
 80003c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003c4:	2303      	movs	r3, #3
 80003c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80003c8:	2302      	movs	r3, #2
 80003ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 80003cc:	2319      	movs	r3, #25
 80003ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003d0:	2302      	movs	r3, #2
 80003d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003d4:	2302      	movs	r3, #2
 80003d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003d8:	2302      	movs	r3, #2
 80003da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003dc:	f107 0318 	add.w	r3, r7, #24
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fcf9 	bl	8000dd8 <HAL_RCC_OscConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80003ec:	f000 f83c 	bl	8000468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f0:	230f      	movs	r3, #15
 80003f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f4:	2303      	movs	r3, #3
 80003f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2104      	movs	r1, #4
 8000408:	4618      	mov	r0, r3
 800040a:	f000 fffd 	bl	8001408 <HAL_RCC_ClockConfig>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000414:	f000 f828 	bl	8000468 <Error_Handler>
  }
}
 8000418:	bf00      	nop
 800041a:	3750      	adds	r7, #80	; 0x50
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000426:	4b0f      	ldr	r3, [pc, #60]	; (8000464 <MX_GPIO_Init+0x44>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800042a:	4a0e      	ldr	r2, [pc, #56]	; (8000464 <MX_GPIO_Init+0x44>)
 800042c:	f043 0320 	orr.w	r3, r3, #32
 8000430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_GPIO_Init+0x44>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000436:	f003 0320 	and.w	r3, r3, #32
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800043e:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_GPIO_Init+0x44>)
 8000440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000442:	4a08      	ldr	r2, [pc, #32]	; (8000464 <MX_GPIO_Init+0x44>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800044a:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_GPIO_Init+0x44>)
 800044c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	603b      	str	r3, [r7, #0]
 8000454:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800046c:	b672      	cpsid	i
}
 800046e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000470:	e7fe      	b.n	8000470 <Error_Handler+0x8>

08000472 <actionSTX>:
#include "sm.h"

static void actionSTX(sm_t *sm, unsigned char data) {
 8000472:	b480      	push	{r7}
 8000474:	b083      	sub	sp, #12
 8000476:	af00      	add	r7, sp, #0
 8000478:	6078      	str	r0, [r7, #4]
 800047a:	460b      	mov	r3, r1
 800047c:	70fb      	strb	r3, [r7, #3]
	if(data == STX){
 800047e:	78fb      	ldrb	r3, [r7, #3]
 8000480:	2b24      	cmp	r3, #36	; 0x24
 8000482:	d112      	bne.n	80004aa <actionSTX+0x38>
		sm->idx = 0;
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	2200      	movs	r2, #0
 8000488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		sm->qtd	= 0;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2200      	movs	r2, #0
 8000490:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		sm->chk = 0;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2200      	movs	r2, #0
 8000498:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		sm->state = ST_ADDR;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	2201      	movs	r2, #1
 80004a0:	701a      	strb	r2, [r3, #0]
		sm->flag_addr = 0;
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2200      	movs	r2, #0
 80004a6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	}
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
	...

080004b8 <actionAddr>:

static void actionAddr(sm_t *sm, unsigned char data){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
	// Receber o endereço no formato little endian
	if(!sm->flag_addr) {
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d10d      	bne.n	80004ea <actionAddr+0x32>
		sm->addr = (unsigned short)(data);
 80004ce:	78fb      	ldrb	r3, [r7, #3]
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		sm->chk = data;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	78fa      	ldrb	r2, [r7, #3]
 80004dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		sm->flag_addr = 1;
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2201      	movs	r2, #1
 80004e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
			if(sm->HandleError != NULL){
				sm->HandleError("Endereço Errado...\n\r");
			}
		}
	}
}
 80004e8:	e031      	b.n	800054e <actionAddr+0x96>
		sm->flag_addr = 0;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		sm->addr |= (unsigned short)(data << 8);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80004f8:	78fb      	ldrb	r3, [r7, #3]
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	021b      	lsls	r3, r3, #8
 80004fe:	b29b      	uxth	r3, r3
 8000500:	4313      	orrs	r3, r2
 8000502:	b29a      	uxth	r2, r3
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
		if(sm->addr == sm->my_addr){
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8000516:	429a      	cmp	r2, r3
 8000518:	d10c      	bne.n	8000534 <actionAddr+0x7c>
			sm->state = ST_QTD;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	2202      	movs	r2, #2
 800051e:	701a      	strb	r2, [r3, #0]
			sm->chk += data;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8000526:	78fb      	ldrb	r3, [r7, #3]
 8000528:	4413      	add	r3, r2
 800052a:	b2da      	uxtb	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
}
 8000532:	e00c      	b.n	800054e <actionAddr+0x96>
			sm->state = ST_STX;
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
			if(sm->HandleError != NULL){
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000540:	2b00      	cmp	r3, #0
 8000542:	d004      	beq.n	800054e <actionAddr+0x96>
				sm->HandleError("Endereço Errado...\n\r");
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800054a:	4803      	ldr	r0, [pc, #12]	; (8000558 <actionAddr+0xa0>)
 800054c:	4798      	blx	r3
}
 800054e:	bf00      	nop
 8000550:	3708      	adds	r7, #8
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	08002658 	.word	0x08002658

0800055c <actionQtd>:

static void actionQtd(sm_t *sm, unsigned char data) {
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	460b      	mov	r3, r1
 8000566:	70fb      	strb	r3, [r7, #3]
	if((data >= 1) && (data <= 128)){
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d013      	beq.n	8000596 <actionQtd+0x3a>
 800056e:	78fb      	ldrb	r3, [r7, #3]
 8000570:	2b80      	cmp	r3, #128	; 0x80
 8000572:	d810      	bhi.n	8000596 <actionQtd+0x3a>
		sm->qtd = data;
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	78fa      	ldrb	r2, [r7, #3]
 8000578:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
		sm->chk += data;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8000582:	78fb      	ldrb	r3, [r7, #3]
 8000584:	4413      	add	r3, r2
 8000586:	b2da      	uxtb	r2, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
		sm->state = ST_DATA;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2203      	movs	r2, #3
 8000592:	701a      	strb	r2, [r3, #0]
 8000594:	e003      	b.n	800059e <actionQtd+0x42>
	} else {
		sm->state = ST_STX;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	}
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <actionData>:

static void actionData(sm_t *sm, unsigned char data) {
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	70fb      	strb	r3, [r7, #3]
	sm->buffer[sm->idx++] = data;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80005bc:	1c59      	adds	r1, r3, #1
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	4413      	add	r3, r2
 80005c8:	78fa      	ldrb	r2, [r7, #3]
 80005ca:	705a      	strb	r2, [r3, #1]
	sm->chk += data;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80005d2:	78fb      	ldrb	r3, [r7, #3]
 80005d4:	4413      	add	r3, r2
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

	if(--sm->qtd == 0){
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80005e4:	3b01      	subs	r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <actionData+0x54>
		sm->state = ST_CHK;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2204      	movs	r2, #4
 80005fc:	701a      	strb	r2, [r3, #0]
	}
}
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
	...

0800060c <actionChk>:

static void actionChk(sm_t *sm, unsigned char data) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	70fb      	strb	r3, [r7, #3]
	if(data == sm->chk) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800061e:	78fa      	ldrb	r2, [r7, #3]
 8000620:	429a      	cmp	r2, r3
 8000622:	d103      	bne.n	800062c <actionChk+0x20>
		sm->state = ST_ETX;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2205      	movs	r2, #5
 8000628:	701a      	strb	r2, [r3, #0]

		if(sm->HandleError != NULL){
			sm->HandleError("Falha no Checksum...\n\r");
		}
	}
}
 800062a:	e00c      	b.n	8000646 <actionChk+0x3a>
		sm->state = ST_STX;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	701a      	strb	r2, [r3, #0]
		if(sm->HandleError != NULL){
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000638:	2b00      	cmp	r3, #0
 800063a:	d004      	beq.n	8000646 <actionChk+0x3a>
			sm->HandleError("Falha no Checksum...\n\r");
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000642:	4803      	ldr	r0, [pc, #12]	; (8000650 <actionChk+0x44>)
 8000644:	4798      	blx	r3
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	08002670 	.word	0x08002670

08000654 <actionETX>:

static void actionETX(sm_t *sm, unsigned char data) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	70fb      	strb	r3, [r7, #3]
	if(data == ETX){
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	2b0a      	cmp	r3, #10
 8000664:	d112      	bne.n	800068c <actionETX+0x38>
		sm->buffer[sm->idx] = '\0';
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	2200      	movs	r2, #0
 8000672:	705a      	strb	r2, [r3, #1]

		if(sm->HandlePackage != NULL){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <actionETX+0x38>
			sm->HandlePackage(sm->buffer);
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	3201      	adds	r2, #1
 8000688:	4610      	mov	r0, r2
 800068a:	4798      	blx	r3
		}
	}
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <initialize>:

void initialize(sm_t *sm, unsigned short my_addr, handle_t handle_function, handle_t error_function) {
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	607a      	str	r2, [r7, #4]
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	460b      	mov	r3, r1
 80006a2:	817b      	strh	r3, [r7, #10]
	sm->state = ST_STX;
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
	sm->my_addr = my_addr;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	897a      	ldrh	r2, [r7, #10]
 80006ae:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	sm->buffer[0] = 0;
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	2200      	movs	r2, #0
 80006b6:	705a      	strb	r2, [r3, #1]
	sm->chk = 0;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	sm->idx = 0;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	2200      	movs	r2, #0
 80006c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	sm->qtd = 0;
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	sm->action[ST_STX] = actionSTX;
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4a12      	ldr	r2, [pc, #72]	; (800071c <initialize+0x88>)
 80006d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	sm->action[ST_ADDR] = actionAddr;
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	4a11      	ldr	r2, [pc, #68]	; (8000720 <initialize+0x8c>)
 80006dc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	sm->action[ST_QTD] = actionQtd;
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4a10      	ldr	r2, [pc, #64]	; (8000724 <initialize+0x90>)
 80006e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	sm->action[ST_DATA] = actionData;
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4a0f      	ldr	r2, [pc, #60]	; (8000728 <initialize+0x94>)
 80006ec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	sm->action[ST_CHK] = actionChk;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <initialize+0x98>)
 80006f4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	sm->action[ST_ETX] = actionETX;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	4a0d      	ldr	r2, [pc, #52]	; (8000730 <initialize+0x9c>)
 80006fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	sm->HandlePackage = handle_function;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	sm->HandleError = error_function;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	683a      	ldr	r2, [r7, #0]
 800070c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	08000473 	.word	0x08000473
 8000720:	080004b9 	.word	0x080004b9
 8000724:	0800055d 	.word	0x0800055d
 8000728:	080005ab 	.word	0x080005ab
 800072c:	0800060d 	.word	0x0800060d
 8000730:	08000655 	.word	0x08000655

08000734 <execute>:

void execute(sm_t *sm, unsigned char *data, int qtd){
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
	int i;

	for(i = 0; i < qtd; i++){
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	e010      	b.n	8000768 <execute+0x34>
		sm->action[sm->state](sm, data[i]);
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	3224      	adds	r2, #36	; 0x24
 8000750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000754:	697a      	ldr	r2, [r7, #20]
 8000756:	68b9      	ldr	r1, [r7, #8]
 8000758:	440a      	add	r2, r1
 800075a:	7812      	ldrb	r2, [r2, #0]
 800075c:	4611      	mov	r1, r2
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	4798      	blx	r3
	for(i = 0; i < qtd; i++){
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	3301      	adds	r3, #1
 8000766:	617b      	str	r3, [r7, #20]
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	429a      	cmp	r2, r3
 800076e:	dbea      	blt.n	8000746 <execute+0x12>
	}
}
 8000770:	bf00      	nop
 8000772:	bf00      	nop
 8000774:	3718      	adds	r7, #24
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x44>)
 8000784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <HAL_MspInit+0x44>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6613      	str	r3, [r2, #96]	; 0x60
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <HAL_MspInit+0x44>)
 8000790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <HAL_MspInit+0x44>)
 800079c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079e:	4a08      	ldr	r2, [pc, #32]	; (80007c0 <HAL_MspInit+0x44>)
 80007a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a4:	6593      	str	r3, [r2, #88]	; 0x58
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <HAL_MspInit+0x44>)
 80007a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007c8:	e7fe      	b.n	80007c8 <NMI_Handler+0x4>

080007ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ce:	e7fe      	b.n	80007ce <HardFault_Handler+0x4>

080007d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <MemManage_Handler+0x4>

080007d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <BusFault_Handler+0x4>

080007dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <UsageFault_Handler+0x4>

080007e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000810:	f000 f93c 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}

08000818 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e00a      	b.n	8000840 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800082a:	f3af 8000 	nop.w
 800082e:	4601      	mov	r1, r0
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	60ba      	str	r2, [r7, #8]
 8000836:	b2ca      	uxtb	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	dbf0      	blt.n	800082a <_read+0x12>
  }

  return len;
 8000848:	687b      	ldr	r3, [r7, #4]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	e009      	b.n	8000878 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	60ba      	str	r2, [r7, #8]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	429a      	cmp	r2, r3
 800087e:	dbf1      	blt.n	8000864 <_write+0x12>
  }
  return len;
 8000880:	687b      	ldr	r3, [r7, #4]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <_close>:

int _close(int file)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000896:	4618      	mov	r0, r3
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b2:	605a      	str	r2, [r3, #4]
  return 0;
 80008b4:	2300      	movs	r3, #0
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <_isatty>:

int _isatty(int file)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr

080008d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
	...

080008f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008fc:	4a14      	ldr	r2, [pc, #80]	; (8000950 <_sbrk+0x5c>)
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <_sbrk+0x60>)
 8000900:	1ad3      	subs	r3, r2, r3
 8000902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000908:	4b13      	ldr	r3, [pc, #76]	; (8000958 <_sbrk+0x64>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <_sbrk+0x64>)
 8000912:	4a12      	ldr	r2, [pc, #72]	; (800095c <_sbrk+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	429a      	cmp	r2, r3
 8000922:	d207      	bcs.n	8000934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000924:	f001 f8a8 	bl	8001a78 <__errno>
 8000928:	4603      	mov	r3, r0
 800092a:	220c      	movs	r2, #12
 800092c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800092e:	f04f 33ff 	mov.w	r3, #4294967295
 8000932:	e009      	b.n	8000948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <_sbrk+0x64>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800093a:	4b07      	ldr	r3, [pc, #28]	; (8000958 <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <_sbrk+0x64>)
 8000944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	4618      	mov	r0, r3
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20008000 	.word	0x20008000
 8000954:	00000400 	.word	0x00000400
 8000958:	200000a8 	.word	0x200000a8
 800095c:	20000200 	.word	0x20000200

08000960 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000984:	480d      	ldr	r0, [pc, #52]	; (80009bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000986:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <LoopForever+0xe>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a0:	4c0b      	ldr	r4, [pc, #44]	; (80009d0 <LoopForever+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ae:	f7ff ffd7 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f001 f867 	bl	8001a84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b6:	f7ff fca5 	bl	8000304 <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
  ldr   r0, =_estack
 80009bc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80009c8:	080026d4 	.word	0x080026d4
  ldr r2, =_sbss
 80009cc:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80009d0:	200001fc 	.word	0x200001fc

080009d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_2_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009de:	2300      	movs	r3, #0
 80009e0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <HAL_Init+0x3c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <HAL_Init+0x3c>)
 80009e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ee:	2003      	movs	r0, #3
 80009f0:	f000 f91c 	bl	8000c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f4:	200f      	movs	r0, #15
 80009f6:	f000 f80f 	bl	8000a18 <HAL_InitTick>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d002      	beq.n	8000a06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	71fb      	strb	r3, [r7, #7]
 8000a04:	e001      	b.n	8000a0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a06:	f7ff feb9 	bl	800077c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a0a:	79fb      	ldrb	r3, [r7, #7]

}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3708      	adds	r7, #8
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	2300      	movs	r3, #0
 8000a22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a24:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_InitTick+0x68>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d022      	beq.n	8000a72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a2c:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <HAL_InitTick+0x6c>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <HAL_InitTick+0x68>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a38:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 f918 	bl	8000c76 <HAL_SYSTICK_Config>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10f      	bne.n	8000a6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b0f      	cmp	r3, #15
 8000a50:	d809      	bhi.n	8000a66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a52:	2200      	movs	r2, #0
 8000a54:	6879      	ldr	r1, [r7, #4]
 8000a56:	f04f 30ff 	mov.w	r0, #4294967295
 8000a5a:	f000 f8f2 	bl	8000c42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_InitTick+0x70>)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	e007      	b.n	8000a76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	73fb      	strb	r3, [r7, #15]
 8000a6a:	e004      	b.n	8000a76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	e001      	b.n	8000a76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000002c 	.word	0x2000002c
 8000a84:	20000024 	.word	0x20000024
 8000a88:	20000028 	.word	0x20000028

08000a8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_IncTick+0x1c>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x20>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4413      	add	r3, r2
 8000a9a:	4a03      	ldr	r2, [pc, #12]	; (8000aa8 <HAL_IncTick+0x1c>)
 8000a9c:	6013      	str	r3, [r2, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	200000ac 	.word	0x200000ac
 8000aac:	2000002c 	.word	0x2000002c

08000ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_GetTick+0x14>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	200000ac 	.word	0x200000ac

08000ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ade:	68ba      	ldr	r2, [r7, #8]
 8000ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afa:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <__NVIC_SetPriorityGrouping+0x44>)
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	60d3      	str	r3, [r2, #12]
}
 8000b00:	bf00      	nop
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__NVIC_GetPriorityGrouping+0x18>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	0a1b      	lsrs	r3, r3, #8
 8000b1a:	f003 0307 	and.w	r3, r3, #7
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	db0a      	blt.n	8000b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	490c      	ldr	r1, [pc, #48]	; (8000b78 <__NVIC_SetPriority+0x4c>)
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	0112      	lsls	r2, r2, #4
 8000b4c:	b2d2      	uxtb	r2, r2
 8000b4e:	440b      	add	r3, r1
 8000b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b54:	e00a      	b.n	8000b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4908      	ldr	r1, [pc, #32]	; (8000b7c <__NVIC_SetPriority+0x50>)
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	f003 030f 	and.w	r3, r3, #15
 8000b62:	3b04      	subs	r3, #4
 8000b64:	0112      	lsls	r2, r2, #4
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	440b      	add	r3, r1
 8000b6a:	761a      	strb	r2, [r3, #24]
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000e100 	.word	0xe000e100
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b089      	sub	sp, #36	; 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	f1c3 0307 	rsb	r3, r3, #7
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	bf28      	it	cs
 8000b9e:	2304      	movcs	r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3304      	adds	r3, #4
 8000ba6:	2b06      	cmp	r3, #6
 8000ba8:	d902      	bls.n	8000bb0 <NVIC_EncodePriority+0x30>
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3b03      	subs	r3, #3
 8000bae:	e000      	b.n	8000bb2 <NVIC_EncodePriority+0x32>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	43da      	mvns	r2, r3
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd2:	43d9      	mvns	r1, r3
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	4313      	orrs	r3, r2
         );
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3724      	adds	r7, #36	; 0x24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
	...

08000be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf8:	d301      	bcc.n	8000bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e00f      	b.n	8000c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <SysTick_Config+0x40>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c06:	210f      	movs	r1, #15
 8000c08:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0c:	f7ff ff8e 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <SysTick_Config+0x40>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <SysTick_Config+0x40>)
 8000c18:	2207      	movs	r2, #7
 8000c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	e000e010 	.word	0xe000e010

08000c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f7ff ff47 	bl	8000ac8 <__NVIC_SetPriorityGrouping>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	4603      	mov	r3, r0
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c50:	f7ff ff5e 	bl	8000b10 <__NVIC_GetPriorityGrouping>
 8000c54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	68b9      	ldr	r1, [r7, #8]
 8000c5a:	6978      	ldr	r0, [r7, #20]
 8000c5c:	f7ff ff90 	bl	8000b80 <NVIC_EncodePriority>
 8000c60:	4602      	mov	r2, r0
 8000c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff5f 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ffb2 	bl	8000be8 <SysTick_Config>
 8000c84:	4603      	mov	r3, r0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d141      	bne.n	8000d22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c9e:	4b4b      	ldr	r3, [pc, #300]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000caa:	d131      	bne.n	8000d10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000cac:	4b47      	ldr	r3, [pc, #284]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000cb2:	4a46      	ldr	r2, [pc, #280]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cbc:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000cc4:	4a41      	ldr	r2, [pc, #260]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ccc:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2232      	movs	r2, #50	; 0x32
 8000cd2:	fb02 f303 	mul.w	r3, r2, r3
 8000cd6:	4a3f      	ldr	r2, [pc, #252]	; (8000dd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cdc:	0c9b      	lsrs	r3, r3, #18
 8000cde:	3301      	adds	r3, #1
 8000ce0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ce2:	e002      	b.n	8000cea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000cea:	4b38      	ldr	r3, [pc, #224]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cf6:	d102      	bne.n	8000cfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f2      	bne.n	8000ce4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000cfe:	4b33      	ldr	r3, [pc, #204]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d00:	695b      	ldr	r3, [r3, #20]
 8000d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d0a:	d158      	bne.n	8000dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e057      	b.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d10:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d16:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d20:	e04d      	b.n	8000dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d28:	d141      	bne.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000d2a:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d36:	d131      	bne.n	8000d9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d3e:	4a23      	ldr	r2, [pc, #140]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d50:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2232      	movs	r2, #50	; 0x32
 8000d5e:	fb02 f303 	mul.w	r3, r2, r3
 8000d62:	4a1c      	ldr	r2, [pc, #112]	; (8000dd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000d64:	fba2 2303 	umull	r2, r3, r2, r3
 8000d68:	0c9b      	lsrs	r3, r3, #18
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d6e:	e002      	b.n	8000d76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d78:	695b      	ldr	r3, [r3, #20]
 8000d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d82:	d102      	bne.n	8000d8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f2      	bne.n	8000d70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d96:	d112      	bne.n	8000dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e011      	b.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000d9c:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000dac:	e007      	b.n	8000dbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000db8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40007000 	.word	0x40007000
 8000dd0:	20000024 	.word	0x20000024
 8000dd4:	431bde83 	.word	0x431bde83

08000dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e306      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d075      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000df6:	4b97      	ldr	r3, [pc, #604]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f003 030c 	and.w	r3, r3, #12
 8000dfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e00:	4b94      	ldr	r3, [pc, #592]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	2b0c      	cmp	r3, #12
 8000e0e:	d102      	bne.n	8000e16 <HAL_RCC_OscConfig+0x3e>
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d002      	beq.n	8000e1c <HAL_RCC_OscConfig+0x44>
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d10b      	bne.n	8000e34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1c:	4b8d      	ldr	r3, [pc, #564]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d05b      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x108>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d157      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e2e1      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3c:	d106      	bne.n	8000e4c <HAL_RCC_OscConfig+0x74>
 8000e3e:	4b85      	ldr	r3, [pc, #532]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a84      	ldr	r2, [pc, #528]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e01d      	b.n	8000e88 <HAL_RCC_OscConfig+0xb0>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e54:	d10c      	bne.n	8000e70 <HAL_RCC_OscConfig+0x98>
 8000e56:	4b7f      	ldr	r3, [pc, #508]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a7e      	ldr	r2, [pc, #504]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e60:	6013      	str	r3, [r2, #0]
 8000e62:	4b7c      	ldr	r3, [pc, #496]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7b      	ldr	r2, [pc, #492]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e6c:	6013      	str	r3, [r2, #0]
 8000e6e:	e00b      	b.n	8000e88 <HAL_RCC_OscConfig+0xb0>
 8000e70:	4b78      	ldr	r3, [pc, #480]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a77      	ldr	r2, [pc, #476]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b75      	ldr	r3, [pc, #468]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a74      	ldr	r2, [pc, #464]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000e82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d013      	beq.n	8000eb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e90:	f7ff fe0e 	bl	8000ab0 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e98:	f7ff fe0a 	bl	8000ab0 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b64      	cmp	r3, #100	; 0x64
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e2a6      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eaa:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f0      	beq.n	8000e98 <HAL_RCC_OscConfig+0xc0>
 8000eb6:	e014      	b.n	8000ee2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fdfa 	bl	8000ab0 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fdf6 	bl	8000ab0 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	; 0x64
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e292      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ed2:	4b60      	ldr	r3, [pc, #384]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f0      	bne.n	8000ec0 <HAL_RCC_OscConfig+0xe8>
 8000ede:	e000      	b.n	8000ee2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ee0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d075      	beq.n	8000fda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eee:	4b59      	ldr	r3, [pc, #356]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000ef0:	689b      	ldr	r3, [r3, #8]
 8000ef2:	f003 030c 	and.w	r3, r3, #12
 8000ef6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ef8:	4b56      	ldr	r3, [pc, #344]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	2b0c      	cmp	r3, #12
 8000f06:	d102      	bne.n	8000f0e <HAL_RCC_OscConfig+0x136>
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d002      	beq.n	8000f14 <HAL_RCC_OscConfig+0x13c>
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d11f      	bne.n	8000f54 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f14:	4b4f      	ldr	r3, [pc, #316]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d005      	beq.n	8000f2c <HAL_RCC_OscConfig+0x154>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d101      	bne.n	8000f2c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	e265      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f2c:	4b49      	ldr	r3, [pc, #292]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691b      	ldr	r3, [r3, #16]
 8000f38:	061b      	lsls	r3, r3, #24
 8000f3a:	4946      	ldr	r1, [pc, #280]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f40:	4b45      	ldr	r3, [pc, #276]	; (8001058 <HAL_RCC_OscConfig+0x280>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fd67 	bl	8000a18 <HAL_InitTick>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d043      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e251      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d023      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f5c:	4b3d      	ldr	r3, [pc, #244]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a3c      	ldr	r2, [pc, #240]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f68:	f7ff fda2 	bl	8000ab0 <HAL_GetTick>
 8000f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f70:	f7ff fd9e 	bl	8000ab0 <HAL_GetTick>
 8000f74:	4602      	mov	r2, r0
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e23a      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f82:	4b34      	ldr	r3, [pc, #208]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d0f0      	beq.n	8000f70 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8e:	4b31      	ldr	r3, [pc, #196]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	061b      	lsls	r3, r3, #24
 8000f9c:	492d      	ldr	r1, [pc, #180]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	604b      	str	r3, [r1, #4]
 8000fa2:	e01a      	b.n	8000fda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fa4:	4b2b      	ldr	r3, [pc, #172]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000faa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fd7e 	bl	8000ab0 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fb8:	f7ff fd7a 	bl	8000ab0 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e216      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fca:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f0      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x1e0>
 8000fd6:	e000      	b.n	8000fda <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fd8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f003 0308 	and.w	r3, r3, #8
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d041      	beq.n	800106a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d01c      	beq.n	8001028 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000ff0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ff4:	4a17      	ldr	r2, [pc, #92]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ffe:	f7ff fd57 	bl	8000ab0 <HAL_GetTick>
 8001002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001006:	f7ff fd53 	bl	8000ab0 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e1ef      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 800101a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0ef      	beq.n	8001006 <HAL_RCC_OscConfig+0x22e>
 8001026:	e020      	b.n	800106a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 800102a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800102e:	4a09      	ldr	r2, [pc, #36]	; (8001054 <HAL_RCC_OscConfig+0x27c>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001038:	f7ff fd3a 	bl	8000ab0 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800103e:	e00d      	b.n	800105c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff fd36 	bl	8000ab0 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d906      	bls.n	800105c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e1d2      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800105c:	4b8c      	ldr	r3, [pc, #560]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 800105e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1ea      	bne.n	8001040 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	2b00      	cmp	r3, #0
 8001074:	f000 80a6 	beq.w	80011c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800107c:	4b84      	ldr	r3, [pc, #528]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 800107e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_RCC_OscConfig+0x2b4>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_RCC_OscConfig+0x2b6>
 800108c:	2300      	movs	r3, #0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00d      	beq.n	80010ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b7f      	ldr	r3, [pc, #508]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	4a7e      	ldr	r2, [pc, #504]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	6593      	str	r3, [r2, #88]	; 0x58
 800109e:	4b7c      	ldr	r3, [pc, #496]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80010aa:	2301      	movs	r3, #1
 80010ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010ae:	4b79      	ldr	r3, [pc, #484]	; (8001294 <HAL_RCC_OscConfig+0x4bc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d118      	bne.n	80010ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010ba:	4b76      	ldr	r3, [pc, #472]	; (8001294 <HAL_RCC_OscConfig+0x4bc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a75      	ldr	r2, [pc, #468]	; (8001294 <HAL_RCC_OscConfig+0x4bc>)
 80010c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c6:	f7ff fcf3 	bl	8000ab0 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ce:	f7ff fcef 	bl	8000ab0 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e18b      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80010e0:	4b6c      	ldr	r3, [pc, #432]	; (8001294 <HAL_RCC_OscConfig+0x4bc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d108      	bne.n	8001106 <HAL_RCC_OscConfig+0x32e>
 80010f4:	4b66      	ldr	r3, [pc, #408]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80010f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010fa:	4a65      	ldr	r2, [pc, #404]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001104:	e024      	b.n	8001150 <HAL_RCC_OscConfig+0x378>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2b05      	cmp	r3, #5
 800110c:	d110      	bne.n	8001130 <HAL_RCC_OscConfig+0x358>
 800110e:	4b60      	ldr	r3, [pc, #384]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001114:	4a5e      	ldr	r2, [pc, #376]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800111e:	4b5c      	ldr	r3, [pc, #368]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001124:	4a5a      	ldr	r2, [pc, #360]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800112e:	e00f      	b.n	8001150 <HAL_RCC_OscConfig+0x378>
 8001130:	4b57      	ldr	r3, [pc, #348]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001136:	4a56      	ldr	r2, [pc, #344]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001140:	4b53      	ldr	r3, [pc, #332]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001146:	4a52      	ldr	r2, [pc, #328]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001148:	f023 0304 	bic.w	r3, r3, #4
 800114c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d016      	beq.n	8001186 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001158:	f7ff fcaa 	bl	8000ab0 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800115e:	e00a      	b.n	8001176 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001160:	f7ff fca6 	bl	8000ab0 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	f241 3288 	movw	r2, #5000	; 0x1388
 800116e:	4293      	cmp	r3, r2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e140      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001176:	4b46      	ldr	r3, [pc, #280]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0ed      	beq.n	8001160 <HAL_RCC_OscConfig+0x388>
 8001184:	e015      	b.n	80011b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001186:	f7ff fc93 	bl	8000ab0 <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800118c:	e00a      	b.n	80011a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800118e:	f7ff fc8f 	bl	8000ab0 <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f241 3288 	movw	r2, #5000	; 0x1388
 800119c:	4293      	cmp	r3, r2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e129      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80011a4:	4b3a      	ldr	r3, [pc, #232]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80011a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1ed      	bne.n	800118e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011b2:	7ffb      	ldrb	r3, [r7, #31]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b8:	4b35      	ldr	r3, [pc, #212]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011bc:	4a34      	ldr	r2, [pc, #208]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80011be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0320 	and.w	r3, r3, #32
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d03c      	beq.n	800124a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d01c      	beq.n	8001212 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80011d8:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80011da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80011de:	4a2c      	ldr	r2, [pc, #176]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011e8:	f7ff fc62 	bl	8000ab0 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80011f0:	f7ff fc5e 	bl	8000ab0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e0fa      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0ef      	beq.n	80011f0 <HAL_RCC_OscConfig+0x418>
 8001210:	e01b      	b.n	800124a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001214:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001218:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001222:	f7ff fc45 	bl	8000ab0 <HAL_GetTick>
 8001226:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001228:	e008      	b.n	800123c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800122a:	f7ff fc41 	bl	8000ab0 <HAL_GetTick>
 800122e:	4602      	mov	r2, r0
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e0dd      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 800123e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1ef      	bne.n	800122a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80d1 	beq.w	80013f6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b0c      	cmp	r3, #12
 800125e:	f000 808b 	beq.w	8001378 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d15e      	bne.n	8001328 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a08      	ldr	r2, [pc, #32]	; (8001290 <HAL_RCC_OscConfig+0x4b8>)
 8001270:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001276:	f7ff fc1b 	bl	8000ab0 <HAL_GetTick>
 800127a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800127c:	e00c      	b.n	8001298 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800127e:	f7ff fc17 	bl	8000ab0 <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d905      	bls.n	8001298 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e0b3      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
 8001290:	40021000 	.word	0x40021000
 8001294:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001298:	4b59      	ldr	r3, [pc, #356]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1ec      	bne.n	800127e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012a4:	4b56      	ldr	r3, [pc, #344]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	4b56      	ldr	r3, [pc, #344]	; (8001404 <HAL_RCC_OscConfig+0x62c>)
 80012aa:	4013      	ands	r3, r2
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	6a11      	ldr	r1, [r2, #32]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80012b4:	3a01      	subs	r2, #1
 80012b6:	0112      	lsls	r2, r2, #4
 80012b8:	4311      	orrs	r1, r2
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80012be:	0212      	lsls	r2, r2, #8
 80012c0:	4311      	orrs	r1, r2
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80012c6:	0852      	lsrs	r2, r2, #1
 80012c8:	3a01      	subs	r2, #1
 80012ca:	0552      	lsls	r2, r2, #21
 80012cc:	4311      	orrs	r1, r2
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80012d2:	0852      	lsrs	r2, r2, #1
 80012d4:	3a01      	subs	r2, #1
 80012d6:	0652      	lsls	r2, r2, #25
 80012d8:	4311      	orrs	r1, r2
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80012de:	06d2      	lsls	r2, r2, #27
 80012e0:	430a      	orrs	r2, r1
 80012e2:	4947      	ldr	r1, [pc, #284]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e8:	4b45      	ldr	r3, [pc, #276]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a44      	ldr	r2, [pc, #272]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 80012ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80012f4:	4b42      	ldr	r3, [pc, #264]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a41      	ldr	r2, [pc, #260]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 80012fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001300:	f7ff fbd6 	bl	8000ab0 <HAL_GetTick>
 8001304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001306:	e008      	b.n	800131a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001308:	f7ff fbd2 	bl	8000ab0 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	2b02      	cmp	r3, #2
 8001314:	d901      	bls.n	800131a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001316:	2303      	movs	r3, #3
 8001318:	e06e      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800131a:	4b39      	ldr	r3, [pc, #228]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d0f0      	beq.n	8001308 <HAL_RCC_OscConfig+0x530>
 8001326:	e066      	b.n	80013f6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a34      	ldr	r2, [pc, #208]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 800132e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001332:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001334:	4b32      	ldr	r3, [pc, #200]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	4a31      	ldr	r2, [pc, #196]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 800133a:	f023 0303 	bic.w	r3, r3, #3
 800133e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001340:	4b2f      	ldr	r3, [pc, #188]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	4a2e      	ldr	r2, [pc, #184]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 8001346:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800134a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fbae 	bl	8000ab0 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001358:	f7ff fbaa 	bl	8000ab0 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e046      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x580>
 8001376:	e03e      	b.n	80013f6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	69db      	ldr	r3, [r3, #28]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e039      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001384:	4b1e      	ldr	r3, [pc, #120]	; (8001400 <HAL_RCC_OscConfig+0x628>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0203 	and.w	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	429a      	cmp	r2, r3
 8001396:	d12c      	bne.n	80013f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a2:	3b01      	subs	r3, #1
 80013a4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d123      	bne.n	80013f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80013b6:	429a      	cmp	r2, r3
 80013b8:	d11b      	bne.n	80013f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d113      	bne.n	80013f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	3b01      	subs	r3, #1
 80013d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80013da:	429a      	cmp	r2, r3
 80013dc:	d109      	bne.n	80013f2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e8:	085b      	lsrs	r3, r3, #1
 80013ea:	3b01      	subs	r3, #1
 80013ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	019f800c 	.word	0x019f800c

08001408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e11e      	b.n	800165e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001420:	4b91      	ldr	r3, [pc, #580]	; (8001668 <HAL_RCC_ClockConfig+0x260>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	429a      	cmp	r2, r3
 800142c:	d910      	bls.n	8001450 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800142e:	4b8e      	ldr	r3, [pc, #568]	; (8001668 <HAL_RCC_ClockConfig+0x260>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 020f 	bic.w	r2, r3, #15
 8001436:	498c      	ldr	r1, [pc, #560]	; (8001668 <HAL_RCC_ClockConfig+0x260>)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	4313      	orrs	r3, r2
 800143c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800143e:	4b8a      	ldr	r3, [pc, #552]	; (8001668 <HAL_RCC_ClockConfig+0x260>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d001      	beq.n	8001450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e106      	b.n	800165e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d073      	beq.n	8001544 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d129      	bne.n	80014b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001464:	4b81      	ldr	r3, [pc, #516]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e0f4      	b.n	800165e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001474:	f000 f966 	bl	8001744 <RCC_GetSysClockFreqFromPLLSource>
 8001478:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4a7c      	ldr	r2, [pc, #496]	; (8001670 <HAL_RCC_ClockConfig+0x268>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d93f      	bls.n	8001502 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001482:	4b7a      	ldr	r3, [pc, #488]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001496:	2b00      	cmp	r3, #0
 8001498:	d033      	beq.n	8001502 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d12f      	bne.n	8001502 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014a2:	4b72      	ldr	r3, [pc, #456]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014aa:	4a70      	ldr	r2, [pc, #448]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80014b2:	2380      	movs	r3, #128	; 0x80
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	e024      	b.n	8001502 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d107      	bne.n	80014d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014c0:	4b6a      	ldr	r3, [pc, #424]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d109      	bne.n	80014e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e0c6      	b.n	800165e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d0:	4b66      	ldr	r3, [pc, #408]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d101      	bne.n	80014e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0be      	b.n	800165e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80014e0:	f000 f8ce 	bl	8001680 <HAL_RCC_GetSysClockFreq>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	4a61      	ldr	r2, [pc, #388]	; (8001670 <HAL_RCC_ClockConfig+0x268>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d909      	bls.n	8001502 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80014ee:	4b5f      	ldr	r3, [pc, #380]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014f6:	4a5d      	ldr	r2, [pc, #372]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001502:	4b5a      	ldr	r3, [pc, #360]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f023 0203 	bic.w	r2, r3, #3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4957      	ldr	r1, [pc, #348]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 8001510:	4313      	orrs	r3, r2
 8001512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001514:	f7ff facc 	bl	8000ab0 <HAL_GetTick>
 8001518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151a:	e00a      	b.n	8001532 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800151c:	f7ff fac8 	bl	8000ab0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	f241 3288 	movw	r2, #5000	; 0x1388
 800152a:	4293      	cmp	r3, r2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e095      	b.n	800165e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001532:	4b4e      	ldr	r3, [pc, #312]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 020c 	and.w	r2, r3, #12
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	429a      	cmp	r2, r3
 8001542:	d1eb      	bne.n	800151c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d023      	beq.n	8001598 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	2b00      	cmp	r3, #0
 800155a:	d005      	beq.n	8001568 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800155c:	4b43      	ldr	r3, [pc, #268]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	4a42      	ldr	r2, [pc, #264]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 8001562:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001566:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d007      	beq.n	8001584 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001574:	4b3d      	ldr	r3, [pc, #244]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800157c:	4a3b      	ldr	r2, [pc, #236]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 800157e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001582:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001584:	4b39      	ldr	r3, [pc, #228]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4936      	ldr	r1, [pc, #216]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
 8001596:	e008      	b.n	80015aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	2b80      	cmp	r3, #128	; 0x80
 800159c:	d105      	bne.n	80015aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800159e:	4b33      	ldr	r3, [pc, #204]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	4a32      	ldr	r2, [pc, #200]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 80015a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_RCC_ClockConfig+0x260>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 030f 	and.w	r3, r3, #15
 80015b2:	683a      	ldr	r2, [r7, #0]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d21d      	bcs.n	80015f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_RCC_ClockConfig+0x260>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 020f 	bic.w	r2, r3, #15
 80015c0:	4929      	ldr	r1, [pc, #164]	; (8001668 <HAL_RCC_ClockConfig+0x260>)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015c8:	f7ff fa72 	bl	8000ab0 <HAL_GetTick>
 80015cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d0:	f7ff fa6e 	bl	8000ab0 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	; 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e03b      	b.n	800165e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e6:	4b20      	ldr	r3, [pc, #128]	; (8001668 <HAL_RCC_ClockConfig+0x260>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d1ed      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4917      	ldr	r1, [pc, #92]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	490f      	ldr	r1, [pc, #60]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001632:	f000 f825 	bl	8001680 <HAL_RCC_GetSysClockFreq>
 8001636:	4602      	mov	r2, r0
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <HAL_RCC_ClockConfig+0x264>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	490c      	ldr	r1, [pc, #48]	; (8001674 <HAL_RCC_ClockConfig+0x26c>)
 8001644:	5ccb      	ldrb	r3, [r1, r3]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	fa22 f303 	lsr.w	r3, r2, r3
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_RCC_ClockConfig+0x270>)
 8001650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_RCC_ClockConfig+0x274>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff f9de 	bl	8000a18 <HAL_InitTick>
 800165c:	4603      	mov	r3, r0
}
 800165e:	4618      	mov	r0, r3
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40022000 	.word	0x40022000
 800166c:	40021000 	.word	0x40021000
 8001670:	04c4b400 	.word	0x04c4b400
 8001674:	08002688 	.word	0x08002688
 8001678:	20000024 	.word	0x20000024
 800167c:	20000028 	.word	0x20000028

08001680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001686:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b04      	cmp	r3, #4
 8001690:	d102      	bne.n	8001698 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	e047      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 030c 	and.w	r3, r3, #12
 80016a0:	2b08      	cmp	r3, #8
 80016a2:	d102      	bne.n	80016aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80016a4:	4b26      	ldr	r3, [pc, #152]	; (8001740 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	e03e      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f003 030c 	and.w	r3, r3, #12
 80016b2:	2b0c      	cmp	r3, #12
 80016b4:	d136      	bne.n	8001724 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3301      	adds	r3, #1
 80016cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d10c      	bne.n	80016ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016d4:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016dc:	4a16      	ldr	r2, [pc, #88]	; (8001738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016de:	68d2      	ldr	r2, [r2, #12]
 80016e0:	0a12      	lsrs	r2, r2, #8
 80016e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016e6:	fb02 f303 	mul.w	r3, r2, r3
 80016ea:	617b      	str	r3, [r7, #20]
      break;
 80016ec:	e00c      	b.n	8001708 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80016ee:	4a13      	ldr	r2, [pc, #76]	; (800173c <HAL_RCC_GetSysClockFreq+0xbc>)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4a10      	ldr	r2, [pc, #64]	; (8001738 <HAL_RCC_GetSysClockFreq+0xb8>)
 80016f8:	68d2      	ldr	r2, [r2, #12]
 80016fa:	0a12      	lsrs	r2, r2, #8
 80016fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
      break;
 8001706:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001708:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <HAL_RCC_GetSysClockFreq+0xb8>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0e5b      	lsrs	r3, r3, #25
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	3301      	adds	r3, #1
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	e001      	b.n	8001728 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001728:	693b      	ldr	r3, [r7, #16]
}
 800172a:	4618      	mov	r0, r3
 800172c:	371c      	adds	r7, #28
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	00f42400 	.word	0x00f42400
 8001740:	016e3600 	.word	0x016e3600

08001744 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800174a:	4b1e      	ldr	r3, [pc, #120]	; (80017c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001754:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	091b      	lsrs	r3, r3, #4
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3301      	adds	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d10c      	bne.n	8001782 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001768:	4a17      	ldr	r2, [pc, #92]	; (80017c8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001770:	4a14      	ldr	r2, [pc, #80]	; (80017c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001772:	68d2      	ldr	r2, [r2, #12]
 8001774:	0a12      	lsrs	r2, r2, #8
 8001776:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	617b      	str	r3, [r7, #20]
    break;
 8001780:	e00c      	b.n	800179c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001782:	4a12      	ldr	r2, [pc, #72]	; (80017cc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4a0e      	ldr	r2, [pc, #56]	; (80017c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800178c:	68d2      	ldr	r2, [r2, #12]
 800178e:	0a12      	lsrs	r2, r2, #8
 8001790:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001794:	fb02 f303 	mul.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
    break;
 800179a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	0e5b      	lsrs	r3, r3, #25
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	3301      	adds	r3, #1
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80017b6:	687b      	ldr	r3, [r7, #4]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	371c      	adds	r7, #28
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	40021000 	.word	0x40021000
 80017c8:	016e3600 	.word	0x016e3600
 80017cc:	00f42400 	.word	0x00f42400

080017d0 <std>:
 80017d0:	2300      	movs	r3, #0
 80017d2:	b510      	push	{r4, lr}
 80017d4:	4604      	mov	r4, r0
 80017d6:	e9c0 3300 	strd	r3, r3, [r0]
 80017da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80017de:	6083      	str	r3, [r0, #8]
 80017e0:	8181      	strh	r1, [r0, #12]
 80017e2:	6643      	str	r3, [r0, #100]	; 0x64
 80017e4:	81c2      	strh	r2, [r0, #14]
 80017e6:	6183      	str	r3, [r0, #24]
 80017e8:	4619      	mov	r1, r3
 80017ea:	2208      	movs	r2, #8
 80017ec:	305c      	adds	r0, #92	; 0x5c
 80017ee:	f000 f8f4 	bl	80019da <memset>
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <std+0x38>)
 80017f4:	6263      	str	r3, [r4, #36]	; 0x24
 80017f6:	4b05      	ldr	r3, [pc, #20]	; (800180c <std+0x3c>)
 80017f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80017fa:	4b05      	ldr	r3, [pc, #20]	; (8001810 <std+0x40>)
 80017fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <std+0x44>)
 8001800:	6224      	str	r4, [r4, #32]
 8001802:	6323      	str	r3, [r4, #48]	; 0x30
 8001804:	bd10      	pop	{r4, pc}
 8001806:	bf00      	nop
 8001808:	08001955 	.word	0x08001955
 800180c:	08001977 	.word	0x08001977
 8001810:	080019af 	.word	0x080019af
 8001814:	080019d3 	.word	0x080019d3

08001818 <stdio_exit_handler>:
 8001818:	4a02      	ldr	r2, [pc, #8]	; (8001824 <stdio_exit_handler+0xc>)
 800181a:	4903      	ldr	r1, [pc, #12]	; (8001828 <stdio_exit_handler+0x10>)
 800181c:	4803      	ldr	r0, [pc, #12]	; (800182c <stdio_exit_handler+0x14>)
 800181e:	f000 b869 	b.w	80018f4 <_fwalk_sglue>
 8001822:	bf00      	nop
 8001824:	20000030 	.word	0x20000030
 8001828:	08002375 	.word	0x08002375
 800182c:	2000003c 	.word	0x2000003c

08001830 <cleanup_stdio>:
 8001830:	6841      	ldr	r1, [r0, #4]
 8001832:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <cleanup_stdio+0x34>)
 8001834:	4299      	cmp	r1, r3
 8001836:	b510      	push	{r4, lr}
 8001838:	4604      	mov	r4, r0
 800183a:	d001      	beq.n	8001840 <cleanup_stdio+0x10>
 800183c:	f000 fd9a 	bl	8002374 <_fflush_r>
 8001840:	68a1      	ldr	r1, [r4, #8]
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <cleanup_stdio+0x38>)
 8001844:	4299      	cmp	r1, r3
 8001846:	d002      	beq.n	800184e <cleanup_stdio+0x1e>
 8001848:	4620      	mov	r0, r4
 800184a:	f000 fd93 	bl	8002374 <_fflush_r>
 800184e:	68e1      	ldr	r1, [r4, #12]
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <cleanup_stdio+0x3c>)
 8001852:	4299      	cmp	r1, r3
 8001854:	d004      	beq.n	8001860 <cleanup_stdio+0x30>
 8001856:	4620      	mov	r0, r4
 8001858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800185c:	f000 bd8a 	b.w	8002374 <_fflush_r>
 8001860:	bd10      	pop	{r4, pc}
 8001862:	bf00      	nop
 8001864:	200000b0 	.word	0x200000b0
 8001868:	20000118 	.word	0x20000118
 800186c:	20000180 	.word	0x20000180

08001870 <global_stdio_init.part.0>:
 8001870:	b510      	push	{r4, lr}
 8001872:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <global_stdio_init.part.0+0x30>)
 8001874:	4c0b      	ldr	r4, [pc, #44]	; (80018a4 <global_stdio_init.part.0+0x34>)
 8001876:	4a0c      	ldr	r2, [pc, #48]	; (80018a8 <global_stdio_init.part.0+0x38>)
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	4620      	mov	r0, r4
 800187c:	2200      	movs	r2, #0
 800187e:	2104      	movs	r1, #4
 8001880:	f7ff ffa6 	bl	80017d0 <std>
 8001884:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001888:	2201      	movs	r2, #1
 800188a:	2109      	movs	r1, #9
 800188c:	f7ff ffa0 	bl	80017d0 <std>
 8001890:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001894:	2202      	movs	r2, #2
 8001896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800189a:	2112      	movs	r1, #18
 800189c:	f7ff bf98 	b.w	80017d0 <std>
 80018a0:	200001e8 	.word	0x200001e8
 80018a4:	200000b0 	.word	0x200000b0
 80018a8:	08001819 	.word	0x08001819

080018ac <__sfp_lock_acquire>:
 80018ac:	4801      	ldr	r0, [pc, #4]	; (80018b4 <__sfp_lock_acquire+0x8>)
 80018ae:	f000 b90d 	b.w	8001acc <__retarget_lock_acquire_recursive>
 80018b2:	bf00      	nop
 80018b4:	200001f1 	.word	0x200001f1

080018b8 <__sfp_lock_release>:
 80018b8:	4801      	ldr	r0, [pc, #4]	; (80018c0 <__sfp_lock_release+0x8>)
 80018ba:	f000 b908 	b.w	8001ace <__retarget_lock_release_recursive>
 80018be:	bf00      	nop
 80018c0:	200001f1 	.word	0x200001f1

080018c4 <__sinit>:
 80018c4:	b510      	push	{r4, lr}
 80018c6:	4604      	mov	r4, r0
 80018c8:	f7ff fff0 	bl	80018ac <__sfp_lock_acquire>
 80018cc:	6a23      	ldr	r3, [r4, #32]
 80018ce:	b11b      	cbz	r3, 80018d8 <__sinit+0x14>
 80018d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018d4:	f7ff bff0 	b.w	80018b8 <__sfp_lock_release>
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <__sinit+0x28>)
 80018da:	6223      	str	r3, [r4, #32]
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <__sinit+0x2c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f5      	bne.n	80018d0 <__sinit+0xc>
 80018e4:	f7ff ffc4 	bl	8001870 <global_stdio_init.part.0>
 80018e8:	e7f2      	b.n	80018d0 <__sinit+0xc>
 80018ea:	bf00      	nop
 80018ec:	08001831 	.word	0x08001831
 80018f0:	200001e8 	.word	0x200001e8

080018f4 <_fwalk_sglue>:
 80018f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018f8:	4607      	mov	r7, r0
 80018fa:	4688      	mov	r8, r1
 80018fc:	4614      	mov	r4, r2
 80018fe:	2600      	movs	r6, #0
 8001900:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001904:	f1b9 0901 	subs.w	r9, r9, #1
 8001908:	d505      	bpl.n	8001916 <_fwalk_sglue+0x22>
 800190a:	6824      	ldr	r4, [r4, #0]
 800190c:	2c00      	cmp	r4, #0
 800190e:	d1f7      	bne.n	8001900 <_fwalk_sglue+0xc>
 8001910:	4630      	mov	r0, r6
 8001912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001916:	89ab      	ldrh	r3, [r5, #12]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d907      	bls.n	800192c <_fwalk_sglue+0x38>
 800191c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001920:	3301      	adds	r3, #1
 8001922:	d003      	beq.n	800192c <_fwalk_sglue+0x38>
 8001924:	4629      	mov	r1, r5
 8001926:	4638      	mov	r0, r7
 8001928:	47c0      	blx	r8
 800192a:	4306      	orrs	r6, r0
 800192c:	3568      	adds	r5, #104	; 0x68
 800192e:	e7e9      	b.n	8001904 <_fwalk_sglue+0x10>

08001930 <iprintf>:
 8001930:	b40f      	push	{r0, r1, r2, r3}
 8001932:	b507      	push	{r0, r1, r2, lr}
 8001934:	4906      	ldr	r1, [pc, #24]	; (8001950 <iprintf+0x20>)
 8001936:	ab04      	add	r3, sp, #16
 8001938:	6808      	ldr	r0, [r1, #0]
 800193a:	f853 2b04 	ldr.w	r2, [r3], #4
 800193e:	6881      	ldr	r1, [r0, #8]
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	f000 f9e7 	bl	8001d14 <_vfiprintf_r>
 8001946:	b003      	add	sp, #12
 8001948:	f85d eb04 	ldr.w	lr, [sp], #4
 800194c:	b004      	add	sp, #16
 800194e:	4770      	bx	lr
 8001950:	20000088 	.word	0x20000088

08001954 <__sread>:
 8001954:	b510      	push	{r4, lr}
 8001956:	460c      	mov	r4, r1
 8001958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800195c:	f000 f868 	bl	8001a30 <_read_r>
 8001960:	2800      	cmp	r0, #0
 8001962:	bfab      	itete	ge
 8001964:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001966:	89a3      	ldrhlt	r3, [r4, #12]
 8001968:	181b      	addge	r3, r3, r0
 800196a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800196e:	bfac      	ite	ge
 8001970:	6563      	strge	r3, [r4, #84]	; 0x54
 8001972:	81a3      	strhlt	r3, [r4, #12]
 8001974:	bd10      	pop	{r4, pc}

08001976 <__swrite>:
 8001976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800197a:	461f      	mov	r7, r3
 800197c:	898b      	ldrh	r3, [r1, #12]
 800197e:	05db      	lsls	r3, r3, #23
 8001980:	4605      	mov	r5, r0
 8001982:	460c      	mov	r4, r1
 8001984:	4616      	mov	r6, r2
 8001986:	d505      	bpl.n	8001994 <__swrite+0x1e>
 8001988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800198c:	2302      	movs	r3, #2
 800198e:	2200      	movs	r2, #0
 8001990:	f000 f83c 	bl	8001a0c <_lseek_r>
 8001994:	89a3      	ldrh	r3, [r4, #12]
 8001996:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800199a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800199e:	81a3      	strh	r3, [r4, #12]
 80019a0:	4632      	mov	r2, r6
 80019a2:	463b      	mov	r3, r7
 80019a4:	4628      	mov	r0, r5
 80019a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019aa:	f000 b853 	b.w	8001a54 <_write_r>

080019ae <__sseek>:
 80019ae:	b510      	push	{r4, lr}
 80019b0:	460c      	mov	r4, r1
 80019b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019b6:	f000 f829 	bl	8001a0c <_lseek_r>
 80019ba:	1c43      	adds	r3, r0, #1
 80019bc:	89a3      	ldrh	r3, [r4, #12]
 80019be:	bf15      	itete	ne
 80019c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80019c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80019c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80019ca:	81a3      	strheq	r3, [r4, #12]
 80019cc:	bf18      	it	ne
 80019ce:	81a3      	strhne	r3, [r4, #12]
 80019d0:	bd10      	pop	{r4, pc}

080019d2 <__sclose>:
 80019d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019d6:	f000 b809 	b.w	80019ec <_close_r>

080019da <memset>:
 80019da:	4402      	add	r2, r0
 80019dc:	4603      	mov	r3, r0
 80019de:	4293      	cmp	r3, r2
 80019e0:	d100      	bne.n	80019e4 <memset+0xa>
 80019e2:	4770      	bx	lr
 80019e4:	f803 1b01 	strb.w	r1, [r3], #1
 80019e8:	e7f9      	b.n	80019de <memset+0x4>
	...

080019ec <_close_r>:
 80019ec:	b538      	push	{r3, r4, r5, lr}
 80019ee:	4d06      	ldr	r5, [pc, #24]	; (8001a08 <_close_r+0x1c>)
 80019f0:	2300      	movs	r3, #0
 80019f2:	4604      	mov	r4, r0
 80019f4:	4608      	mov	r0, r1
 80019f6:	602b      	str	r3, [r5, #0]
 80019f8:	f7fe ff47 	bl	800088a <_close>
 80019fc:	1c43      	adds	r3, r0, #1
 80019fe:	d102      	bne.n	8001a06 <_close_r+0x1a>
 8001a00:	682b      	ldr	r3, [r5, #0]
 8001a02:	b103      	cbz	r3, 8001a06 <_close_r+0x1a>
 8001a04:	6023      	str	r3, [r4, #0]
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
 8001a08:	200001ec 	.word	0x200001ec

08001a0c <_lseek_r>:
 8001a0c:	b538      	push	{r3, r4, r5, lr}
 8001a0e:	4d07      	ldr	r5, [pc, #28]	; (8001a2c <_lseek_r+0x20>)
 8001a10:	4604      	mov	r4, r0
 8001a12:	4608      	mov	r0, r1
 8001a14:	4611      	mov	r1, r2
 8001a16:	2200      	movs	r2, #0
 8001a18:	602a      	str	r2, [r5, #0]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f7fe ff5c 	bl	80008d8 <_lseek>
 8001a20:	1c43      	adds	r3, r0, #1
 8001a22:	d102      	bne.n	8001a2a <_lseek_r+0x1e>
 8001a24:	682b      	ldr	r3, [r5, #0]
 8001a26:	b103      	cbz	r3, 8001a2a <_lseek_r+0x1e>
 8001a28:	6023      	str	r3, [r4, #0]
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
 8001a2c:	200001ec 	.word	0x200001ec

08001a30 <_read_r>:
 8001a30:	b538      	push	{r3, r4, r5, lr}
 8001a32:	4d07      	ldr	r5, [pc, #28]	; (8001a50 <_read_r+0x20>)
 8001a34:	4604      	mov	r4, r0
 8001a36:	4608      	mov	r0, r1
 8001a38:	4611      	mov	r1, r2
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	602a      	str	r2, [r5, #0]
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f7fe feea 	bl	8000818 <_read>
 8001a44:	1c43      	adds	r3, r0, #1
 8001a46:	d102      	bne.n	8001a4e <_read_r+0x1e>
 8001a48:	682b      	ldr	r3, [r5, #0]
 8001a4a:	b103      	cbz	r3, 8001a4e <_read_r+0x1e>
 8001a4c:	6023      	str	r3, [r4, #0]
 8001a4e:	bd38      	pop	{r3, r4, r5, pc}
 8001a50:	200001ec 	.word	0x200001ec

08001a54 <_write_r>:
 8001a54:	b538      	push	{r3, r4, r5, lr}
 8001a56:	4d07      	ldr	r5, [pc, #28]	; (8001a74 <_write_r+0x20>)
 8001a58:	4604      	mov	r4, r0
 8001a5a:	4608      	mov	r0, r1
 8001a5c:	4611      	mov	r1, r2
 8001a5e:	2200      	movs	r2, #0
 8001a60:	602a      	str	r2, [r5, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	f7fe fef5 	bl	8000852 <_write>
 8001a68:	1c43      	adds	r3, r0, #1
 8001a6a:	d102      	bne.n	8001a72 <_write_r+0x1e>
 8001a6c:	682b      	ldr	r3, [r5, #0]
 8001a6e:	b103      	cbz	r3, 8001a72 <_write_r+0x1e>
 8001a70:	6023      	str	r3, [r4, #0]
 8001a72:	bd38      	pop	{r3, r4, r5, pc}
 8001a74:	200001ec 	.word	0x200001ec

08001a78 <__errno>:
 8001a78:	4b01      	ldr	r3, [pc, #4]	; (8001a80 <__errno+0x8>)
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	20000088 	.word	0x20000088

08001a84 <__libc_init_array>:
 8001a84:	b570      	push	{r4, r5, r6, lr}
 8001a86:	4d0d      	ldr	r5, [pc, #52]	; (8001abc <__libc_init_array+0x38>)
 8001a88:	4c0d      	ldr	r4, [pc, #52]	; (8001ac0 <__libc_init_array+0x3c>)
 8001a8a:	1b64      	subs	r4, r4, r5
 8001a8c:	10a4      	asrs	r4, r4, #2
 8001a8e:	2600      	movs	r6, #0
 8001a90:	42a6      	cmp	r6, r4
 8001a92:	d109      	bne.n	8001aa8 <__libc_init_array+0x24>
 8001a94:	4d0b      	ldr	r5, [pc, #44]	; (8001ac4 <__libc_init_array+0x40>)
 8001a96:	4c0c      	ldr	r4, [pc, #48]	; (8001ac8 <__libc_init_array+0x44>)
 8001a98:	f000 fdbe 	bl	8002618 <_init>
 8001a9c:	1b64      	subs	r4, r4, r5
 8001a9e:	10a4      	asrs	r4, r4, #2
 8001aa0:	2600      	movs	r6, #0
 8001aa2:	42a6      	cmp	r6, r4
 8001aa4:	d105      	bne.n	8001ab2 <__libc_init_array+0x2e>
 8001aa6:	bd70      	pop	{r4, r5, r6, pc}
 8001aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aac:	4798      	blx	r3
 8001aae:	3601      	adds	r6, #1
 8001ab0:	e7ee      	b.n	8001a90 <__libc_init_array+0xc>
 8001ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ab6:	4798      	blx	r3
 8001ab8:	3601      	adds	r6, #1
 8001aba:	e7f2      	b.n	8001aa2 <__libc_init_array+0x1e>
 8001abc:	080026cc 	.word	0x080026cc
 8001ac0:	080026cc 	.word	0x080026cc
 8001ac4:	080026cc 	.word	0x080026cc
 8001ac8:	080026d0 	.word	0x080026d0

08001acc <__retarget_lock_acquire_recursive>:
 8001acc:	4770      	bx	lr

08001ace <__retarget_lock_release_recursive>:
 8001ace:	4770      	bx	lr

08001ad0 <_free_r>:
 8001ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001ad2:	2900      	cmp	r1, #0
 8001ad4:	d044      	beq.n	8001b60 <_free_r+0x90>
 8001ad6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ada:	9001      	str	r0, [sp, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f1a1 0404 	sub.w	r4, r1, #4
 8001ae2:	bfb8      	it	lt
 8001ae4:	18e4      	addlt	r4, r4, r3
 8001ae6:	f000 f8df 	bl	8001ca8 <__malloc_lock>
 8001aea:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <_free_r+0x94>)
 8001aec:	9801      	ldr	r0, [sp, #4]
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	b933      	cbnz	r3, 8001b00 <_free_r+0x30>
 8001af2:	6063      	str	r3, [r4, #4]
 8001af4:	6014      	str	r4, [r2, #0]
 8001af6:	b003      	add	sp, #12
 8001af8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001afc:	f000 b8da 	b.w	8001cb4 <__malloc_unlock>
 8001b00:	42a3      	cmp	r3, r4
 8001b02:	d908      	bls.n	8001b16 <_free_r+0x46>
 8001b04:	6825      	ldr	r5, [r4, #0]
 8001b06:	1961      	adds	r1, r4, r5
 8001b08:	428b      	cmp	r3, r1
 8001b0a:	bf01      	itttt	eq
 8001b0c:	6819      	ldreq	r1, [r3, #0]
 8001b0e:	685b      	ldreq	r3, [r3, #4]
 8001b10:	1949      	addeq	r1, r1, r5
 8001b12:	6021      	streq	r1, [r4, #0]
 8001b14:	e7ed      	b.n	8001af2 <_free_r+0x22>
 8001b16:	461a      	mov	r2, r3
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	b10b      	cbz	r3, 8001b20 <_free_r+0x50>
 8001b1c:	42a3      	cmp	r3, r4
 8001b1e:	d9fa      	bls.n	8001b16 <_free_r+0x46>
 8001b20:	6811      	ldr	r1, [r2, #0]
 8001b22:	1855      	adds	r5, r2, r1
 8001b24:	42a5      	cmp	r5, r4
 8001b26:	d10b      	bne.n	8001b40 <_free_r+0x70>
 8001b28:	6824      	ldr	r4, [r4, #0]
 8001b2a:	4421      	add	r1, r4
 8001b2c:	1854      	adds	r4, r2, r1
 8001b2e:	42a3      	cmp	r3, r4
 8001b30:	6011      	str	r1, [r2, #0]
 8001b32:	d1e0      	bne.n	8001af6 <_free_r+0x26>
 8001b34:	681c      	ldr	r4, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	6053      	str	r3, [r2, #4]
 8001b3a:	440c      	add	r4, r1
 8001b3c:	6014      	str	r4, [r2, #0]
 8001b3e:	e7da      	b.n	8001af6 <_free_r+0x26>
 8001b40:	d902      	bls.n	8001b48 <_free_r+0x78>
 8001b42:	230c      	movs	r3, #12
 8001b44:	6003      	str	r3, [r0, #0]
 8001b46:	e7d6      	b.n	8001af6 <_free_r+0x26>
 8001b48:	6825      	ldr	r5, [r4, #0]
 8001b4a:	1961      	adds	r1, r4, r5
 8001b4c:	428b      	cmp	r3, r1
 8001b4e:	bf04      	itt	eq
 8001b50:	6819      	ldreq	r1, [r3, #0]
 8001b52:	685b      	ldreq	r3, [r3, #4]
 8001b54:	6063      	str	r3, [r4, #4]
 8001b56:	bf04      	itt	eq
 8001b58:	1949      	addeq	r1, r1, r5
 8001b5a:	6021      	streq	r1, [r4, #0]
 8001b5c:	6054      	str	r4, [r2, #4]
 8001b5e:	e7ca      	b.n	8001af6 <_free_r+0x26>
 8001b60:	b003      	add	sp, #12
 8001b62:	bd30      	pop	{r4, r5, pc}
 8001b64:	200001f4 	.word	0x200001f4

08001b68 <sbrk_aligned>:
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	4e0e      	ldr	r6, [pc, #56]	; (8001ba4 <sbrk_aligned+0x3c>)
 8001b6c:	460c      	mov	r4, r1
 8001b6e:	6831      	ldr	r1, [r6, #0]
 8001b70:	4605      	mov	r5, r0
 8001b72:	b911      	cbnz	r1, 8001b7a <sbrk_aligned+0x12>
 8001b74:	f000 fcbc 	bl	80024f0 <_sbrk_r>
 8001b78:	6030      	str	r0, [r6, #0]
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	4628      	mov	r0, r5
 8001b7e:	f000 fcb7 	bl	80024f0 <_sbrk_r>
 8001b82:	1c43      	adds	r3, r0, #1
 8001b84:	d00a      	beq.n	8001b9c <sbrk_aligned+0x34>
 8001b86:	1cc4      	adds	r4, r0, #3
 8001b88:	f024 0403 	bic.w	r4, r4, #3
 8001b8c:	42a0      	cmp	r0, r4
 8001b8e:	d007      	beq.n	8001ba0 <sbrk_aligned+0x38>
 8001b90:	1a21      	subs	r1, r4, r0
 8001b92:	4628      	mov	r0, r5
 8001b94:	f000 fcac 	bl	80024f0 <_sbrk_r>
 8001b98:	3001      	adds	r0, #1
 8001b9a:	d101      	bne.n	8001ba0 <sbrk_aligned+0x38>
 8001b9c:	f04f 34ff 	mov.w	r4, #4294967295
 8001ba0:	4620      	mov	r0, r4
 8001ba2:	bd70      	pop	{r4, r5, r6, pc}
 8001ba4:	200001f8 	.word	0x200001f8

08001ba8 <_malloc_r>:
 8001ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bac:	1ccd      	adds	r5, r1, #3
 8001bae:	f025 0503 	bic.w	r5, r5, #3
 8001bb2:	3508      	adds	r5, #8
 8001bb4:	2d0c      	cmp	r5, #12
 8001bb6:	bf38      	it	cc
 8001bb8:	250c      	movcc	r5, #12
 8001bba:	2d00      	cmp	r5, #0
 8001bbc:	4607      	mov	r7, r0
 8001bbe:	db01      	blt.n	8001bc4 <_malloc_r+0x1c>
 8001bc0:	42a9      	cmp	r1, r5
 8001bc2:	d905      	bls.n	8001bd0 <_malloc_r+0x28>
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	2600      	movs	r6, #0
 8001bca:	4630      	mov	r0, r6
 8001bcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001ca4 <_malloc_r+0xfc>
 8001bd4:	f000 f868 	bl	8001ca8 <__malloc_lock>
 8001bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8001bdc:	461c      	mov	r4, r3
 8001bde:	bb5c      	cbnz	r4, 8001c38 <_malloc_r+0x90>
 8001be0:	4629      	mov	r1, r5
 8001be2:	4638      	mov	r0, r7
 8001be4:	f7ff ffc0 	bl	8001b68 <sbrk_aligned>
 8001be8:	1c43      	adds	r3, r0, #1
 8001bea:	4604      	mov	r4, r0
 8001bec:	d155      	bne.n	8001c9a <_malloc_r+0xf2>
 8001bee:	f8d8 4000 	ldr.w	r4, [r8]
 8001bf2:	4626      	mov	r6, r4
 8001bf4:	2e00      	cmp	r6, #0
 8001bf6:	d145      	bne.n	8001c84 <_malloc_r+0xdc>
 8001bf8:	2c00      	cmp	r4, #0
 8001bfa:	d048      	beq.n	8001c8e <_malloc_r+0xe6>
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	4631      	mov	r1, r6
 8001c00:	4638      	mov	r0, r7
 8001c02:	eb04 0903 	add.w	r9, r4, r3
 8001c06:	f000 fc73 	bl	80024f0 <_sbrk_r>
 8001c0a:	4581      	cmp	r9, r0
 8001c0c:	d13f      	bne.n	8001c8e <_malloc_r+0xe6>
 8001c0e:	6821      	ldr	r1, [r4, #0]
 8001c10:	1a6d      	subs	r5, r5, r1
 8001c12:	4629      	mov	r1, r5
 8001c14:	4638      	mov	r0, r7
 8001c16:	f7ff ffa7 	bl	8001b68 <sbrk_aligned>
 8001c1a:	3001      	adds	r0, #1
 8001c1c:	d037      	beq.n	8001c8e <_malloc_r+0xe6>
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	442b      	add	r3, r5
 8001c22:	6023      	str	r3, [r4, #0]
 8001c24:	f8d8 3000 	ldr.w	r3, [r8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d038      	beq.n	8001c9e <_malloc_r+0xf6>
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	42a2      	cmp	r2, r4
 8001c30:	d12b      	bne.n	8001c8a <_malloc_r+0xe2>
 8001c32:	2200      	movs	r2, #0
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	e00f      	b.n	8001c58 <_malloc_r+0xb0>
 8001c38:	6822      	ldr	r2, [r4, #0]
 8001c3a:	1b52      	subs	r2, r2, r5
 8001c3c:	d41f      	bmi.n	8001c7e <_malloc_r+0xd6>
 8001c3e:	2a0b      	cmp	r2, #11
 8001c40:	d917      	bls.n	8001c72 <_malloc_r+0xca>
 8001c42:	1961      	adds	r1, r4, r5
 8001c44:	42a3      	cmp	r3, r4
 8001c46:	6025      	str	r5, [r4, #0]
 8001c48:	bf18      	it	ne
 8001c4a:	6059      	strne	r1, [r3, #4]
 8001c4c:	6863      	ldr	r3, [r4, #4]
 8001c4e:	bf08      	it	eq
 8001c50:	f8c8 1000 	streq.w	r1, [r8]
 8001c54:	5162      	str	r2, [r4, r5]
 8001c56:	604b      	str	r3, [r1, #4]
 8001c58:	4638      	mov	r0, r7
 8001c5a:	f104 060b 	add.w	r6, r4, #11
 8001c5e:	f000 f829 	bl	8001cb4 <__malloc_unlock>
 8001c62:	f026 0607 	bic.w	r6, r6, #7
 8001c66:	1d23      	adds	r3, r4, #4
 8001c68:	1af2      	subs	r2, r6, r3
 8001c6a:	d0ae      	beq.n	8001bca <_malloc_r+0x22>
 8001c6c:	1b9b      	subs	r3, r3, r6
 8001c6e:	50a3      	str	r3, [r4, r2]
 8001c70:	e7ab      	b.n	8001bca <_malloc_r+0x22>
 8001c72:	42a3      	cmp	r3, r4
 8001c74:	6862      	ldr	r2, [r4, #4]
 8001c76:	d1dd      	bne.n	8001c34 <_malloc_r+0x8c>
 8001c78:	f8c8 2000 	str.w	r2, [r8]
 8001c7c:	e7ec      	b.n	8001c58 <_malloc_r+0xb0>
 8001c7e:	4623      	mov	r3, r4
 8001c80:	6864      	ldr	r4, [r4, #4]
 8001c82:	e7ac      	b.n	8001bde <_malloc_r+0x36>
 8001c84:	4634      	mov	r4, r6
 8001c86:	6876      	ldr	r6, [r6, #4]
 8001c88:	e7b4      	b.n	8001bf4 <_malloc_r+0x4c>
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	e7cc      	b.n	8001c28 <_malloc_r+0x80>
 8001c8e:	230c      	movs	r3, #12
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	4638      	mov	r0, r7
 8001c94:	f000 f80e 	bl	8001cb4 <__malloc_unlock>
 8001c98:	e797      	b.n	8001bca <_malloc_r+0x22>
 8001c9a:	6025      	str	r5, [r4, #0]
 8001c9c:	e7dc      	b.n	8001c58 <_malloc_r+0xb0>
 8001c9e:	605b      	str	r3, [r3, #4]
 8001ca0:	deff      	udf	#255	; 0xff
 8001ca2:	bf00      	nop
 8001ca4:	200001f4 	.word	0x200001f4

08001ca8 <__malloc_lock>:
 8001ca8:	4801      	ldr	r0, [pc, #4]	; (8001cb0 <__malloc_lock+0x8>)
 8001caa:	f7ff bf0f 	b.w	8001acc <__retarget_lock_acquire_recursive>
 8001cae:	bf00      	nop
 8001cb0:	200001f0 	.word	0x200001f0

08001cb4 <__malloc_unlock>:
 8001cb4:	4801      	ldr	r0, [pc, #4]	; (8001cbc <__malloc_unlock+0x8>)
 8001cb6:	f7ff bf0a 	b.w	8001ace <__retarget_lock_release_recursive>
 8001cba:	bf00      	nop
 8001cbc:	200001f0 	.word	0x200001f0

08001cc0 <__sfputc_r>:
 8001cc0:	6893      	ldr	r3, [r2, #8]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	b410      	push	{r4}
 8001cc8:	6093      	str	r3, [r2, #8]
 8001cca:	da08      	bge.n	8001cde <__sfputc_r+0x1e>
 8001ccc:	6994      	ldr	r4, [r2, #24]
 8001cce:	42a3      	cmp	r3, r4
 8001cd0:	db01      	blt.n	8001cd6 <__sfputc_r+0x16>
 8001cd2:	290a      	cmp	r1, #10
 8001cd4:	d103      	bne.n	8001cde <__sfputc_r+0x1e>
 8001cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cda:	f000 bb73 	b.w	80023c4 <__swbuf_r>
 8001cde:	6813      	ldr	r3, [r2, #0]
 8001ce0:	1c58      	adds	r0, r3, #1
 8001ce2:	6010      	str	r0, [r2, #0]
 8001ce4:	7019      	strb	r1, [r3, #0]
 8001ce6:	4608      	mov	r0, r1
 8001ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <__sfputs_r>:
 8001cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf0:	4606      	mov	r6, r0
 8001cf2:	460f      	mov	r7, r1
 8001cf4:	4614      	mov	r4, r2
 8001cf6:	18d5      	adds	r5, r2, r3
 8001cf8:	42ac      	cmp	r4, r5
 8001cfa:	d101      	bne.n	8001d00 <__sfputs_r+0x12>
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	e007      	b.n	8001d10 <__sfputs_r+0x22>
 8001d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d04:	463a      	mov	r2, r7
 8001d06:	4630      	mov	r0, r6
 8001d08:	f7ff ffda 	bl	8001cc0 <__sfputc_r>
 8001d0c:	1c43      	adds	r3, r0, #1
 8001d0e:	d1f3      	bne.n	8001cf8 <__sfputs_r+0xa>
 8001d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d14 <_vfiprintf_r>:
 8001d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d18:	460d      	mov	r5, r1
 8001d1a:	b09d      	sub	sp, #116	; 0x74
 8001d1c:	4614      	mov	r4, r2
 8001d1e:	4698      	mov	r8, r3
 8001d20:	4606      	mov	r6, r0
 8001d22:	b118      	cbz	r0, 8001d2c <_vfiprintf_r+0x18>
 8001d24:	6a03      	ldr	r3, [r0, #32]
 8001d26:	b90b      	cbnz	r3, 8001d2c <_vfiprintf_r+0x18>
 8001d28:	f7ff fdcc 	bl	80018c4 <__sinit>
 8001d2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d2e:	07d9      	lsls	r1, r3, #31
 8001d30:	d405      	bmi.n	8001d3e <_vfiprintf_r+0x2a>
 8001d32:	89ab      	ldrh	r3, [r5, #12]
 8001d34:	059a      	lsls	r2, r3, #22
 8001d36:	d402      	bmi.n	8001d3e <_vfiprintf_r+0x2a>
 8001d38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d3a:	f7ff fec7 	bl	8001acc <__retarget_lock_acquire_recursive>
 8001d3e:	89ab      	ldrh	r3, [r5, #12]
 8001d40:	071b      	lsls	r3, r3, #28
 8001d42:	d501      	bpl.n	8001d48 <_vfiprintf_r+0x34>
 8001d44:	692b      	ldr	r3, [r5, #16]
 8001d46:	b99b      	cbnz	r3, 8001d70 <_vfiprintf_r+0x5c>
 8001d48:	4629      	mov	r1, r5
 8001d4a:	4630      	mov	r0, r6
 8001d4c:	f000 fb78 	bl	8002440 <__swsetup_r>
 8001d50:	b170      	cbz	r0, 8001d70 <_vfiprintf_r+0x5c>
 8001d52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001d54:	07dc      	lsls	r4, r3, #31
 8001d56:	d504      	bpl.n	8001d62 <_vfiprintf_r+0x4e>
 8001d58:	f04f 30ff 	mov.w	r0, #4294967295
 8001d5c:	b01d      	add	sp, #116	; 0x74
 8001d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d62:	89ab      	ldrh	r3, [r5, #12]
 8001d64:	0598      	lsls	r0, r3, #22
 8001d66:	d4f7      	bmi.n	8001d58 <_vfiprintf_r+0x44>
 8001d68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001d6a:	f7ff feb0 	bl	8001ace <__retarget_lock_release_recursive>
 8001d6e:	e7f3      	b.n	8001d58 <_vfiprintf_r+0x44>
 8001d70:	2300      	movs	r3, #0
 8001d72:	9309      	str	r3, [sp, #36]	; 0x24
 8001d74:	2320      	movs	r3, #32
 8001d76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001d7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d7e:	2330      	movs	r3, #48	; 0x30
 8001d80:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001f34 <_vfiprintf_r+0x220>
 8001d84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001d88:	f04f 0901 	mov.w	r9, #1
 8001d8c:	4623      	mov	r3, r4
 8001d8e:	469a      	mov	sl, r3
 8001d90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d94:	b10a      	cbz	r2, 8001d9a <_vfiprintf_r+0x86>
 8001d96:	2a25      	cmp	r2, #37	; 0x25
 8001d98:	d1f9      	bne.n	8001d8e <_vfiprintf_r+0x7a>
 8001d9a:	ebba 0b04 	subs.w	fp, sl, r4
 8001d9e:	d00b      	beq.n	8001db8 <_vfiprintf_r+0xa4>
 8001da0:	465b      	mov	r3, fp
 8001da2:	4622      	mov	r2, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	4630      	mov	r0, r6
 8001da8:	f7ff ffa1 	bl	8001cee <__sfputs_r>
 8001dac:	3001      	adds	r0, #1
 8001dae:	f000 80a9 	beq.w	8001f04 <_vfiprintf_r+0x1f0>
 8001db2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001db4:	445a      	add	r2, fp
 8001db6:	9209      	str	r2, [sp, #36]	; 0x24
 8001db8:	f89a 3000 	ldrb.w	r3, [sl]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80a1 	beq.w	8001f04 <_vfiprintf_r+0x1f0>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001dcc:	f10a 0a01 	add.w	sl, sl, #1
 8001dd0:	9304      	str	r3, [sp, #16]
 8001dd2:	9307      	str	r3, [sp, #28]
 8001dd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001dd8:	931a      	str	r3, [sp, #104]	; 0x68
 8001dda:	4654      	mov	r4, sl
 8001ddc:	2205      	movs	r2, #5
 8001dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001de2:	4854      	ldr	r0, [pc, #336]	; (8001f34 <_vfiprintf_r+0x220>)
 8001de4:	f7fe fa1c 	bl	8000220 <memchr>
 8001de8:	9a04      	ldr	r2, [sp, #16]
 8001dea:	b9d8      	cbnz	r0, 8001e24 <_vfiprintf_r+0x110>
 8001dec:	06d1      	lsls	r1, r2, #27
 8001dee:	bf44      	itt	mi
 8001df0:	2320      	movmi	r3, #32
 8001df2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001df6:	0713      	lsls	r3, r2, #28
 8001df8:	bf44      	itt	mi
 8001dfa:	232b      	movmi	r3, #43	; 0x2b
 8001dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001e00:	f89a 3000 	ldrb.w	r3, [sl]
 8001e04:	2b2a      	cmp	r3, #42	; 0x2a
 8001e06:	d015      	beq.n	8001e34 <_vfiprintf_r+0x120>
 8001e08:	9a07      	ldr	r2, [sp, #28]
 8001e0a:	4654      	mov	r4, sl
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f04f 0c0a 	mov.w	ip, #10
 8001e12:	4621      	mov	r1, r4
 8001e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e18:	3b30      	subs	r3, #48	; 0x30
 8001e1a:	2b09      	cmp	r3, #9
 8001e1c:	d94d      	bls.n	8001eba <_vfiprintf_r+0x1a6>
 8001e1e:	b1b0      	cbz	r0, 8001e4e <_vfiprintf_r+0x13a>
 8001e20:	9207      	str	r2, [sp, #28]
 8001e22:	e014      	b.n	8001e4e <_vfiprintf_r+0x13a>
 8001e24:	eba0 0308 	sub.w	r3, r0, r8
 8001e28:	fa09 f303 	lsl.w	r3, r9, r3
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	9304      	str	r3, [sp, #16]
 8001e30:	46a2      	mov	sl, r4
 8001e32:	e7d2      	b.n	8001dda <_vfiprintf_r+0xc6>
 8001e34:	9b03      	ldr	r3, [sp, #12]
 8001e36:	1d19      	adds	r1, r3, #4
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	9103      	str	r1, [sp, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bfbb      	ittet	lt
 8001e40:	425b      	neglt	r3, r3
 8001e42:	f042 0202 	orrlt.w	r2, r2, #2
 8001e46:	9307      	strge	r3, [sp, #28]
 8001e48:	9307      	strlt	r3, [sp, #28]
 8001e4a:	bfb8      	it	lt
 8001e4c:	9204      	strlt	r2, [sp, #16]
 8001e4e:	7823      	ldrb	r3, [r4, #0]
 8001e50:	2b2e      	cmp	r3, #46	; 0x2e
 8001e52:	d10c      	bne.n	8001e6e <_vfiprintf_r+0x15a>
 8001e54:	7863      	ldrb	r3, [r4, #1]
 8001e56:	2b2a      	cmp	r3, #42	; 0x2a
 8001e58:	d134      	bne.n	8001ec4 <_vfiprintf_r+0x1b0>
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	1d1a      	adds	r2, r3, #4
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	9203      	str	r2, [sp, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	bfb8      	it	lt
 8001e66:	f04f 33ff 	movlt.w	r3, #4294967295
 8001e6a:	3402      	adds	r4, #2
 8001e6c:	9305      	str	r3, [sp, #20]
 8001e6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001f44 <_vfiprintf_r+0x230>
 8001e72:	7821      	ldrb	r1, [r4, #0]
 8001e74:	2203      	movs	r2, #3
 8001e76:	4650      	mov	r0, sl
 8001e78:	f7fe f9d2 	bl	8000220 <memchr>
 8001e7c:	b138      	cbz	r0, 8001e8e <_vfiprintf_r+0x17a>
 8001e7e:	9b04      	ldr	r3, [sp, #16]
 8001e80:	eba0 000a 	sub.w	r0, r0, sl
 8001e84:	2240      	movs	r2, #64	; 0x40
 8001e86:	4082      	lsls	r2, r0
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	3401      	adds	r4, #1
 8001e8c:	9304      	str	r3, [sp, #16]
 8001e8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e92:	4829      	ldr	r0, [pc, #164]	; (8001f38 <_vfiprintf_r+0x224>)
 8001e94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001e98:	2206      	movs	r2, #6
 8001e9a:	f7fe f9c1 	bl	8000220 <memchr>
 8001e9e:	2800      	cmp	r0, #0
 8001ea0:	d03f      	beq.n	8001f22 <_vfiprintf_r+0x20e>
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <_vfiprintf_r+0x228>)
 8001ea4:	bb1b      	cbnz	r3, 8001eee <_vfiprintf_r+0x1da>
 8001ea6:	9b03      	ldr	r3, [sp, #12]
 8001ea8:	3307      	adds	r3, #7
 8001eaa:	f023 0307 	bic.w	r3, r3, #7
 8001eae:	3308      	adds	r3, #8
 8001eb0:	9303      	str	r3, [sp, #12]
 8001eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001eb4:	443b      	add	r3, r7
 8001eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8001eb8:	e768      	b.n	8001d8c <_vfiprintf_r+0x78>
 8001eba:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ebe:	460c      	mov	r4, r1
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	e7a6      	b.n	8001e12 <_vfiprintf_r+0xfe>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	3401      	adds	r4, #1
 8001ec8:	9305      	str	r3, [sp, #20]
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 0c0a 	mov.w	ip, #10
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ed6:	3a30      	subs	r2, #48	; 0x30
 8001ed8:	2a09      	cmp	r2, #9
 8001eda:	d903      	bls.n	8001ee4 <_vfiprintf_r+0x1d0>
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0c6      	beq.n	8001e6e <_vfiprintf_r+0x15a>
 8001ee0:	9105      	str	r1, [sp, #20]
 8001ee2:	e7c4      	b.n	8001e6e <_vfiprintf_r+0x15a>
 8001ee4:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ee8:	4604      	mov	r4, r0
 8001eea:	2301      	movs	r3, #1
 8001eec:	e7f0      	b.n	8001ed0 <_vfiprintf_r+0x1bc>
 8001eee:	ab03      	add	r3, sp, #12
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	462a      	mov	r2, r5
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <_vfiprintf_r+0x22c>)
 8001ef6:	a904      	add	r1, sp, #16
 8001ef8:	4630      	mov	r0, r6
 8001efa:	f3af 8000 	nop.w
 8001efe:	4607      	mov	r7, r0
 8001f00:	1c78      	adds	r0, r7, #1
 8001f02:	d1d6      	bne.n	8001eb2 <_vfiprintf_r+0x19e>
 8001f04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001f06:	07d9      	lsls	r1, r3, #31
 8001f08:	d405      	bmi.n	8001f16 <_vfiprintf_r+0x202>
 8001f0a:	89ab      	ldrh	r3, [r5, #12]
 8001f0c:	059a      	lsls	r2, r3, #22
 8001f0e:	d402      	bmi.n	8001f16 <_vfiprintf_r+0x202>
 8001f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f12:	f7ff fddc 	bl	8001ace <__retarget_lock_release_recursive>
 8001f16:	89ab      	ldrh	r3, [r5, #12]
 8001f18:	065b      	lsls	r3, r3, #25
 8001f1a:	f53f af1d 	bmi.w	8001d58 <_vfiprintf_r+0x44>
 8001f1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001f20:	e71c      	b.n	8001d5c <_vfiprintf_r+0x48>
 8001f22:	ab03      	add	r3, sp, #12
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	462a      	mov	r2, r5
 8001f28:	4b05      	ldr	r3, [pc, #20]	; (8001f40 <_vfiprintf_r+0x22c>)
 8001f2a:	a904      	add	r1, sp, #16
 8001f2c:	4630      	mov	r0, r6
 8001f2e:	f000 f879 	bl	8002024 <_printf_i>
 8001f32:	e7e4      	b.n	8001efe <_vfiprintf_r+0x1ea>
 8001f34:	08002698 	.word	0x08002698
 8001f38:	080026a2 	.word	0x080026a2
 8001f3c:	00000000 	.word	0x00000000
 8001f40:	08001cef 	.word	0x08001cef
 8001f44:	0800269e 	.word	0x0800269e

08001f48 <_printf_common>:
 8001f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f4c:	4616      	mov	r6, r2
 8001f4e:	4699      	mov	r9, r3
 8001f50:	688a      	ldr	r2, [r1, #8]
 8001f52:	690b      	ldr	r3, [r1, #16]
 8001f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	bfb8      	it	lt
 8001f5c:	4613      	movlt	r3, r2
 8001f5e:	6033      	str	r3, [r6, #0]
 8001f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001f64:	4607      	mov	r7, r0
 8001f66:	460c      	mov	r4, r1
 8001f68:	b10a      	cbz	r2, 8001f6e <_printf_common+0x26>
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	6033      	str	r3, [r6, #0]
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	0699      	lsls	r1, r3, #26
 8001f72:	bf42      	ittt	mi
 8001f74:	6833      	ldrmi	r3, [r6, #0]
 8001f76:	3302      	addmi	r3, #2
 8001f78:	6033      	strmi	r3, [r6, #0]
 8001f7a:	6825      	ldr	r5, [r4, #0]
 8001f7c:	f015 0506 	ands.w	r5, r5, #6
 8001f80:	d106      	bne.n	8001f90 <_printf_common+0x48>
 8001f82:	f104 0a19 	add.w	sl, r4, #25
 8001f86:	68e3      	ldr	r3, [r4, #12]
 8001f88:	6832      	ldr	r2, [r6, #0]
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	42ab      	cmp	r3, r5
 8001f8e:	dc26      	bgt.n	8001fde <_printf_common+0x96>
 8001f90:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001f94:	1e13      	subs	r3, r2, #0
 8001f96:	6822      	ldr	r2, [r4, #0]
 8001f98:	bf18      	it	ne
 8001f9a:	2301      	movne	r3, #1
 8001f9c:	0692      	lsls	r2, r2, #26
 8001f9e:	d42b      	bmi.n	8001ff8 <_printf_common+0xb0>
 8001fa0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001fa4:	4649      	mov	r1, r9
 8001fa6:	4638      	mov	r0, r7
 8001fa8:	47c0      	blx	r8
 8001faa:	3001      	adds	r0, #1
 8001fac:	d01e      	beq.n	8001fec <_printf_common+0xa4>
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	6922      	ldr	r2, [r4, #16]
 8001fb2:	f003 0306 	and.w	r3, r3, #6
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf02      	ittt	eq
 8001fba:	68e5      	ldreq	r5, [r4, #12]
 8001fbc:	6833      	ldreq	r3, [r6, #0]
 8001fbe:	1aed      	subeq	r5, r5, r3
 8001fc0:	68a3      	ldr	r3, [r4, #8]
 8001fc2:	bf0c      	ite	eq
 8001fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fc8:	2500      	movne	r5, #0
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	bfc4      	itt	gt
 8001fce:	1a9b      	subgt	r3, r3, r2
 8001fd0:	18ed      	addgt	r5, r5, r3
 8001fd2:	2600      	movs	r6, #0
 8001fd4:	341a      	adds	r4, #26
 8001fd6:	42b5      	cmp	r5, r6
 8001fd8:	d11a      	bne.n	8002010 <_printf_common+0xc8>
 8001fda:	2000      	movs	r0, #0
 8001fdc:	e008      	b.n	8001ff0 <_printf_common+0xa8>
 8001fde:	2301      	movs	r3, #1
 8001fe0:	4652      	mov	r2, sl
 8001fe2:	4649      	mov	r1, r9
 8001fe4:	4638      	mov	r0, r7
 8001fe6:	47c0      	blx	r8
 8001fe8:	3001      	adds	r0, #1
 8001fea:	d103      	bne.n	8001ff4 <_printf_common+0xac>
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ff4:	3501      	adds	r5, #1
 8001ff6:	e7c6      	b.n	8001f86 <_printf_common+0x3e>
 8001ff8:	18e1      	adds	r1, r4, r3
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	2030      	movs	r0, #48	; 0x30
 8001ffe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002002:	4422      	add	r2, r4
 8002004:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002008:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800200c:	3302      	adds	r3, #2
 800200e:	e7c7      	b.n	8001fa0 <_printf_common+0x58>
 8002010:	2301      	movs	r3, #1
 8002012:	4622      	mov	r2, r4
 8002014:	4649      	mov	r1, r9
 8002016:	4638      	mov	r0, r7
 8002018:	47c0      	blx	r8
 800201a:	3001      	adds	r0, #1
 800201c:	d0e6      	beq.n	8001fec <_printf_common+0xa4>
 800201e:	3601      	adds	r6, #1
 8002020:	e7d9      	b.n	8001fd6 <_printf_common+0x8e>
	...

08002024 <_printf_i>:
 8002024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002028:	7e0f      	ldrb	r7, [r1, #24]
 800202a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800202c:	2f78      	cmp	r7, #120	; 0x78
 800202e:	4691      	mov	r9, r2
 8002030:	4680      	mov	r8, r0
 8002032:	460c      	mov	r4, r1
 8002034:	469a      	mov	sl, r3
 8002036:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800203a:	d807      	bhi.n	800204c <_printf_i+0x28>
 800203c:	2f62      	cmp	r7, #98	; 0x62
 800203e:	d80a      	bhi.n	8002056 <_printf_i+0x32>
 8002040:	2f00      	cmp	r7, #0
 8002042:	f000 80d4 	beq.w	80021ee <_printf_i+0x1ca>
 8002046:	2f58      	cmp	r7, #88	; 0x58
 8002048:	f000 80c0 	beq.w	80021cc <_printf_i+0x1a8>
 800204c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002050:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002054:	e03a      	b.n	80020cc <_printf_i+0xa8>
 8002056:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800205a:	2b15      	cmp	r3, #21
 800205c:	d8f6      	bhi.n	800204c <_printf_i+0x28>
 800205e:	a101      	add	r1, pc, #4	; (adr r1, 8002064 <_printf_i+0x40>)
 8002060:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002064:	080020bd 	.word	0x080020bd
 8002068:	080020d1 	.word	0x080020d1
 800206c:	0800204d 	.word	0x0800204d
 8002070:	0800204d 	.word	0x0800204d
 8002074:	0800204d 	.word	0x0800204d
 8002078:	0800204d 	.word	0x0800204d
 800207c:	080020d1 	.word	0x080020d1
 8002080:	0800204d 	.word	0x0800204d
 8002084:	0800204d 	.word	0x0800204d
 8002088:	0800204d 	.word	0x0800204d
 800208c:	0800204d 	.word	0x0800204d
 8002090:	080021d5 	.word	0x080021d5
 8002094:	080020fd 	.word	0x080020fd
 8002098:	0800218f 	.word	0x0800218f
 800209c:	0800204d 	.word	0x0800204d
 80020a0:	0800204d 	.word	0x0800204d
 80020a4:	080021f7 	.word	0x080021f7
 80020a8:	0800204d 	.word	0x0800204d
 80020ac:	080020fd 	.word	0x080020fd
 80020b0:	0800204d 	.word	0x0800204d
 80020b4:	0800204d 	.word	0x0800204d
 80020b8:	08002197 	.word	0x08002197
 80020bc:	682b      	ldr	r3, [r5, #0]
 80020be:	1d1a      	adds	r2, r3, #4
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	602a      	str	r2, [r5, #0]
 80020c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80020c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80020cc:	2301      	movs	r3, #1
 80020ce:	e09f      	b.n	8002210 <_printf_i+0x1ec>
 80020d0:	6820      	ldr	r0, [r4, #0]
 80020d2:	682b      	ldr	r3, [r5, #0]
 80020d4:	0607      	lsls	r7, r0, #24
 80020d6:	f103 0104 	add.w	r1, r3, #4
 80020da:	6029      	str	r1, [r5, #0]
 80020dc:	d501      	bpl.n	80020e2 <_printf_i+0xbe>
 80020de:	681e      	ldr	r6, [r3, #0]
 80020e0:	e003      	b.n	80020ea <_printf_i+0xc6>
 80020e2:	0646      	lsls	r6, r0, #25
 80020e4:	d5fb      	bpl.n	80020de <_printf_i+0xba>
 80020e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80020ea:	2e00      	cmp	r6, #0
 80020ec:	da03      	bge.n	80020f6 <_printf_i+0xd2>
 80020ee:	232d      	movs	r3, #45	; 0x2d
 80020f0:	4276      	negs	r6, r6
 80020f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020f6:	485a      	ldr	r0, [pc, #360]	; (8002260 <_printf_i+0x23c>)
 80020f8:	230a      	movs	r3, #10
 80020fa:	e012      	b.n	8002122 <_printf_i+0xfe>
 80020fc:	682b      	ldr	r3, [r5, #0]
 80020fe:	6820      	ldr	r0, [r4, #0]
 8002100:	1d19      	adds	r1, r3, #4
 8002102:	6029      	str	r1, [r5, #0]
 8002104:	0605      	lsls	r5, r0, #24
 8002106:	d501      	bpl.n	800210c <_printf_i+0xe8>
 8002108:	681e      	ldr	r6, [r3, #0]
 800210a:	e002      	b.n	8002112 <_printf_i+0xee>
 800210c:	0641      	lsls	r1, r0, #25
 800210e:	d5fb      	bpl.n	8002108 <_printf_i+0xe4>
 8002110:	881e      	ldrh	r6, [r3, #0]
 8002112:	4853      	ldr	r0, [pc, #332]	; (8002260 <_printf_i+0x23c>)
 8002114:	2f6f      	cmp	r7, #111	; 0x6f
 8002116:	bf0c      	ite	eq
 8002118:	2308      	moveq	r3, #8
 800211a:	230a      	movne	r3, #10
 800211c:	2100      	movs	r1, #0
 800211e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002122:	6865      	ldr	r5, [r4, #4]
 8002124:	60a5      	str	r5, [r4, #8]
 8002126:	2d00      	cmp	r5, #0
 8002128:	bfa2      	ittt	ge
 800212a:	6821      	ldrge	r1, [r4, #0]
 800212c:	f021 0104 	bicge.w	r1, r1, #4
 8002130:	6021      	strge	r1, [r4, #0]
 8002132:	b90e      	cbnz	r6, 8002138 <_printf_i+0x114>
 8002134:	2d00      	cmp	r5, #0
 8002136:	d04b      	beq.n	80021d0 <_printf_i+0x1ac>
 8002138:	4615      	mov	r5, r2
 800213a:	fbb6 f1f3 	udiv	r1, r6, r3
 800213e:	fb03 6711 	mls	r7, r3, r1, r6
 8002142:	5dc7      	ldrb	r7, [r0, r7]
 8002144:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002148:	4637      	mov	r7, r6
 800214a:	42bb      	cmp	r3, r7
 800214c:	460e      	mov	r6, r1
 800214e:	d9f4      	bls.n	800213a <_printf_i+0x116>
 8002150:	2b08      	cmp	r3, #8
 8002152:	d10b      	bne.n	800216c <_printf_i+0x148>
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	07de      	lsls	r6, r3, #31
 8002158:	d508      	bpl.n	800216c <_printf_i+0x148>
 800215a:	6923      	ldr	r3, [r4, #16]
 800215c:	6861      	ldr	r1, [r4, #4]
 800215e:	4299      	cmp	r1, r3
 8002160:	bfde      	ittt	le
 8002162:	2330      	movle	r3, #48	; 0x30
 8002164:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002168:	f105 35ff 	addle.w	r5, r5, #4294967295
 800216c:	1b52      	subs	r2, r2, r5
 800216e:	6122      	str	r2, [r4, #16]
 8002170:	f8cd a000 	str.w	sl, [sp]
 8002174:	464b      	mov	r3, r9
 8002176:	aa03      	add	r2, sp, #12
 8002178:	4621      	mov	r1, r4
 800217a:	4640      	mov	r0, r8
 800217c:	f7ff fee4 	bl	8001f48 <_printf_common>
 8002180:	3001      	adds	r0, #1
 8002182:	d14a      	bne.n	800221a <_printf_i+0x1f6>
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	b004      	add	sp, #16
 800218a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	f043 0320 	orr.w	r3, r3, #32
 8002194:	6023      	str	r3, [r4, #0]
 8002196:	4833      	ldr	r0, [pc, #204]	; (8002264 <_printf_i+0x240>)
 8002198:	2778      	movs	r7, #120	; 0x78
 800219a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	6829      	ldr	r1, [r5, #0]
 80021a2:	061f      	lsls	r7, r3, #24
 80021a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80021a8:	d402      	bmi.n	80021b0 <_printf_i+0x18c>
 80021aa:	065f      	lsls	r7, r3, #25
 80021ac:	bf48      	it	mi
 80021ae:	b2b6      	uxthmi	r6, r6
 80021b0:	07df      	lsls	r7, r3, #31
 80021b2:	bf48      	it	mi
 80021b4:	f043 0320 	orrmi.w	r3, r3, #32
 80021b8:	6029      	str	r1, [r5, #0]
 80021ba:	bf48      	it	mi
 80021bc:	6023      	strmi	r3, [r4, #0]
 80021be:	b91e      	cbnz	r6, 80021c8 <_printf_i+0x1a4>
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	f023 0320 	bic.w	r3, r3, #32
 80021c6:	6023      	str	r3, [r4, #0]
 80021c8:	2310      	movs	r3, #16
 80021ca:	e7a7      	b.n	800211c <_printf_i+0xf8>
 80021cc:	4824      	ldr	r0, [pc, #144]	; (8002260 <_printf_i+0x23c>)
 80021ce:	e7e4      	b.n	800219a <_printf_i+0x176>
 80021d0:	4615      	mov	r5, r2
 80021d2:	e7bd      	b.n	8002150 <_printf_i+0x12c>
 80021d4:	682b      	ldr	r3, [r5, #0]
 80021d6:	6826      	ldr	r6, [r4, #0]
 80021d8:	6961      	ldr	r1, [r4, #20]
 80021da:	1d18      	adds	r0, r3, #4
 80021dc:	6028      	str	r0, [r5, #0]
 80021de:	0635      	lsls	r5, r6, #24
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	d501      	bpl.n	80021e8 <_printf_i+0x1c4>
 80021e4:	6019      	str	r1, [r3, #0]
 80021e6:	e002      	b.n	80021ee <_printf_i+0x1ca>
 80021e8:	0670      	lsls	r0, r6, #25
 80021ea:	d5fb      	bpl.n	80021e4 <_printf_i+0x1c0>
 80021ec:	8019      	strh	r1, [r3, #0]
 80021ee:	2300      	movs	r3, #0
 80021f0:	6123      	str	r3, [r4, #16]
 80021f2:	4615      	mov	r5, r2
 80021f4:	e7bc      	b.n	8002170 <_printf_i+0x14c>
 80021f6:	682b      	ldr	r3, [r5, #0]
 80021f8:	1d1a      	adds	r2, r3, #4
 80021fa:	602a      	str	r2, [r5, #0]
 80021fc:	681d      	ldr	r5, [r3, #0]
 80021fe:	6862      	ldr	r2, [r4, #4]
 8002200:	2100      	movs	r1, #0
 8002202:	4628      	mov	r0, r5
 8002204:	f7fe f80c 	bl	8000220 <memchr>
 8002208:	b108      	cbz	r0, 800220e <_printf_i+0x1ea>
 800220a:	1b40      	subs	r0, r0, r5
 800220c:	6060      	str	r0, [r4, #4]
 800220e:	6863      	ldr	r3, [r4, #4]
 8002210:	6123      	str	r3, [r4, #16]
 8002212:	2300      	movs	r3, #0
 8002214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002218:	e7aa      	b.n	8002170 <_printf_i+0x14c>
 800221a:	6923      	ldr	r3, [r4, #16]
 800221c:	462a      	mov	r2, r5
 800221e:	4649      	mov	r1, r9
 8002220:	4640      	mov	r0, r8
 8002222:	47d0      	blx	sl
 8002224:	3001      	adds	r0, #1
 8002226:	d0ad      	beq.n	8002184 <_printf_i+0x160>
 8002228:	6823      	ldr	r3, [r4, #0]
 800222a:	079b      	lsls	r3, r3, #30
 800222c:	d413      	bmi.n	8002256 <_printf_i+0x232>
 800222e:	68e0      	ldr	r0, [r4, #12]
 8002230:	9b03      	ldr	r3, [sp, #12]
 8002232:	4298      	cmp	r0, r3
 8002234:	bfb8      	it	lt
 8002236:	4618      	movlt	r0, r3
 8002238:	e7a6      	b.n	8002188 <_printf_i+0x164>
 800223a:	2301      	movs	r3, #1
 800223c:	4632      	mov	r2, r6
 800223e:	4649      	mov	r1, r9
 8002240:	4640      	mov	r0, r8
 8002242:	47d0      	blx	sl
 8002244:	3001      	adds	r0, #1
 8002246:	d09d      	beq.n	8002184 <_printf_i+0x160>
 8002248:	3501      	adds	r5, #1
 800224a:	68e3      	ldr	r3, [r4, #12]
 800224c:	9903      	ldr	r1, [sp, #12]
 800224e:	1a5b      	subs	r3, r3, r1
 8002250:	42ab      	cmp	r3, r5
 8002252:	dcf2      	bgt.n	800223a <_printf_i+0x216>
 8002254:	e7eb      	b.n	800222e <_printf_i+0x20a>
 8002256:	2500      	movs	r5, #0
 8002258:	f104 0619 	add.w	r6, r4, #25
 800225c:	e7f5      	b.n	800224a <_printf_i+0x226>
 800225e:	bf00      	nop
 8002260:	080026a9 	.word	0x080026a9
 8002264:	080026ba 	.word	0x080026ba

08002268 <__sflush_r>:
 8002268:	898a      	ldrh	r2, [r1, #12]
 800226a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800226e:	4605      	mov	r5, r0
 8002270:	0710      	lsls	r0, r2, #28
 8002272:	460c      	mov	r4, r1
 8002274:	d458      	bmi.n	8002328 <__sflush_r+0xc0>
 8002276:	684b      	ldr	r3, [r1, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	dc05      	bgt.n	8002288 <__sflush_r+0x20>
 800227c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800227e:	2b00      	cmp	r3, #0
 8002280:	dc02      	bgt.n	8002288 <__sflush_r+0x20>
 8002282:	2000      	movs	r0, #0
 8002284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800228a:	2e00      	cmp	r6, #0
 800228c:	d0f9      	beq.n	8002282 <__sflush_r+0x1a>
 800228e:	2300      	movs	r3, #0
 8002290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002294:	682f      	ldr	r7, [r5, #0]
 8002296:	6a21      	ldr	r1, [r4, #32]
 8002298:	602b      	str	r3, [r5, #0]
 800229a:	d032      	beq.n	8002302 <__sflush_r+0x9a>
 800229c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800229e:	89a3      	ldrh	r3, [r4, #12]
 80022a0:	075a      	lsls	r2, r3, #29
 80022a2:	d505      	bpl.n	80022b0 <__sflush_r+0x48>
 80022a4:	6863      	ldr	r3, [r4, #4]
 80022a6:	1ac0      	subs	r0, r0, r3
 80022a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022aa:	b10b      	cbz	r3, 80022b0 <__sflush_r+0x48>
 80022ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80022ae:	1ac0      	subs	r0, r0, r3
 80022b0:	2300      	movs	r3, #0
 80022b2:	4602      	mov	r2, r0
 80022b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80022b6:	6a21      	ldr	r1, [r4, #32]
 80022b8:	4628      	mov	r0, r5
 80022ba:	47b0      	blx	r6
 80022bc:	1c43      	adds	r3, r0, #1
 80022be:	89a3      	ldrh	r3, [r4, #12]
 80022c0:	d106      	bne.n	80022d0 <__sflush_r+0x68>
 80022c2:	6829      	ldr	r1, [r5, #0]
 80022c4:	291d      	cmp	r1, #29
 80022c6:	d82b      	bhi.n	8002320 <__sflush_r+0xb8>
 80022c8:	4a29      	ldr	r2, [pc, #164]	; (8002370 <__sflush_r+0x108>)
 80022ca:	410a      	asrs	r2, r1
 80022cc:	07d6      	lsls	r6, r2, #31
 80022ce:	d427      	bmi.n	8002320 <__sflush_r+0xb8>
 80022d0:	2200      	movs	r2, #0
 80022d2:	6062      	str	r2, [r4, #4]
 80022d4:	04d9      	lsls	r1, r3, #19
 80022d6:	6922      	ldr	r2, [r4, #16]
 80022d8:	6022      	str	r2, [r4, #0]
 80022da:	d504      	bpl.n	80022e6 <__sflush_r+0x7e>
 80022dc:	1c42      	adds	r2, r0, #1
 80022de:	d101      	bne.n	80022e4 <__sflush_r+0x7c>
 80022e0:	682b      	ldr	r3, [r5, #0]
 80022e2:	b903      	cbnz	r3, 80022e6 <__sflush_r+0x7e>
 80022e4:	6560      	str	r0, [r4, #84]	; 0x54
 80022e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80022e8:	602f      	str	r7, [r5, #0]
 80022ea:	2900      	cmp	r1, #0
 80022ec:	d0c9      	beq.n	8002282 <__sflush_r+0x1a>
 80022ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80022f2:	4299      	cmp	r1, r3
 80022f4:	d002      	beq.n	80022fc <__sflush_r+0x94>
 80022f6:	4628      	mov	r0, r5
 80022f8:	f7ff fbea 	bl	8001ad0 <_free_r>
 80022fc:	2000      	movs	r0, #0
 80022fe:	6360      	str	r0, [r4, #52]	; 0x34
 8002300:	e7c0      	b.n	8002284 <__sflush_r+0x1c>
 8002302:	2301      	movs	r3, #1
 8002304:	4628      	mov	r0, r5
 8002306:	47b0      	blx	r6
 8002308:	1c41      	adds	r1, r0, #1
 800230a:	d1c8      	bne.n	800229e <__sflush_r+0x36>
 800230c:	682b      	ldr	r3, [r5, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0c5      	beq.n	800229e <__sflush_r+0x36>
 8002312:	2b1d      	cmp	r3, #29
 8002314:	d001      	beq.n	800231a <__sflush_r+0xb2>
 8002316:	2b16      	cmp	r3, #22
 8002318:	d101      	bne.n	800231e <__sflush_r+0xb6>
 800231a:	602f      	str	r7, [r5, #0]
 800231c:	e7b1      	b.n	8002282 <__sflush_r+0x1a>
 800231e:	89a3      	ldrh	r3, [r4, #12]
 8002320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002324:	81a3      	strh	r3, [r4, #12]
 8002326:	e7ad      	b.n	8002284 <__sflush_r+0x1c>
 8002328:	690f      	ldr	r7, [r1, #16]
 800232a:	2f00      	cmp	r7, #0
 800232c:	d0a9      	beq.n	8002282 <__sflush_r+0x1a>
 800232e:	0793      	lsls	r3, r2, #30
 8002330:	680e      	ldr	r6, [r1, #0]
 8002332:	bf08      	it	eq
 8002334:	694b      	ldreq	r3, [r1, #20]
 8002336:	600f      	str	r7, [r1, #0]
 8002338:	bf18      	it	ne
 800233a:	2300      	movne	r3, #0
 800233c:	eba6 0807 	sub.w	r8, r6, r7
 8002340:	608b      	str	r3, [r1, #8]
 8002342:	f1b8 0f00 	cmp.w	r8, #0
 8002346:	dd9c      	ble.n	8002282 <__sflush_r+0x1a>
 8002348:	6a21      	ldr	r1, [r4, #32]
 800234a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800234c:	4643      	mov	r3, r8
 800234e:	463a      	mov	r2, r7
 8002350:	4628      	mov	r0, r5
 8002352:	47b0      	blx	r6
 8002354:	2800      	cmp	r0, #0
 8002356:	dc06      	bgt.n	8002366 <__sflush_r+0xfe>
 8002358:	89a3      	ldrh	r3, [r4, #12]
 800235a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800235e:	81a3      	strh	r3, [r4, #12]
 8002360:	f04f 30ff 	mov.w	r0, #4294967295
 8002364:	e78e      	b.n	8002284 <__sflush_r+0x1c>
 8002366:	4407      	add	r7, r0
 8002368:	eba8 0800 	sub.w	r8, r8, r0
 800236c:	e7e9      	b.n	8002342 <__sflush_r+0xda>
 800236e:	bf00      	nop
 8002370:	dfbffffe 	.word	0xdfbffffe

08002374 <_fflush_r>:
 8002374:	b538      	push	{r3, r4, r5, lr}
 8002376:	690b      	ldr	r3, [r1, #16]
 8002378:	4605      	mov	r5, r0
 800237a:	460c      	mov	r4, r1
 800237c:	b913      	cbnz	r3, 8002384 <_fflush_r+0x10>
 800237e:	2500      	movs	r5, #0
 8002380:	4628      	mov	r0, r5
 8002382:	bd38      	pop	{r3, r4, r5, pc}
 8002384:	b118      	cbz	r0, 800238e <_fflush_r+0x1a>
 8002386:	6a03      	ldr	r3, [r0, #32]
 8002388:	b90b      	cbnz	r3, 800238e <_fflush_r+0x1a>
 800238a:	f7ff fa9b 	bl	80018c4 <__sinit>
 800238e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f3      	beq.n	800237e <_fflush_r+0xa>
 8002396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002398:	07d0      	lsls	r0, r2, #31
 800239a:	d404      	bmi.n	80023a6 <_fflush_r+0x32>
 800239c:	0599      	lsls	r1, r3, #22
 800239e:	d402      	bmi.n	80023a6 <_fflush_r+0x32>
 80023a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023a2:	f7ff fb93 	bl	8001acc <__retarget_lock_acquire_recursive>
 80023a6:	4628      	mov	r0, r5
 80023a8:	4621      	mov	r1, r4
 80023aa:	f7ff ff5d 	bl	8002268 <__sflush_r>
 80023ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023b0:	07da      	lsls	r2, r3, #31
 80023b2:	4605      	mov	r5, r0
 80023b4:	d4e4      	bmi.n	8002380 <_fflush_r+0xc>
 80023b6:	89a3      	ldrh	r3, [r4, #12]
 80023b8:	059b      	lsls	r3, r3, #22
 80023ba:	d4e1      	bmi.n	8002380 <_fflush_r+0xc>
 80023bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023be:	f7ff fb86 	bl	8001ace <__retarget_lock_release_recursive>
 80023c2:	e7dd      	b.n	8002380 <_fflush_r+0xc>

080023c4 <__swbuf_r>:
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c6:	460e      	mov	r6, r1
 80023c8:	4614      	mov	r4, r2
 80023ca:	4605      	mov	r5, r0
 80023cc:	b118      	cbz	r0, 80023d6 <__swbuf_r+0x12>
 80023ce:	6a03      	ldr	r3, [r0, #32]
 80023d0:	b90b      	cbnz	r3, 80023d6 <__swbuf_r+0x12>
 80023d2:	f7ff fa77 	bl	80018c4 <__sinit>
 80023d6:	69a3      	ldr	r3, [r4, #24]
 80023d8:	60a3      	str	r3, [r4, #8]
 80023da:	89a3      	ldrh	r3, [r4, #12]
 80023dc:	071a      	lsls	r2, r3, #28
 80023de:	d525      	bpl.n	800242c <__swbuf_r+0x68>
 80023e0:	6923      	ldr	r3, [r4, #16]
 80023e2:	b31b      	cbz	r3, 800242c <__swbuf_r+0x68>
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	6922      	ldr	r2, [r4, #16]
 80023e8:	1a98      	subs	r0, r3, r2
 80023ea:	6963      	ldr	r3, [r4, #20]
 80023ec:	b2f6      	uxtb	r6, r6
 80023ee:	4283      	cmp	r3, r0
 80023f0:	4637      	mov	r7, r6
 80023f2:	dc04      	bgt.n	80023fe <__swbuf_r+0x3a>
 80023f4:	4621      	mov	r1, r4
 80023f6:	4628      	mov	r0, r5
 80023f8:	f7ff ffbc 	bl	8002374 <_fflush_r>
 80023fc:	b9e0      	cbnz	r0, 8002438 <__swbuf_r+0x74>
 80023fe:	68a3      	ldr	r3, [r4, #8]
 8002400:	3b01      	subs	r3, #1
 8002402:	60a3      	str	r3, [r4, #8]
 8002404:	6823      	ldr	r3, [r4, #0]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	6022      	str	r2, [r4, #0]
 800240a:	701e      	strb	r6, [r3, #0]
 800240c:	6962      	ldr	r2, [r4, #20]
 800240e:	1c43      	adds	r3, r0, #1
 8002410:	429a      	cmp	r2, r3
 8002412:	d004      	beq.n	800241e <__swbuf_r+0x5a>
 8002414:	89a3      	ldrh	r3, [r4, #12]
 8002416:	07db      	lsls	r3, r3, #31
 8002418:	d506      	bpl.n	8002428 <__swbuf_r+0x64>
 800241a:	2e0a      	cmp	r6, #10
 800241c:	d104      	bne.n	8002428 <__swbuf_r+0x64>
 800241e:	4621      	mov	r1, r4
 8002420:	4628      	mov	r0, r5
 8002422:	f7ff ffa7 	bl	8002374 <_fflush_r>
 8002426:	b938      	cbnz	r0, 8002438 <__swbuf_r+0x74>
 8002428:	4638      	mov	r0, r7
 800242a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800242c:	4621      	mov	r1, r4
 800242e:	4628      	mov	r0, r5
 8002430:	f000 f806 	bl	8002440 <__swsetup_r>
 8002434:	2800      	cmp	r0, #0
 8002436:	d0d5      	beq.n	80023e4 <__swbuf_r+0x20>
 8002438:	f04f 37ff 	mov.w	r7, #4294967295
 800243c:	e7f4      	b.n	8002428 <__swbuf_r+0x64>
	...

08002440 <__swsetup_r>:
 8002440:	b538      	push	{r3, r4, r5, lr}
 8002442:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <__swsetup_r+0xac>)
 8002444:	4605      	mov	r5, r0
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	460c      	mov	r4, r1
 800244a:	b118      	cbz	r0, 8002454 <__swsetup_r+0x14>
 800244c:	6a03      	ldr	r3, [r0, #32]
 800244e:	b90b      	cbnz	r3, 8002454 <__swsetup_r+0x14>
 8002450:	f7ff fa38 	bl	80018c4 <__sinit>
 8002454:	89a3      	ldrh	r3, [r4, #12]
 8002456:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800245a:	0718      	lsls	r0, r3, #28
 800245c:	d422      	bmi.n	80024a4 <__swsetup_r+0x64>
 800245e:	06d9      	lsls	r1, r3, #27
 8002460:	d407      	bmi.n	8002472 <__swsetup_r+0x32>
 8002462:	2309      	movs	r3, #9
 8002464:	602b      	str	r3, [r5, #0]
 8002466:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800246a:	81a3      	strh	r3, [r4, #12]
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	e034      	b.n	80024dc <__swsetup_r+0x9c>
 8002472:	0758      	lsls	r0, r3, #29
 8002474:	d512      	bpl.n	800249c <__swsetup_r+0x5c>
 8002476:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002478:	b141      	cbz	r1, 800248c <__swsetup_r+0x4c>
 800247a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800247e:	4299      	cmp	r1, r3
 8002480:	d002      	beq.n	8002488 <__swsetup_r+0x48>
 8002482:	4628      	mov	r0, r5
 8002484:	f7ff fb24 	bl	8001ad0 <_free_r>
 8002488:	2300      	movs	r3, #0
 800248a:	6363      	str	r3, [r4, #52]	; 0x34
 800248c:	89a3      	ldrh	r3, [r4, #12]
 800248e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002492:	81a3      	strh	r3, [r4, #12]
 8002494:	2300      	movs	r3, #0
 8002496:	6063      	str	r3, [r4, #4]
 8002498:	6923      	ldr	r3, [r4, #16]
 800249a:	6023      	str	r3, [r4, #0]
 800249c:	89a3      	ldrh	r3, [r4, #12]
 800249e:	f043 0308 	orr.w	r3, r3, #8
 80024a2:	81a3      	strh	r3, [r4, #12]
 80024a4:	6923      	ldr	r3, [r4, #16]
 80024a6:	b94b      	cbnz	r3, 80024bc <__swsetup_r+0x7c>
 80024a8:	89a3      	ldrh	r3, [r4, #12]
 80024aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80024ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024b2:	d003      	beq.n	80024bc <__swsetup_r+0x7c>
 80024b4:	4621      	mov	r1, r4
 80024b6:	4628      	mov	r0, r5
 80024b8:	f000 f850 	bl	800255c <__smakebuf_r>
 80024bc:	89a0      	ldrh	r0, [r4, #12]
 80024be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80024c2:	f010 0301 	ands.w	r3, r0, #1
 80024c6:	d00a      	beq.n	80024de <__swsetup_r+0x9e>
 80024c8:	2300      	movs	r3, #0
 80024ca:	60a3      	str	r3, [r4, #8]
 80024cc:	6963      	ldr	r3, [r4, #20]
 80024ce:	425b      	negs	r3, r3
 80024d0:	61a3      	str	r3, [r4, #24]
 80024d2:	6923      	ldr	r3, [r4, #16]
 80024d4:	b943      	cbnz	r3, 80024e8 <__swsetup_r+0xa8>
 80024d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80024da:	d1c4      	bne.n	8002466 <__swsetup_r+0x26>
 80024dc:	bd38      	pop	{r3, r4, r5, pc}
 80024de:	0781      	lsls	r1, r0, #30
 80024e0:	bf58      	it	pl
 80024e2:	6963      	ldrpl	r3, [r4, #20]
 80024e4:	60a3      	str	r3, [r4, #8]
 80024e6:	e7f4      	b.n	80024d2 <__swsetup_r+0x92>
 80024e8:	2000      	movs	r0, #0
 80024ea:	e7f7      	b.n	80024dc <__swsetup_r+0x9c>
 80024ec:	20000088 	.word	0x20000088

080024f0 <_sbrk_r>:
 80024f0:	b538      	push	{r3, r4, r5, lr}
 80024f2:	4d06      	ldr	r5, [pc, #24]	; (800250c <_sbrk_r+0x1c>)
 80024f4:	2300      	movs	r3, #0
 80024f6:	4604      	mov	r4, r0
 80024f8:	4608      	mov	r0, r1
 80024fa:	602b      	str	r3, [r5, #0]
 80024fc:	f7fe f9fa 	bl	80008f4 <_sbrk>
 8002500:	1c43      	adds	r3, r0, #1
 8002502:	d102      	bne.n	800250a <_sbrk_r+0x1a>
 8002504:	682b      	ldr	r3, [r5, #0]
 8002506:	b103      	cbz	r3, 800250a <_sbrk_r+0x1a>
 8002508:	6023      	str	r3, [r4, #0]
 800250a:	bd38      	pop	{r3, r4, r5, pc}
 800250c:	200001ec 	.word	0x200001ec

08002510 <__swhatbuf_r>:
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	460c      	mov	r4, r1
 8002514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002518:	2900      	cmp	r1, #0
 800251a:	b096      	sub	sp, #88	; 0x58
 800251c:	4615      	mov	r5, r2
 800251e:	461e      	mov	r6, r3
 8002520:	da0d      	bge.n	800253e <__swhatbuf_r+0x2e>
 8002522:	89a3      	ldrh	r3, [r4, #12]
 8002524:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002528:	f04f 0100 	mov.w	r1, #0
 800252c:	bf0c      	ite	eq
 800252e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002532:	2340      	movne	r3, #64	; 0x40
 8002534:	2000      	movs	r0, #0
 8002536:	6031      	str	r1, [r6, #0]
 8002538:	602b      	str	r3, [r5, #0]
 800253a:	b016      	add	sp, #88	; 0x58
 800253c:	bd70      	pop	{r4, r5, r6, pc}
 800253e:	466a      	mov	r2, sp
 8002540:	f000 f848 	bl	80025d4 <_fstat_r>
 8002544:	2800      	cmp	r0, #0
 8002546:	dbec      	blt.n	8002522 <__swhatbuf_r+0x12>
 8002548:	9901      	ldr	r1, [sp, #4]
 800254a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800254e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002552:	4259      	negs	r1, r3
 8002554:	4159      	adcs	r1, r3
 8002556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800255a:	e7eb      	b.n	8002534 <__swhatbuf_r+0x24>

0800255c <__smakebuf_r>:
 800255c:	898b      	ldrh	r3, [r1, #12]
 800255e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002560:	079d      	lsls	r5, r3, #30
 8002562:	4606      	mov	r6, r0
 8002564:	460c      	mov	r4, r1
 8002566:	d507      	bpl.n	8002578 <__smakebuf_r+0x1c>
 8002568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800256c:	6023      	str	r3, [r4, #0]
 800256e:	6123      	str	r3, [r4, #16]
 8002570:	2301      	movs	r3, #1
 8002572:	6163      	str	r3, [r4, #20]
 8002574:	b002      	add	sp, #8
 8002576:	bd70      	pop	{r4, r5, r6, pc}
 8002578:	ab01      	add	r3, sp, #4
 800257a:	466a      	mov	r2, sp
 800257c:	f7ff ffc8 	bl	8002510 <__swhatbuf_r>
 8002580:	9900      	ldr	r1, [sp, #0]
 8002582:	4605      	mov	r5, r0
 8002584:	4630      	mov	r0, r6
 8002586:	f7ff fb0f 	bl	8001ba8 <_malloc_r>
 800258a:	b948      	cbnz	r0, 80025a0 <__smakebuf_r+0x44>
 800258c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002590:	059a      	lsls	r2, r3, #22
 8002592:	d4ef      	bmi.n	8002574 <__smakebuf_r+0x18>
 8002594:	f023 0303 	bic.w	r3, r3, #3
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	81a3      	strh	r3, [r4, #12]
 800259e:	e7e3      	b.n	8002568 <__smakebuf_r+0xc>
 80025a0:	89a3      	ldrh	r3, [r4, #12]
 80025a2:	6020      	str	r0, [r4, #0]
 80025a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a8:	81a3      	strh	r3, [r4, #12]
 80025aa:	9b00      	ldr	r3, [sp, #0]
 80025ac:	6163      	str	r3, [r4, #20]
 80025ae:	9b01      	ldr	r3, [sp, #4]
 80025b0:	6120      	str	r0, [r4, #16]
 80025b2:	b15b      	cbz	r3, 80025cc <__smakebuf_r+0x70>
 80025b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025b8:	4630      	mov	r0, r6
 80025ba:	f000 f81d 	bl	80025f8 <_isatty_r>
 80025be:	b128      	cbz	r0, 80025cc <__smakebuf_r+0x70>
 80025c0:	89a3      	ldrh	r3, [r4, #12]
 80025c2:	f023 0303 	bic.w	r3, r3, #3
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	81a3      	strh	r3, [r4, #12]
 80025cc:	89a3      	ldrh	r3, [r4, #12]
 80025ce:	431d      	orrs	r5, r3
 80025d0:	81a5      	strh	r5, [r4, #12]
 80025d2:	e7cf      	b.n	8002574 <__smakebuf_r+0x18>

080025d4 <_fstat_r>:
 80025d4:	b538      	push	{r3, r4, r5, lr}
 80025d6:	4d07      	ldr	r5, [pc, #28]	; (80025f4 <_fstat_r+0x20>)
 80025d8:	2300      	movs	r3, #0
 80025da:	4604      	mov	r4, r0
 80025dc:	4608      	mov	r0, r1
 80025de:	4611      	mov	r1, r2
 80025e0:	602b      	str	r3, [r5, #0]
 80025e2:	f7fe f95e 	bl	80008a2 <_fstat>
 80025e6:	1c43      	adds	r3, r0, #1
 80025e8:	d102      	bne.n	80025f0 <_fstat_r+0x1c>
 80025ea:	682b      	ldr	r3, [r5, #0]
 80025ec:	b103      	cbz	r3, 80025f0 <_fstat_r+0x1c>
 80025ee:	6023      	str	r3, [r4, #0]
 80025f0:	bd38      	pop	{r3, r4, r5, pc}
 80025f2:	bf00      	nop
 80025f4:	200001ec 	.word	0x200001ec

080025f8 <_isatty_r>:
 80025f8:	b538      	push	{r3, r4, r5, lr}
 80025fa:	4d06      	ldr	r5, [pc, #24]	; (8002614 <_isatty_r+0x1c>)
 80025fc:	2300      	movs	r3, #0
 80025fe:	4604      	mov	r4, r0
 8002600:	4608      	mov	r0, r1
 8002602:	602b      	str	r3, [r5, #0]
 8002604:	f7fe f95d 	bl	80008c2 <_isatty>
 8002608:	1c43      	adds	r3, r0, #1
 800260a:	d102      	bne.n	8002612 <_isatty_r+0x1a>
 800260c:	682b      	ldr	r3, [r5, #0]
 800260e:	b103      	cbz	r3, 8002612 <_isatty_r+0x1a>
 8002610:	6023      	str	r3, [r4, #0]
 8002612:	bd38      	pop	{r3, r4, r5, pc}
 8002614:	200001ec 	.word	0x200001ec

08002618 <_init>:
 8002618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261a:	bf00      	nop
 800261c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800261e:	bc08      	pop	{r3}
 8002620:	469e      	mov	lr, r3
 8002622:	4770      	bx	lr

08002624 <_fini>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	bf00      	nop
 8002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262a:	bc08      	pop	{r3}
 800262c:	469e      	mov	lr, r3
 800262e:	4770      	bx	lr
