
free_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006188  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08006368  08006368  00016368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006424  08006424  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08006424  08006424  00016424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800642c  0800642c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800642c  0800642c  0001642c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006430  08006430  00016430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d78  20000060  08006494  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002dd8  08006494  00022dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001842e  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000362e  00000000  00000000  00038501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015c8  00000000  00000000  0003bb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010f5  00000000  00000000  0003d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003105  00000000  00000000  0003e1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018cbb  00000000  00000000  000412f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdfbe  00000000  00000000  00059fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005eb4  00000000  00000000  00127f6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000060 	.word	0x20000060
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006350 	.word	0x08006350

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000064 	.word	0x20000064
 800021c:	08006350 	.word	0x08006350

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <serialTask1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

static void serialTask1(void *param) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]

	for(;;) {
		if(xSemaphoreTake(LPUARTMutex, portMAX_DELAY) == pdTRUE) {
 8000528:	4b10      	ldr	r3, [pc, #64]	; (800056c <serialTask1+0x50>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f04f 31ff 	mov.w	r1, #4294967295
 8000530:	4618      	mov	r0, r3
 8000532:	f004 f8a1 	bl	8004678 <xQueueSemaphoreTake>
 8000536:	4603      	mov	r3, r0
 8000538:	2b01      	cmp	r3, #1
 800053a:	d10e      	bne.n	800055a <serialTask1+0x3e>
			HAL_UART_Transmit_IT(&hlpuart1, (uint8_t *)"Teste de Serial 1\n\r", 19);
 800053c:	2213      	movs	r2, #19
 800053e:	490c      	ldr	r1, [pc, #48]	; (8000570 <serialTask1+0x54>)
 8000540:	480c      	ldr	r0, [pc, #48]	; (8000574 <serialTask1+0x58>)
 8000542:	f002 f9d1 	bl	80028e8 <HAL_UART_Transmit_IT>
			xSemaphoreGive(LPUARTMutex);
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <serialTask1+0x50>)
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	2300      	movs	r3, #0
 800054c:	2200      	movs	r2, #0
 800054e:	2100      	movs	r1, #0
 8000550:	f003 ff94 	bl	800447c <xQueueGenericSend>
			count++;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	60fb      	str	r3, [r7, #12]
		}

		portYIELD();
 800055a:	4b07      	ldr	r3, [pc, #28]	; (8000578 <serialTask1+0x5c>)
 800055c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	f3bf 8f4f 	dsb	sy
 8000566:	f3bf 8f6f 	isb	sy
		if(xSemaphoreTake(LPUARTMutex, portMAX_DELAY) == pdTRUE) {
 800056a:	e7dd      	b.n	8000528 <serialTask1+0xc>
 800056c:	20000110 	.word	0x20000110
 8000570:	08006368 	.word	0x08006368
 8000574:	2000007c 	.word	0x2000007c
 8000578:	e000ed04 	.word	0xe000ed04

0800057c <serialTask2>:
	}
}

static void serialTask2(void *param) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]

	for(;;) {
		if(xSemaphoreTake(LPUARTMutex, portMAX_DELAY) == pdTRUE) {
 8000588:	4b10      	ldr	r3, [pc, #64]	; (80005cc <serialTask2+0x50>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f04f 31ff 	mov.w	r1, #4294967295
 8000590:	4618      	mov	r0, r3
 8000592:	f004 f871 	bl	8004678 <xQueueSemaphoreTake>
 8000596:	4603      	mov	r3, r0
 8000598:	2b01      	cmp	r3, #1
 800059a:	d10e      	bne.n	80005ba <serialTask2+0x3e>
			HAL_UART_Transmit_IT(&hlpuart1, (uint8_t *)"Teste de Serial 2\n\r", 19);
 800059c:	2213      	movs	r2, #19
 800059e:	490c      	ldr	r1, [pc, #48]	; (80005d0 <serialTask2+0x54>)
 80005a0:	480c      	ldr	r0, [pc, #48]	; (80005d4 <serialTask2+0x58>)
 80005a2:	f002 f9a1 	bl	80028e8 <HAL_UART_Transmit_IT>
			xSemaphoreGive(LPUARTMutex);
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <serialTask2+0x50>)
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	2300      	movs	r3, #0
 80005ac:	2200      	movs	r2, #0
 80005ae:	2100      	movs	r1, #0
 80005b0:	f003 ff64 	bl	800447c <xQueueGenericSend>
			count++;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
		}

		portYIELD();
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <serialTask2+0x5c>)
 80005bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	f3bf 8f4f 	dsb	sy
 80005c6:	f3bf 8f6f 	isb	sy
		if(xSemaphoreTake(LPUARTMutex, portMAX_DELAY) == pdTRUE) {
 80005ca:	e7dd      	b.n	8000588 <serialTask2+0xc>
 80005cc:	20000110 	.word	0x20000110
 80005d0:	0800637c 	.word	0x0800637c
 80005d4:	2000007c 	.word	0x2000007c
 80005d8:	e000ed04 	.word	0xe000ed04

080005dc <CPURemain>:
	}
}

static void CPURemain(void *param) {
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]

	for(;;) {
		count++;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3301      	adds	r3, #1
 80005ec:	60fb      	str	r3, [r7, #12]
 80005ee:	e7fb      	b.n	80005e8 <CPURemain+0xc>

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fa8a 	bl	8000b0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f84f 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8e1 	bl	80007c4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000602:	f000 f895 	bl	8000730 <MX_LPUART1_UART_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  LPUARTMutex = xSemaphoreCreateMutex();
 8000606:	2001      	movs	r0, #1
 8000608:	f003 ff1f 	bl	800444a <xQueueCreateMutex>
 800060c:	4603      	mov	r3, r0
 800060e:	4a1a      	ldr	r2, [pc, #104]	; (8000678 <main+0x88>)
 8000610:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <main+0x8c>)
 8000614:	1d3c      	adds	r4, r7, #4
 8000616:	461d      	mov	r5, r3
 8000618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061c:	682b      	ldr	r3, [r5, #0]
 800061e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f003 fd4a 	bl	80040be <osThreadCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a14      	ldr	r2, [pc, #80]	; (8000680 <main+0x90>)
 800062e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(serialTask1, "Task Serial 1", 256, NULL, 7, NULL);
 8000630:	2300      	movs	r3, #0
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2307      	movs	r3, #7
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800063e:	4911      	ldr	r1, [pc, #68]	; (8000684 <main+0x94>)
 8000640:	4811      	ldr	r0, [pc, #68]	; (8000688 <main+0x98>)
 8000642:	f004 fa27 	bl	8004a94 <xTaskCreate>
  xTaskCreate(serialTask2, "Task Serial 2", 256, NULL, 7, NULL);
 8000646:	2300      	movs	r3, #0
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2307      	movs	r3, #7
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000654:	490d      	ldr	r1, [pc, #52]	; (800068c <main+0x9c>)
 8000656:	480e      	ldr	r0, [pc, #56]	; (8000690 <main+0xa0>)
 8000658:	f004 fa1c 	bl	8004a94 <xTaskCreate>
  xTaskCreate(CPURemain, "Sobra CPU", 256, NULL, 1, NULL);
 800065c:	2300      	movs	r3, #0
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	2301      	movs	r3, #1
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2300      	movs	r3, #0
 8000666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800066a:	490a      	ldr	r1, [pc, #40]	; (8000694 <main+0xa4>)
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <main+0xa8>)
 800066e:	f004 fa11 	bl	8004a94 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000672:	f003 fd1d 	bl	80040b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0x86>
 8000678:	20000110 	.word	0x20000110
 800067c:	080063c8 	.word	0x080063c8
 8000680:	2000010c 	.word	0x2000010c
 8000684:	08006390 	.word	0x08006390
 8000688:	0800051d 	.word	0x0800051d
 800068c:	080063a0 	.word	0x080063a0
 8000690:	0800057d 	.word	0x0800057d
 8000694:	080063b0 	.word	0x080063b0
 8000698:	080005dd 	.word	0x080005dd

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0318 	add.w	r3, r7, #24
 80006a6:	2238      	movs	r2, #56	; 0x38
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f005 fd66 	bl	800617c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
 80006bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 fd7e 	bl	80011c0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c4:	2301      	movs	r3, #1
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006cc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	2303      	movs	r3, #3
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80006d6:	2306      	movs	r3, #6
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006da:	2355      	movs	r3, #85	; 0x55
 80006dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006de:	2302      	movs	r3, #2
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0318 	add.w	r3, r7, #24
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fe0a 	bl	8001308 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x62>
  {
    Error_Handler();
 80006fa:	f000 f8a9 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2104      	movs	r1, #4
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f90e 	bl	8001938 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000722:	f000 f895 	bl	8000850 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000734:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 8000736:	4a22      	ldr	r2, [pc, #136]	; (80007c0 <MX_LPUART1_UART_Init+0x90>)
 8000738:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800073a:	4b20      	ldr	r3, [pc, #128]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 800073c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000740:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 800074a:	2200      	movs	r2, #0
 800074c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800074e:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 8000750:	2200      	movs	r2, #0
 8000752:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 8000756:	220c      	movs	r2, #12
 8000758:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000766:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076c:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 8000774:	f002 f868 	bl	8002848 <HAL_UART_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800077e:	f000 f867 	bl	8000850 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000782:	2100      	movs	r1, #0
 8000784:	480d      	ldr	r0, [pc, #52]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 8000786:	f003 fbb0 	bl	8003eea <HAL_UARTEx_SetTxFifoThreshold>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000790:	f000 f85e 	bl	8000850 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000794:	2100      	movs	r1, #0
 8000796:	4809      	ldr	r0, [pc, #36]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 8000798:	f003 fbe5 	bl	8003f66 <HAL_UARTEx_SetRxFifoThreshold>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007a2:	f000 f855 	bl	8000850 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_LPUART1_UART_Init+0x8c>)
 80007a8:	f003 fb66 	bl	8003e78 <HAL_UARTEx_DisableFifoMode>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007b2:	f000 f84d 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000007c 	.word	0x2000007c
 80007c0:	40008000 	.word	0x40008000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_GPIO_Init+0x44>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <MX_GPIO_Init+0x44>)
 80007d0:	f043 0320 	orr.w	r3, r3, #32
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <MX_GPIO_Init+0x44>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0320 	and.w	r3, r3, #32
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b09      	ldr	r3, [pc, #36]	; (8000808 <MX_GPIO_Init+0x44>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a08      	ldr	r2, [pc, #32]	; (8000808 <MX_GPIO_Init+0x44>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_GPIO_Init+0x44>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f003 fc79 	bl	800410c <osDelay>
 800081a:	e7fb      	b.n	8000814 <StartDefaultTask+0x8>

0800081c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d101      	bne.n	8000832 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082e:	f000 f987 	bl	8000b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if(HAL_GetTick() >= 1000) {
 8000832:	f000 f997 	bl	8000b64 <HAL_GetTick>
 8000836:	4603      	mov	r3, r0
 8000838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800083c:	d301      	bcc.n	8000842 <HAL_TIM_PeriodElapsedCallback+0x26>
	HAL_IncTick();
 800083e:	f000 f97f 	bl	8000b40 <HAL_IncTick>
  }
  /* USER CODE END Callback 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40012c00 	.word	0x40012c00

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_MspInit+0x4c>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <HAL_MspInit+0x4c>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6613      	str	r3, [r2, #96]	; 0x60
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <HAL_MspInit+0x4c>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_MspInit+0x4c>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <HAL_MspInit+0x4c>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000884:	6593      	str	r3, [r2, #88]	; 0x58
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_MspInit+0x4c>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	210f      	movs	r1, #15
 8000896:	f06f 0001 	mvn.w	r0, #1
 800089a:	f000 fa27 	bl	8000cec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09a      	sub	sp, #104	; 0x68
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	2244      	movs	r2, #68	; 0x44
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f005 fc55 	bl	800617c <memset>
  if(huart->Instance==LPUART1)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <HAL_UART_MspInit+0xb8>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d13e      	bne.n	800095a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008dc:	2320      	movs	r3, #32
 80008de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fa73 	bl	8001dd4 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008f4:	f7ff ffac 	bl	8000850 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008f8:	4b1b      	ldr	r3, [pc, #108]	; (8000968 <HAL_UART_MspInit+0xbc>)
 80008fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008fc:	4a1a      	ldr	r2, [pc, #104]	; (8000968 <HAL_UART_MspInit+0xbc>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <HAL_UART_MspInit+0xbc>)
 8000906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <HAL_UART_MspInit+0xbc>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000914:	4a14      	ldr	r2, [pc, #80]	; (8000968 <HAL_UART_MspInit+0xbc>)
 8000916:	f043 0301 	orr.w	r3, r3, #1
 800091a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <HAL_UART_MspInit+0xbc>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000928:	230c      	movs	r3, #12
 800092a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000938:	230c      	movs	r3, #12
 800093a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000940:	4619      	mov	r1, r3
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f000 fab9 	bl	8000ebc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2105      	movs	r1, #5
 800094e:	205b      	movs	r0, #91	; 0x5b
 8000950:	f000 f9cc 	bl	8000cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000954:	205b      	movs	r0, #91	; 0x5b
 8000956:	f000 f9e3 	bl	8000d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800095a:	bf00      	nop
 800095c:	3768      	adds	r7, #104	; 0x68
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40008000 	.word	0x40008000
 8000968:	40021000 	.word	0x40021000

0800096c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08c      	sub	sp, #48	; 0x30
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800097c:	4b2c      	ldr	r3, [pc, #176]	; (8000a30 <HAL_InitTick+0xc4>)
 800097e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000980:	4a2b      	ldr	r2, [pc, #172]	; (8000a30 <HAL_InitTick+0xc4>)
 8000982:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000986:	6613      	str	r3, [r2, #96]	; 0x60
 8000988:	4b29      	ldr	r3, [pc, #164]	; (8000a30 <HAL_InitTick+0xc4>)
 800098a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000994:	f107 020c 	add.w	r2, r7, #12
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 f9a0 	bl	8001ce4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80009a4:	f001 f988 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 80009a8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ac:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <HAL_InitTick+0xc8>)
 80009ae:	fba2 2303 	umull	r2, r3, r2, r3
 80009b2:	0c9b      	lsrs	r3, r3, #18
 80009b4:	3b01      	subs	r3, #1
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <HAL_InitTick+0xcc>)
 80009ba:	4a20      	ldr	r2, [pc, #128]	; (8000a3c <HAL_InitTick+0xd0>)
 80009bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <HAL_InitTick+0xcc>)
 80009c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009c4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <HAL_InitTick+0xcc>)
 80009c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <HAL_InitTick+0xcc>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <HAL_InitTick+0xcc>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80009d8:	4817      	ldr	r0, [pc, #92]	; (8000a38 <HAL_InitTick+0xcc>)
 80009da:	f001 fbeb 	bl	80021b4 <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80009e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d11b      	bne.n	8000a24 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80009ec:	4812      	ldr	r0, [pc, #72]	; (8000a38 <HAL_InitTick+0xcc>)
 80009ee:	f001 fc43 	bl	8002278 <HAL_TIM_Base_Start_IT>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80009f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d111      	bne.n	8000a24 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000a00:	2019      	movs	r0, #25
 8000a02:	f000 f98d 	bl	8000d20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2b0f      	cmp	r3, #15
 8000a0a:	d808      	bhi.n	8000a1e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	2019      	movs	r0, #25
 8000a12:	f000 f96b 	bl	8000cec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_InitTick+0xd4>)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	e002      	b.n	8000a24 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000a24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3730      	adds	r7, #48	; 0x30
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40021000 	.word	0x40021000
 8000a34:	431bde83 	.word	0x431bde83
 8000a38:	20000114 	.word	0x20000114
 8000a3c:	40012c00 	.word	0x40012c00
 8000a40:	20000004 	.word	0x20000004

08000a44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <NMI_Handler+0x4>

08000a4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	e7fe      	b.n	8000a54 <MemManage_Handler+0x4>

08000a56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5a:	e7fe      	b.n	8000a5a <BusFault_Handler+0x4>

08000a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <UsageFault_Handler+0x4>

08000a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a74:	4802      	ldr	r0, [pc, #8]	; (8000a80 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000a76:	f001 fc69 	bl	800234c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000114 	.word	0x20000114

08000a84 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <LPUART1_IRQHandler+0x10>)
 8000a8a:	f001 ffd5 	bl	8002a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000007c 	.word	0x2000007c

08000a98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000abc:	480d      	ldr	r0, [pc, #52]	; (8000af4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000abe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ac2:	490e      	ldr	r1, [pc, #56]	; (8000afc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <LoopForever+0xe>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad8:	4c0b      	ldr	r4, [pc, #44]	; (8000b08 <LoopForever+0x16>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ae6:	f7ff ffd7 	bl	8000a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aea:	f005 fba5 	bl	8006238 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aee:	f7ff fd7f 	bl	80005f0 <main>

08000af2 <LoopForever>:

LoopForever:
    b LoopForever
 8000af2:	e7fe      	b.n	8000af2 <LoopForever>
  ldr   r0, =_estack
 8000af4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b00:	08006434 	.word	0x08006434
  ldr r2, =_sbss
 8000b04:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b08:	20002dd8 	.word	0x20002dd8

08000b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_2_IRQHandler>

08000b0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b082      	sub	sp, #8
 8000b12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f8dc 	bl	8000cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1e:	200f      	movs	r0, #15
 8000b20:	f7ff ff24 	bl	800096c <HAL_InitTick>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d002      	beq.n	8000b30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	e001      	b.n	8000b34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b30:	f7ff fe94 	bl	800085c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b34:	79fb      	ldrb	r3, [r7, #7]

}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_IncTick+0x20>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a03      	ldr	r2, [pc, #12]	; (8000b5c <HAL_IncTick+0x1c>)
 8000b50:	6013      	str	r3, [r2, #0]
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	20000160 	.word	0x20000160
 8000b60:	20000008 	.word	0x20000008

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	; (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000160 	.word	0x20000160

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	; (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ff4c 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000ce4:	bf00      	nop
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	60b9      	str	r1, [r7, #8]
 8000cf6:	607a      	str	r2, [r7, #4]
 8000cf8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfa:	f7ff ff63 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000cfe:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	68b9      	ldr	r1, [r7, #8]
 8000d04:	6978      	ldr	r0, [r7, #20]
 8000d06:	f7ff ffb3 	bl	8000c70 <NVIC_EncodePriority>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff ff82 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d18:	bf00      	nop
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff ff56 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d34:	bf00      	nop
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d005      	beq.n	8000d60 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2204      	movs	r2, #4
 8000d58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	e037      	b.n	8000dd0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 020e 	bic.w	r2, r2, #14
 8000d6e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d7e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0201 	bic.w	r2, r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	2101      	movs	r1, #1
 8000d9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000da2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da8:	687a      	ldr	r2, [r7, #4]
 8000daa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000dac:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d00c      	beq.n	8000dd0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dc4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000dce:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d00d      	beq.n	8000e22 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2204      	movs	r2, #4
 8000e0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	73fb      	strb	r3, [r7, #15]
 8000e20:	e047      	b.n	8000eb2 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 020e 	bic.w	r2, r2, #14
 8000e30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f022 0201 	bic.w	r2, r2, #1
 8000e40:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	f003 021f 	and.w	r2, r3, #31
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000e6e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d00c      	beq.n	8000e92 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000e82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000e86:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000e90:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2201      	movs	r2, #1
 8000e96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	4798      	blx	r3
    }
  }
  return status;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b087      	sub	sp, #28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000eca:	e15a      	b.n	8001182 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 814c 	beq.w	800117c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d005      	beq.n	8000efc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d130      	bne.n	8000f5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f32:	2201      	movs	r2, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	f003 0201 	and.w	r2, r3, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d017      	beq.n	8000f9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d123      	bne.n	8000fee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f003 0307 	and.w	r3, r3, #7
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	6939      	ldr	r1, [r7, #16]
 8000fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0203 	and.w	r2, r3, #3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800102a:	2b00      	cmp	r3, #0
 800102c:	f000 80a6 	beq.w	800117c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001030:	4b5b      	ldr	r3, [pc, #364]	; (80011a0 <HAL_GPIO_Init+0x2e4>)
 8001032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001034:	4a5a      	ldr	r2, [pc, #360]	; (80011a0 <HAL_GPIO_Init+0x2e4>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6613      	str	r3, [r2, #96]	; 0x60
 800103c:	4b58      	ldr	r3, [pc, #352]	; (80011a0 <HAL_GPIO_Init+0x2e4>)
 800103e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001048:	4a56      	ldr	r2, [pc, #344]	; (80011a4 <HAL_GPIO_Init+0x2e8>)
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	220f      	movs	r2, #15
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	4013      	ands	r3, r2
 800106a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001072:	d01f      	beq.n	80010b4 <HAL_GPIO_Init+0x1f8>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a4c      	ldr	r2, [pc, #304]	; (80011a8 <HAL_GPIO_Init+0x2ec>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d019      	beq.n	80010b0 <HAL_GPIO_Init+0x1f4>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a4b      	ldr	r2, [pc, #300]	; (80011ac <HAL_GPIO_Init+0x2f0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d013      	beq.n	80010ac <HAL_GPIO_Init+0x1f0>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a4a      	ldr	r2, [pc, #296]	; (80011b0 <HAL_GPIO_Init+0x2f4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d00d      	beq.n	80010a8 <HAL_GPIO_Init+0x1ec>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a49      	ldr	r2, [pc, #292]	; (80011b4 <HAL_GPIO_Init+0x2f8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d007      	beq.n	80010a4 <HAL_GPIO_Init+0x1e8>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a48      	ldr	r2, [pc, #288]	; (80011b8 <HAL_GPIO_Init+0x2fc>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d101      	bne.n	80010a0 <HAL_GPIO_Init+0x1e4>
 800109c:	2305      	movs	r3, #5
 800109e:	e00a      	b.n	80010b6 <HAL_GPIO_Init+0x1fa>
 80010a0:	2306      	movs	r3, #6
 80010a2:	e008      	b.n	80010b6 <HAL_GPIO_Init+0x1fa>
 80010a4:	2304      	movs	r3, #4
 80010a6:	e006      	b.n	80010b6 <HAL_GPIO_Init+0x1fa>
 80010a8:	2303      	movs	r3, #3
 80010aa:	e004      	b.n	80010b6 <HAL_GPIO_Init+0x1fa>
 80010ac:	2302      	movs	r3, #2
 80010ae:	e002      	b.n	80010b6 <HAL_GPIO_Init+0x1fa>
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <HAL_GPIO_Init+0x1fa>
 80010b4:	2300      	movs	r3, #0
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	f002 0203 	and.w	r2, r2, #3
 80010bc:	0092      	lsls	r2, r2, #2
 80010be:	4093      	lsls	r3, r2
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010c6:	4937      	ldr	r1, [pc, #220]	; (80011a4 <HAL_GPIO_Init+0x2e8>)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	089b      	lsrs	r3, r3, #2
 80010cc:	3302      	adds	r3, #2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010d4:	4b39      	ldr	r3, [pc, #228]	; (80011bc <HAL_GPIO_Init+0x300>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	43db      	mvns	r3, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4013      	ands	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010f8:	4a30      	ldr	r2, [pc, #192]	; (80011bc <HAL_GPIO_Init+0x300>)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010fe:	4b2f      	ldr	r3, [pc, #188]	; (80011bc <HAL_GPIO_Init+0x300>)
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	4313      	orrs	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001122:	4a26      	ldr	r2, [pc, #152]	; (80011bc <HAL_GPIO_Init+0x300>)
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_GPIO_Init+0x300>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	43db      	mvns	r3, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4013      	ands	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <HAL_GPIO_Init+0x300>)
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001152:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_GPIO_Init+0x300>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001176:	4a11      	ldr	r2, [pc, #68]	; (80011bc <HAL_GPIO_Init+0x300>)
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	fa22 f303 	lsr.w	r3, r2, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	f47f ae9d 	bne.w	8000ecc <HAL_GPIO_Init+0x10>
  }
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010000 	.word	0x40010000
 80011a8:	48000400 	.word	0x48000400
 80011ac:	48000800 	.word	0x48000800
 80011b0:	48000c00 	.word	0x48000c00
 80011b4:	48001000 	.word	0x48001000
 80011b8:	48001400 	.word	0x48001400
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d141      	bne.n	8001252 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ce:	4b4b      	ldr	r3, [pc, #300]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011da:	d131      	bne.n	8001240 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011dc:	4b47      	ldr	r3, [pc, #284]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011e2:	4a46      	ldr	r2, [pc, #280]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ec:	4b43      	ldr	r3, [pc, #268]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011f4:	4a41      	ldr	r2, [pc, #260]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011fc:	4b40      	ldr	r3, [pc, #256]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2232      	movs	r2, #50	; 0x32
 8001202:	fb02 f303 	mul.w	r3, r2, r3
 8001206:	4a3f      	ldr	r2, [pc, #252]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	0c9b      	lsrs	r3, r3, #18
 800120e:	3301      	adds	r3, #1
 8001210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001212:	e002      	b.n	800121a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3b01      	subs	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800121a:	4b38      	ldr	r3, [pc, #224]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001226:	d102      	bne.n	800122e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f2      	bne.n	8001214 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800123a:	d158      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e057      	b.n	80012f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001240:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001246:	4a2d      	ldr	r2, [pc, #180]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800124c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001250:	e04d      	b.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001258:	d141      	bne.n	80012de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800125a:	4b28      	ldr	r3, [pc, #160]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001266:	d131      	bne.n	80012cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800126a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800126e:	4a23      	ldr	r2, [pc, #140]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001274:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001278:	4b20      	ldr	r3, [pc, #128]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001280:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001286:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001288:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2232      	movs	r2, #50	; 0x32
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001294:	fba2 2303 	umull	r2, r3, r2, r3
 8001298:	0c9b      	lsrs	r3, r3, #18
 800129a:	3301      	adds	r3, #1
 800129c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800129e:	e002      	b.n	80012a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b2:	d102      	bne.n	80012ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d1f2      	bne.n	80012a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c6:	d112      	bne.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e011      	b.n	80012f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012dc:	e007      	b.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40007000 	.word	0x40007000
 8001300:	20000000 	.word	0x20000000
 8001304:	431bde83 	.word	0x431bde83

08001308 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e306      	b.n	8001928 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d075      	beq.n	8001412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001326:	4b97      	ldr	r3, [pc, #604]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f003 030c 	and.w	r3, r3, #12
 800132e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001330:	4b94      	ldr	r3, [pc, #592]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f003 0303 	and.w	r3, r3, #3
 8001338:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800133a:	69bb      	ldr	r3, [r7, #24]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d102      	bne.n	8001346 <HAL_RCC_OscConfig+0x3e>
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d002      	beq.n	800134c <HAL_RCC_OscConfig+0x44>
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b08      	cmp	r3, #8
 800134a:	d10b      	bne.n	8001364 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	4b8d      	ldr	r3, [pc, #564]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d05b      	beq.n	8001410 <HAL_RCC_OscConfig+0x108>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d157      	bne.n	8001410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e2e1      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136c:	d106      	bne.n	800137c <HAL_RCC_OscConfig+0x74>
 800136e:	4b85      	ldr	r3, [pc, #532]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a84      	ldr	r2, [pc, #528]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	e01d      	b.n	80013b8 <HAL_RCC_OscConfig+0xb0>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001384:	d10c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x98>
 8001386:	4b7f      	ldr	r3, [pc, #508]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a7e      	ldr	r2, [pc, #504]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800138c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001390:	6013      	str	r3, [r2, #0]
 8001392:	4b7c      	ldr	r3, [pc, #496]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a7b      	ldr	r2, [pc, #492]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139c:	6013      	str	r3, [r2, #0]
 800139e:	e00b      	b.n	80013b8 <HAL_RCC_OscConfig+0xb0>
 80013a0:	4b78      	ldr	r3, [pc, #480]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a77      	ldr	r2, [pc, #476]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b75      	ldr	r3, [pc, #468]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a74      	ldr	r2, [pc, #464]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fbd0 	bl	8000b64 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fbcc 	bl	8000b64 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	; 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e2a6      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013da:	4b6a      	ldr	r3, [pc, #424]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0xc0>
 80013e6:	e014      	b.n	8001412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e8:	f7ff fbbc 	bl	8000b64 <HAL_GetTick>
 80013ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ee:	e008      	b.n	8001402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f0:	f7ff fbb8 	bl	8000b64 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	; 0x64
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e292      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001402:	4b60      	ldr	r3, [pc, #384]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1f0      	bne.n	80013f0 <HAL_RCC_OscConfig+0xe8>
 800140e:	e000      	b.n	8001412 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d075      	beq.n	800150a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800141e:	4b59      	ldr	r3, [pc, #356]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
 8001426:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001428:	4b56      	ldr	r3, [pc, #344]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b0c      	cmp	r3, #12
 8001436:	d102      	bne.n	800143e <HAL_RCC_OscConfig+0x136>
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d002      	beq.n	8001444 <HAL_RCC_OscConfig+0x13c>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b04      	cmp	r3, #4
 8001442:	d11f      	bne.n	8001484 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001444:	4b4f      	ldr	r3, [pc, #316]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d005      	beq.n	800145c <HAL_RCC_OscConfig+0x154>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e265      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145c:	4b49      	ldr	r3, [pc, #292]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	061b      	lsls	r3, r3, #24
 800146a:	4946      	ldr	r1, [pc, #280]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001470:	4b45      	ldr	r3, [pc, #276]	; (8001588 <HAL_RCC_OscConfig+0x280>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fa79 	bl	800096c <HAL_InitTick>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d043      	beq.n	8001508 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e251      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d023      	beq.n	80014d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800148c:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a3c      	ldr	r2, [pc, #240]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001498:	f7ff fb64 	bl	8000b64 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fb60 	bl	8000b64 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e23a      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	061b      	lsls	r3, r3, #24
 80014cc:	492d      	ldr	r1, [pc, #180]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
 80014d2:	e01a      	b.n	800150a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d4:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb40 	bl	8000b64 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e8:	f7ff fb3c 	bl	8000b64 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e216      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x1e0>
 8001506:	e000      	b.n	800150a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001508:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d041      	beq.n	800159a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01c      	beq.n	8001558 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001520:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152e:	f7ff fb19 	bl	8000b64 <HAL_GetTick>
 8001532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001536:	f7ff fb15 	bl	8000b64 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e1ef      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800154a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0ef      	beq.n	8001536 <HAL_RCC_OscConfig+0x22e>
 8001556:	e020      	b.n	800159a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001558:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 800155a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <HAL_RCC_OscConfig+0x27c>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fafc 	bl	8000b64 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800156e:	e00d      	b.n	800158c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001570:	f7ff faf8 	bl	8000b64 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d906      	bls.n	800158c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e1d2      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800158c:	4b8c      	ldr	r3, [pc, #560]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800158e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1ea      	bne.n	8001570 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a6 	beq.w	80016f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80015ac:	4b84      	ldr	r3, [pc, #528]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_OscConfig+0x2b4>
 80015b8:	2301      	movs	r3, #1
 80015ba:	e000      	b.n	80015be <HAL_RCC_OscConfig+0x2b6>
 80015bc:	2300      	movs	r3, #0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d00d      	beq.n	80015de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b7f      	ldr	r3, [pc, #508]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c6:	4a7e      	ldr	r2, [pc, #504]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015cc:	6593      	str	r3, [r2, #88]	; 0x58
 80015ce:	4b7c      	ldr	r3, [pc, #496]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015da:	2301      	movs	r3, #1
 80015dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015de:	4b79      	ldr	r3, [pc, #484]	; (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d118      	bne.n	800161c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015ea:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a75      	ldr	r2, [pc, #468]	; (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fab5 	bl	8000b64 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fe:	f7ff fab1 	bl	8000b64 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e18b      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001610:	4b6c      	ldr	r3, [pc, #432]	; (80017c4 <HAL_RCC_OscConfig+0x4bc>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d108      	bne.n	8001636 <HAL_RCC_OscConfig+0x32e>
 8001624:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162a:	4a65      	ldr	r2, [pc, #404]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001634:	e024      	b.n	8001680 <HAL_RCC_OscConfig+0x378>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2b05      	cmp	r3, #5
 800163c:	d110      	bne.n	8001660 <HAL_RCC_OscConfig+0x358>
 800163e:	4b60      	ldr	r3, [pc, #384]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001644:	4a5e      	ldr	r2, [pc, #376]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800164e:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001654:	4a5a      	ldr	r2, [pc, #360]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800165e:	e00f      	b.n	8001680 <HAL_RCC_OscConfig+0x378>
 8001660:	4b57      	ldr	r3, [pc, #348]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001666:	4a56      	ldr	r2, [pc, #344]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001670:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001676:	4a52      	ldr	r2, [pc, #328]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001678:	f023 0304 	bic.w	r3, r3, #4
 800167c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d016      	beq.n	80016b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fa6c 	bl	8000b64 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001690:	f7ff fa68 	bl	8000b64 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	f241 3288 	movw	r2, #5000	; 0x1388
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e140      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016a6:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0ed      	beq.n	8001690 <HAL_RCC_OscConfig+0x388>
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b6:	f7ff fa55 	bl	8000b64 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016bc:	e00a      	b.n	80016d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016be:	f7ff fa51 	bl	8000b64 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e129      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d4:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ed      	bne.n	80016be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016e2:	7ffb      	ldrb	r3, [r7, #31]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d105      	bne.n	80016f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e8:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ec:	4a34      	ldr	r2, [pc, #208]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80016ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0320 	and.w	r3, r3, #32
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d03c      	beq.n	800177a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01c      	beq.n	8001742 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800170a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800170e:	4a2c      	ldr	r2, [pc, #176]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff fa24 	bl	8000b64 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001720:	f7ff fa20 	bl	8000b64 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e0fa      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001732:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001734:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ef      	beq.n	8001720 <HAL_RCC_OscConfig+0x418>
 8001740:	e01b      	b.n	800177a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001742:	4b1f      	ldr	r3, [pc, #124]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001744:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001748:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	f023 0301 	bic.w	r3, r3, #1
 800174e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001752:	f7ff fa07 	bl	8000b64 <HAL_GetTick>
 8001756:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001758:	e008      	b.n	800176c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800175a:	f7ff fa03 	bl	8000b64 <HAL_GetTick>
 800175e:	4602      	mov	r2, r0
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	2b02      	cmp	r3, #2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0dd      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800176e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1ef      	bne.n	800175a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80d1 	beq.w	8001926 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 030c 	and.w	r3, r3, #12
 800178c:	2b0c      	cmp	r3, #12
 800178e:	f000 808b 	beq.w	80018a8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d15e      	bne.n	8001858 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_RCC_OscConfig+0x4b8>)
 80017a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7ff f9dd 	bl	8000b64 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ac:	e00c      	b.n	80017c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff f9d9 	bl	8000b64 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d905      	bls.n	80017c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e0b3      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ec      	bne.n	80017ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017d4:	4b56      	ldr	r3, [pc, #344]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	4b56      	ldr	r3, [pc, #344]	; (8001934 <HAL_RCC_OscConfig+0x62c>)
 80017da:	4013      	ands	r3, r2
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6a11      	ldr	r1, [r2, #32]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017e4:	3a01      	subs	r2, #1
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	4311      	orrs	r1, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017ee:	0212      	lsls	r2, r2, #8
 80017f0:	4311      	orrs	r1, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017f6:	0852      	lsrs	r2, r2, #1
 80017f8:	3a01      	subs	r2, #1
 80017fa:	0552      	lsls	r2, r2, #21
 80017fc:	4311      	orrs	r1, r2
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001802:	0852      	lsrs	r2, r2, #1
 8001804:	3a01      	subs	r2, #1
 8001806:	0652      	lsls	r2, r2, #25
 8001808:	4311      	orrs	r1, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800180e:	06d2      	lsls	r2, r2, #27
 8001810:	430a      	orrs	r2, r1
 8001812:	4947      	ldr	r1, [pc, #284]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 8001814:	4313      	orrs	r3, r2
 8001816:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001818:	4b45      	ldr	r3, [pc, #276]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a44      	ldr	r2, [pc, #272]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800181e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001822:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001824:	4b42      	ldr	r3, [pc, #264]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4a41      	ldr	r2, [pc, #260]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800182a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800182e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff f998 	bl	8000b64 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff f994 	bl	8000b64 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e06e      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800184a:	4b39      	ldr	r3, [pc, #228]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x530>
 8001856:	e066      	b.n	8001926 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001858:	4b35      	ldr	r3, [pc, #212]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a34      	ldr	r2, [pc, #208]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800185e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001862:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001864:	4b32      	ldr	r3, [pc, #200]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	4a31      	ldr	r2, [pc, #196]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800186a:	f023 0303 	bic.w	r3, r3, #3
 800186e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4a2e      	ldr	r2, [pc, #184]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 8001876:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800187a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff f970 	bl	8000b64 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff f96c 	bl	8000b64 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e046      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800189a:	4b25      	ldr	r3, [pc, #148]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x580>
 80018a6:	e03e      	b.n	8001926 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69db      	ldr	r3, [r3, #28]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e039      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80018b4:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <HAL_RCC_OscConfig+0x628>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f003 0203 	and.w	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a1b      	ldr	r3, [r3, #32]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d12c      	bne.n	8001922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	3b01      	subs	r3, #1
 80018d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d123      	bne.n	8001922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d11b      	bne.n	8001922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d113      	bne.n	8001922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	085b      	lsrs	r3, r3, #1
 8001906:	3b01      	subs	r3, #1
 8001908:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d109      	bne.n	8001922 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001918:	085b      	lsrs	r3, r3, #1
 800191a:	3b01      	subs	r3, #1
 800191c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d001      	beq.n	8001926 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3720      	adds	r7, #32
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	40021000 	.word	0x40021000
 8001934:	019f800c 	.word	0x019f800c

08001938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e11e      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001950:	4b91      	ldr	r3, [pc, #580]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d910      	bls.n	8001980 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195e:	4b8e      	ldr	r3, [pc, #568]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 020f 	bic.w	r2, r3, #15
 8001966:	498c      	ldr	r1, [pc, #560]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4313      	orrs	r3, r2
 800196c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b8a      	ldr	r3, [pc, #552]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e106      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	2b00      	cmp	r3, #0
 800198a:	d073      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b03      	cmp	r3, #3
 8001992:	d129      	bne.n	80019e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001994:	4b81      	ldr	r3, [pc, #516]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0f4      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80019a4:	f000 f9d0 	bl	8001d48 <RCC_GetSysClockFreqFromPLLSource>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4a7c      	ldr	r2, [pc, #496]	; (8001ba0 <HAL_RCC_ClockConfig+0x268>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d93f      	bls.n	8001a32 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019b2:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d033      	beq.n	8001a32 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d12f      	bne.n	8001a32 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019d2:	4b72      	ldr	r3, [pc, #456]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019da:	4a70      	ldr	r2, [pc, #448]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 80019dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e024      	b.n	8001a32 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f0:	4b6a      	ldr	r3, [pc, #424]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e0c6      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a00:	4b66      	ldr	r3, [pc, #408]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0be      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a10:	f000 f8ce 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4a61      	ldr	r2, [pc, #388]	; (8001ba0 <HAL_RCC_ClockConfig+0x268>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d909      	bls.n	8001a32 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a1e:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a26:	4a5d      	ldr	r2, [pc, #372]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a32:	4b5a      	ldr	r3, [pc, #360]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 0203 	bic.w	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	4957      	ldr	r1, [pc, #348]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a44:	f7ff f88e 	bl	8000b64 <HAL_GetTick>
 8001a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4a:	e00a      	b.n	8001a62 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4c:	f7ff f88a 	bl	8000b64 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e095      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a62:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 020c 	and.w	r2, r3, #12
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d1eb      	bne.n	8001a4c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0302 	and.w	r3, r3, #2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d023      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0304 	and.w	r3, r3, #4
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a8c:	4b43      	ldr	r3, [pc, #268]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4a42      	ldr	r2, [pc, #264]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001a92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a96:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0308 	and.w	r3, r3, #8
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d007      	beq.n	8001ab4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001aa4:	4b3d      	ldr	r3, [pc, #244]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001aac:	4a3b      	ldr	r2, [pc, #236]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001aae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ab2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab4:	4b39      	ldr	r3, [pc, #228]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4936      	ldr	r1, [pc, #216]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	2b80      	cmp	r3, #128	; 0x80
 8001acc:	d105      	bne.n	8001ada <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001ace:	4b33      	ldr	r3, [pc, #204]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	4a32      	ldr	r2, [pc, #200]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001ad4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ad8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d21d      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 020f 	bic.w	r2, r3, #15
 8001af0:	4929      	ldr	r1, [pc, #164]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001af8:	f7ff f834 	bl	8000b64 <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7ff f830 	bl	8000b64 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e03b      	b.n	8001b8e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_RCC_ClockConfig+0x260>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d1ed      	bne.n	8001b00 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4b1a      	ldr	r3, [pc, #104]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4917      	ldr	r1, [pc, #92]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b4e:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	490f      	ldr	r1, [pc, #60]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b62:	f000 f825 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <HAL_RCC_ClockConfig+0x264>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <HAL_RCC_ClockConfig+0x26c>)
 8001b74:	5ccb      	ldrb	r3, [r1, r3]
 8001b76:	f003 031f 	and.w	r3, r3, #31
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_RCC_ClockConfig+0x270>)
 8001b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	; (8001bac <HAL_RCC_ClockConfig+0x274>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fef0 	bl	800096c <HAL_InitTick>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	04c4b400 	.word	0x04c4b400
 8001ba4:	080063e4 	.word	0x080063e4
 8001ba8:	20000000 	.word	0x20000000
 8001bac:	20000004 	.word	0x20000004

08001bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b087      	sub	sp, #28
 8001bb4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d102      	bne.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bc4:	613b      	str	r3, [r7, #16]
 8001bc6:	e047      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 030c 	and.w	r3, r3, #12
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d102      	bne.n	8001bda <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bd4:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	e03e      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b0c      	cmp	r3, #12
 8001be4:	d136      	bne.n	8001c54 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bf0:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	091b      	lsrs	r3, r3, #4
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d10c      	bne.n	8001c1e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c04:	4a1a      	ldr	r2, [pc, #104]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c0e:	68d2      	ldr	r2, [r2, #12]
 8001c10:	0a12      	lsrs	r2, r2, #8
 8001c12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	617b      	str	r3, [r7, #20]
      break;
 8001c1c:	e00c      	b.n	8001c38 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c1e:	4a13      	ldr	r2, [pc, #76]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4a10      	ldr	r2, [pc, #64]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c28:	68d2      	ldr	r2, [r2, #12]
 8001c2a:	0a12      	lsrs	r2, r2, #8
 8001c2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c30:	fb02 f303 	mul.w	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
      break;
 8001c36:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	0e5b      	lsrs	r3, r3, #25
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	3301      	adds	r3, #1
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	e001      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c58:	693b      	ldr	r3, [r7, #16]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	00f42400 	.word	0x00f42400
 8001c70:	016e3600 	.word	0x016e3600

08001c74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c78:	4b03      	ldr	r3, [pc, #12]	; (8001c88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000000 	.word	0x20000000

08001c8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c90:	f7ff fff0 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001c94:	4602      	mov	r2, r0
 8001c96:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	4904      	ldr	r1, [pc, #16]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ca2:	5ccb      	ldrb	r3, [r1, r3]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	080063f4 	.word	0x080063f4

08001cb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cbc:	f7ff ffda 	bl	8001c74 <HAL_RCC_GetHCLKFreq>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	0adb      	lsrs	r3, r3, #11
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	4904      	ldr	r1, [pc, #16]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cce:	5ccb      	ldrb	r3, [r1, r3]
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	080063f4 	.word	0x080063f4

08001ce4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001cf4:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <HAL_RCC_GetClockConfig+0x60>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 020f 	and.w	r2, r3, #15
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	601a      	str	r2, [r3, #0]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40022000 	.word	0x40022000

08001d48 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d4e:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	091b      	lsrs	r3, r3, #4
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	3301      	adds	r3, #1
 8001d64:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d10c      	bne.n	8001d86 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d6c:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d74:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d76:	68d2      	ldr	r2, [r2, #12]
 8001d78:	0a12      	lsrs	r2, r2, #8
 8001d7a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	617b      	str	r3, [r7, #20]
    break;
 8001d84:	e00c      	b.n	8001da0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d90:	68d2      	ldr	r2, [r2, #12]
 8001d92:	0a12      	lsrs	r2, r2, #8
 8001d94:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d98:	fb02 f303 	mul.w	r3, r2, r3
 8001d9c:	617b      	str	r3, [r7, #20]
    break;
 8001d9e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	0e5b      	lsrs	r3, r3, #25
 8001da6:	f003 0303 	and.w	r3, r3, #3
 8001daa:	3301      	adds	r3, #1
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001dba:	687b      	ldr	r3, [r7, #4]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	016e3600 	.word	0x016e3600
 8001dd0:	00f42400 	.word	0x00f42400

08001dd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ddc:	2300      	movs	r3, #0
 8001dde:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001de0:	2300      	movs	r3, #0
 8001de2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 8098 	beq.w	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001df2:	2300      	movs	r3, #0
 8001df4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df6:	4b43      	ldr	r3, [pc, #268]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10d      	bne.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	4b40      	ldr	r3, [pc, #256]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e06:	4a3f      	ldr	r2, [pc, #252]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a39      	ldr	r2, [pc, #228]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e2a:	f7fe fe9b 	bl	8000b64 <HAL_GetTick>
 8001e2e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e30:	e009      	b.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e32:	f7fe fe97 	bl	8000b64 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d902      	bls.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	74fb      	strb	r3, [r7, #19]
        break;
 8001e44:	e005      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e46:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0ef      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e52:	7cfb      	ldrb	r3, [r7, #19]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d159      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e58:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d01e      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d019      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e7e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e80:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e86:	4a1f      	ldr	r2, [pc, #124]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e90:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e96:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ea0:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d016      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fe57 	bl	8000b64 <HAL_GetTick>
 8001eb6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb8:	e00b      	b.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eba:	f7fe fe53 	bl	8000b64 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d902      	bls.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	74fb      	strb	r3, [r7, #19]
            break;
 8001ed0:	e006      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ec      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001ee0:	7cfb      	ldrb	r3, [r7, #19]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10b      	bne.n	8001efe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	4903      	ldr	r1, [pc, #12]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001efc:	e008      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001efe:	7cfb      	ldrb	r3, [r7, #19]
 8001f00:	74bb      	strb	r3, [r7, #18]
 8001f02:	e005      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f10:	7c7b      	ldrb	r3, [r7, #17]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d105      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f16:	4ba6      	ldr	r3, [pc, #664]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	4aa5      	ldr	r2, [pc, #660]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f20:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f2e:	4ba0      	ldr	r3, [pc, #640]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f34:	f023 0203 	bic.w	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	499c      	ldr	r1, [pc, #624]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f50:	4b97      	ldr	r3, [pc, #604]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	f023 020c 	bic.w	r2, r3, #12
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	4994      	ldr	r1, [pc, #592]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f72:	4b8f      	ldr	r3, [pc, #572]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f78:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	498b      	ldr	r1, [pc, #556]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f94:	4b86      	ldr	r3, [pc, #536]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	4983      	ldr	r1, [pc, #524]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fb6:	4b7e      	ldr	r3, [pc, #504]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	497a      	ldr	r1, [pc, #488]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fd8:	4b75      	ldr	r3, [pc, #468]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	4972      	ldr	r1, [pc, #456]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ffa:	4b6d      	ldr	r3, [pc, #436]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002000:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	4969      	ldr	r1, [pc, #420]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800201c:	4b64      	ldr	r3, [pc, #400]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	4961      	ldr	r1, [pc, #388]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800203e:	4b5c      	ldr	r3, [pc, #368]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002044:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	4958      	ldr	r1, [pc, #352]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800205c:	2b00      	cmp	r3, #0
 800205e:	d015      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002060:	4b53      	ldr	r3, [pc, #332]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	4950      	ldr	r1, [pc, #320]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800207e:	d105      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002080:	4b4b      	ldr	r3, [pc, #300]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a4a      	ldr	r2, [pc, #296]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800208a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002094:	2b00      	cmp	r3, #0
 8002096:	d015      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002098:	4b45      	ldr	r3, [pc, #276]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	4942      	ldr	r1, [pc, #264]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020b6:	d105      	bne.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020b8:	4b3d      	ldr	r3, [pc, #244]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a3c      	ldr	r2, [pc, #240]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d015      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80020d0:	4b37      	ldr	r3, [pc, #220]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020de:	4934      	ldr	r1, [pc, #208]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020ee:	d105      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020f0:	4b2f      	ldr	r3, [pc, #188]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	4a2e      	ldr	r2, [pc, #184]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d015      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002108:	4b29      	ldr	r3, [pc, #164]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002116:	4926      	ldr	r1, [pc, #152]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002126:	d105      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800212e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002132:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002146:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214e:	4918      	ldr	r1, [pc, #96]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002150:	4313      	orrs	r3, r2
 8002152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800215a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800215e:	d105      	bne.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800216a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d015      	beq.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	490a      	ldr	r1, [pc, #40]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002196:	d105      	bne.n	80021a4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800219e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80021a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000

080021b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e049      	b.n	800225a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f841 	bl	8002262 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2202      	movs	r2, #2
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3304      	adds	r3, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	4610      	mov	r0, r2
 80021f4:	f000 fa52 	bl	800269c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b01      	cmp	r3, #1
 800228a:	d001      	beq.n	8002290 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e04a      	b.n	8002326 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2202      	movs	r2, #2
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0201 	orr.w	r2, r2, #1
 80022a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a21      	ldr	r2, [pc, #132]	; (8002334 <HAL_TIM_Base_Start_IT+0xbc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d018      	beq.n	80022e4 <HAL_TIM_Base_Start_IT+0x6c>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ba:	d013      	beq.n	80022e4 <HAL_TIM_Base_Start_IT+0x6c>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a1d      	ldr	r2, [pc, #116]	; (8002338 <HAL_TIM_Base_Start_IT+0xc0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d00e      	beq.n	80022e4 <HAL_TIM_Base_Start_IT+0x6c>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_TIM_Base_Start_IT+0xc4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d009      	beq.n	80022e4 <HAL_TIM_Base_Start_IT+0x6c>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a1a      	ldr	r2, [pc, #104]	; (8002340 <HAL_TIM_Base_Start_IT+0xc8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d004      	beq.n	80022e4 <HAL_TIM_Base_Start_IT+0x6c>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a19      	ldr	r2, [pc, #100]	; (8002344 <HAL_TIM_Base_Start_IT+0xcc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d115      	bne.n	8002310 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689a      	ldr	r2, [r3, #8]
 80022ea:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_TIM_Base_Start_IT+0xd0>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b06      	cmp	r3, #6
 80022f4:	d015      	beq.n	8002322 <HAL_TIM_Base_Start_IT+0xaa>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d011      	beq.n	8002322 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f042 0201 	orr.w	r2, r2, #1
 800230c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800230e:	e008      	b.n	8002322 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f042 0201 	orr.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	e000      	b.n	8002324 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002322:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40012c00 	.word	0x40012c00
 8002338:	40000400 	.word	0x40000400
 800233c:	40000800 	.word	0x40000800
 8002340:	40013400 	.word	0x40013400
 8002344:	40014000 	.word	0x40014000
 8002348:	00010007 	.word	0x00010007

0800234c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b02      	cmp	r3, #2
 8002360:	d122      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b02      	cmp	r3, #2
 800236e:	d11b      	bne.n	80023a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0202 	mvn.w	r2, #2
 8002378:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f965 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f957 	bl	800264a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f968 	bl	8002672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	f003 0304 	and.w	r3, r3, #4
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d122      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d11b      	bne.n	80023fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f06f 0204 	mvn.w	r2, #4
 80023cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f93b 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 80023e8:	e005      	b.n	80023f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 f92d 	bl	800264a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f93e 	bl	8002672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b08      	cmp	r3, #8
 8002408:	d122      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b08      	cmp	r3, #8
 8002416:	d11b      	bne.n	8002450 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0208 	mvn.w	r2, #8
 8002420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2204      	movs	r2, #4
 8002426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f911 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 f903 	bl	800264a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f914 	bl	8002672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b10      	cmp	r3, #16
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0310 	and.w	r3, r3, #16
 8002468:	2b10      	cmp	r3, #16
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0210 	mvn.w	r2, #16
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2208      	movs	r2, #8
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f8e7 	bl	800265e <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f8d9 	bl	800264a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f8ea 	bl	8002672 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d10e      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d107      	bne.n	80024d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0201 	mvn.w	r2, #1
 80024c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7fe f9a6 	bl	800081c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024da:	2b80      	cmp	r3, #128	; 0x80
 80024dc:	d10e      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d107      	bne.n	80024fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f96a 	bl	80027d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800250a:	d10e      	bne.n	800252a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002516:	2b80      	cmp	r3, #128	; 0x80
 8002518:	d107      	bne.n	800252a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f95d 	bl	80027e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d10e      	bne.n	8002556 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002542:	2b40      	cmp	r3, #64	; 0x40
 8002544:	d107      	bne.n	8002556 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800254e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f898 	bl	8002686 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	f003 0320 	and.w	r3, r3, #32
 8002560:	2b20      	cmp	r3, #32
 8002562:	d10e      	bne.n	8002582 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 0320 	and.w	r3, r3, #32
 800256e:	2b20      	cmp	r3, #32
 8002570:	d107      	bne.n	8002582 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f06f 0220 	mvn.w	r2, #32
 800257a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f91d 	bl	80027bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002590:	d10f      	bne.n	80025b2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025a0:	d107      	bne.n	80025b2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80025aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f923 	bl	80027f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025c0:	d10f      	bne.n	80025e2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025d0:	d107      	bne.n	80025e2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80025da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f915 	bl	800280c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025f0:	d10f      	bne.n	8002612 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002600:	d107      	bne.n	8002612 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800260a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f907 	bl	8002820 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691b      	ldr	r3, [r3, #16]
 8002618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800261c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002620:	d10f      	bne.n	8002642 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800262c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002630:	d107      	bne.n	8002642 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800263a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f8f9 	bl	8002834 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002666:	bf00      	nop
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800267a:	bf00      	nop
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002686:	b480      	push	{r7}
 8002688:	b083      	sub	sp, #12
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	4a3c      	ldr	r2, [pc, #240]	; (80027a0 <TIM_Base_SetConfig+0x104>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00f      	beq.n	80026d4 <TIM_Base_SetConfig+0x38>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ba:	d00b      	beq.n	80026d4 <TIM_Base_SetConfig+0x38>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a39      	ldr	r2, [pc, #228]	; (80027a4 <TIM_Base_SetConfig+0x108>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d007      	beq.n	80026d4 <TIM_Base_SetConfig+0x38>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a38      	ldr	r2, [pc, #224]	; (80027a8 <TIM_Base_SetConfig+0x10c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d003      	beq.n	80026d4 <TIM_Base_SetConfig+0x38>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a37      	ldr	r2, [pc, #220]	; (80027ac <TIM_Base_SetConfig+0x110>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d108      	bne.n	80026e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a2d      	ldr	r2, [pc, #180]	; (80027a0 <TIM_Base_SetConfig+0x104>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01b      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f4:	d017      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a2a      	ldr	r2, [pc, #168]	; (80027a4 <TIM_Base_SetConfig+0x108>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a29      	ldr	r2, [pc, #164]	; (80027a8 <TIM_Base_SetConfig+0x10c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00f      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a28      	ldr	r2, [pc, #160]	; (80027ac <TIM_Base_SetConfig+0x110>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00b      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a27      	ldr	r2, [pc, #156]	; (80027b0 <TIM_Base_SetConfig+0x114>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a26      	ldr	r2, [pc, #152]	; (80027b4 <TIM_Base_SetConfig+0x118>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d003      	beq.n	8002726 <TIM_Base_SetConfig+0x8a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a25      	ldr	r2, [pc, #148]	; (80027b8 <TIM_Base_SetConfig+0x11c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d108      	bne.n	8002738 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4313      	orrs	r3, r2
 8002736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	4313      	orrs	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	689a      	ldr	r2, [r3, #8]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <TIM_Base_SetConfig+0x104>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00f      	beq.n	8002784 <TIM_Base_SetConfig+0xe8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a11      	ldr	r2, [pc, #68]	; (80027ac <TIM_Base_SetConfig+0x110>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00b      	beq.n	8002784 <TIM_Base_SetConfig+0xe8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a10      	ldr	r2, [pc, #64]	; (80027b0 <TIM_Base_SetConfig+0x114>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d007      	beq.n	8002784 <TIM_Base_SetConfig+0xe8>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a0f      	ldr	r2, [pc, #60]	; (80027b4 <TIM_Base_SetConfig+0x118>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d003      	beq.n	8002784 <TIM_Base_SetConfig+0xe8>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <TIM_Base_SetConfig+0x11c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d103      	bne.n	800278c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	615a      	str	r2, [r3, #20]
}
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40012c00 	.word	0x40012c00
 80027a4:	40000400 	.word	0x40000400
 80027a8:	40000800 	.word	0x40000800
 80027ac:	40013400 	.word	0x40013400
 80027b0:	40014000 	.word	0x40014000
 80027b4:	40014400 	.word	0x40014400
 80027b8:	40014800 	.word	0x40014800

080027bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e042      	b.n	80028e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002860:	2b00      	cmp	r3, #0
 8002862:	d106      	bne.n	8002872 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7fe f81d 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2224      	movs	r2, #36	; 0x24
 8002876:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 fc0c 	bl	80030a8 <UART_SetConfig>
 8002890:	4603      	mov	r3, r0
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e022      	b.n	80028e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d002      	beq.n	80028a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 fecc 	bl	8003640 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 ff53 	bl	8003784 <UART_CheckIdleState>
 80028de:	4603      	mov	r3, r0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b091      	sub	sp, #68	; 0x44
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	4613      	mov	r3, r2
 80028f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028fc:	2b20      	cmp	r3, #32
 80028fe:	f040 808c 	bne.w	8002a1a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_UART_Transmit_IT+0x26>
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e084      	b.n	8002a1c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_UART_Transmit_IT+0x38>
 800291c:	2302      	movs	r3, #2
 800291e:	e07d      	b.n	8002a1c <HAL_UART_Transmit_IT+0x134>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2221      	movs	r2, #33	; 0x21
 8002950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800295c:	d12e      	bne.n	80029bc <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002966:	d107      	bne.n	8002978 <HAL_UART_Transmit_IT+0x90>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	4a2d      	ldr	r2, [pc, #180]	; (8002a28 <HAL_UART_Transmit_IT+0x140>)
 8002974:	675a      	str	r2, [r3, #116]	; 0x74
 8002976:	e002      	b.n	800297e <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4a2c      	ldr	r2, [pc, #176]	; (8002a2c <HAL_UART_Transmit_IT+0x144>)
 800297c:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3308      	adds	r3, #8
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800298e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002990:	e853 3f00 	ldrex	r3, [r3]
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800299c:	63bb      	str	r3, [r7, #56]	; 0x38
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3308      	adds	r3, #8
 80029a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029a6:	637a      	str	r2, [r7, #52]	; 0x34
 80029a8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ae:	e841 2300 	strex	r3, r2, [r1]
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1e5      	bne.n	8002986 <HAL_UART_Transmit_IT+0x9e>
 80029ba:	e02c      	b.n	8002a16 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c4:	d107      	bne.n	80029d6 <HAL_UART_Transmit_IT+0xee>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d103      	bne.n	80029d6 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_UART_Transmit_IT+0x148>)
 80029d2:	675a      	str	r2, [r3, #116]	; 0x74
 80029d4:	e002      	b.n	80029dc <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <HAL_UART_Transmit_IT+0x14c>)
 80029da:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	e853 3f00 	ldrex	r3, [r3]
 80029f0:	613b      	str	r3, [r7, #16]
   return(result);
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a02:	623b      	str	r3, [r7, #32]
 8002a04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a06:	69f9      	ldr	r1, [r7, #28]
 8002a08:	6a3a      	ldr	r2, [r7, #32]
 8002a0a:	e841 2300 	strex	r3, r2, [r1]
 8002a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1e6      	bne.n	80029e4 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	e000      	b.n	8002a1c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3744      	adds	r7, #68	; 0x44
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	08003cfd 	.word	0x08003cfd
 8002a2c:	08003c1d 	.word	0x08003c1d
 8002a30:	08003b5b 	.word	0x08003b5b
 8002a34:	08003aa3 	.word	0x08003aa3

08002a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b0ba      	sub	sp, #232	; 0xe8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a62:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a66:	4013      	ands	r3, r2
 8002a68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d11b      	bne.n	8002aac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d015      	beq.n	8002aac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d105      	bne.n	8002a98 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d009      	beq.n	8002aac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	f000 82d6 	beq.w	800304e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
      }
      return;
 8002aaa:	e2d0      	b.n	800304e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 811f 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ab6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002aba:	4b8b      	ldr	r3, [pc, #556]	; (8002ce8 <HAL_UART_IRQHandler+0x2b0>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ac2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ac6:	4b89      	ldr	r3, [pc, #548]	; (8002cec <HAL_UART_IRQHandler+0x2b4>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8112 	beq.w	8002cf4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d011      	beq.n	8002b00 <HAL_UART_IRQHandler+0xc8>
 8002adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00b      	beq.n	8002b00 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2201      	movs	r2, #1
 8002aee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d011      	beq.n	8002b30 <HAL_UART_IRQHandler+0xf8>
 8002b0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00b      	beq.n	8002b30 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b26:	f043 0204 	orr.w	r2, r3, #4
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d011      	beq.n	8002b60 <HAL_UART_IRQHandler+0x128>
 8002b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00b      	beq.n	8002b60 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b56:	f043 0202 	orr.w	r2, r3, #2
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d017      	beq.n	8002b9c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b70:	f003 0320 	and.w	r3, r3, #32
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d105      	bne.n	8002b84 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b78:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002b7c:	4b5a      	ldr	r3, [pc, #360]	; (8002ce8 <HAL_UART_IRQHandler+0x2b0>)
 8002b7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00b      	beq.n	8002b9c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2208      	movs	r2, #8
 8002b8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b92:	f043 0208 	orr.w	r2, r3, #8
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d012      	beq.n	8002bce <HAL_UART_IRQHandler+0x196>
 8002ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00c      	beq.n	8002bce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002bbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f000 823c 	beq.w	8003052 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d013      	beq.n	8002c0e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d105      	bne.n	8002bfe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d007      	beq.n	8002c0e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c22:	2b40      	cmp	r3, #64	; 0x40
 8002c24:	d005      	beq.n	8002c32 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d04f      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 feb9 	bl	80039aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b40      	cmp	r3, #64	; 0x40
 8002c44:	d141      	bne.n	8002cca <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3308      	adds	r3, #8
 8002c4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c54:	e853 3f00 	ldrex	r3, [r3]
 8002c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3308      	adds	r3, #8
 8002c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c72:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c82:	e841 2300 	strex	r3, r2, [r1]
 8002c86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1d9      	bne.n	8002c46 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d013      	beq.n	8002cc2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c9e:	4a14      	ldr	r2, [pc, #80]	; (8002cf0 <HAL_UART_IRQHandler+0x2b8>)
 8002ca0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fe f8a1 	bl	8000dee <HAL_DMA_Abort_IT>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d017      	beq.n	8002ce2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc0:	e00f      	b.n	8002ce2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f9da 	bl	800307c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cc8:	e00b      	b.n	8002ce2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f9d6 	bl	800307c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd0:	e007      	b.n	8002ce2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f9d2 	bl	800307c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8002ce0:	e1b7      	b.n	8003052 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce2:	bf00      	nop
    return;
 8002ce4:	e1b5      	b.n	8003052 <HAL_UART_IRQHandler+0x61a>
 8002ce6:	bf00      	nop
 8002ce8:	10000001 	.word	0x10000001
 8002cec:	04000120 	.word	0x04000120
 8002cf0:	08003a77 	.word	0x08003a77

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	f040 814a 	bne.w	8002f92 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 8143 	beq.w	8002f92 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 813c 	beq.w	8002f92 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2210      	movs	r2, #16
 8002d20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	f040 80b5 	bne.w	8002e9c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8187 	beq.w	8003056 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d52:	429a      	cmp	r2, r3
 8002d54:	f080 817f 	bcs.w	8003056 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0320 	and.w	r3, r3, #32
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f040 8086 	bne.w	8002e80 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d80:	e853 3f00 	ldrex	r3, [r3]
 8002d84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002da2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002daa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dae:	e841 2300 	strex	r3, r2, [r1]
 8002db2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1da      	bne.n	8002d74 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3308      	adds	r3, #8
 8002dc4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dc8:	e853 3f00 	ldrex	r3, [r3]
 8002dcc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002dce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dd0:	f023 0301 	bic.w	r3, r3, #1
 8002dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3308      	adds	r3, #8
 8002dde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002de2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002de6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002dea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002dee:	e841 2300 	strex	r3, r2, [r1]
 8002df2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002df4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1e1      	bne.n	8002dbe <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	3308      	adds	r3, #8
 8002e00:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e04:	e853 3f00 	ldrex	r3, [r3]
 8002e08:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3308      	adds	r3, #8
 8002e1a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e3      	bne.n	8002dfa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2220      	movs	r2, #32
 8002e36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e50:	f023 0310 	bic.w	r3, r3, #16
 8002e54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e62:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e4      	bne.n	8002e40 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd ff5e 	bl	8000d3c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f8fb 	bl	8003090 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e9a:	e0dc      	b.n	8003056 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80ce 	beq.w	800305a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8002ebe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80c9 	beq.w	800305a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002edc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002eea:	647b      	str	r3, [r7, #68]	; 0x44
 8002eec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ef2:	e841 2300 	strex	r3, r2, [r1]
 8002ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1e4      	bne.n	8002ec8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3308      	adds	r3, #8
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	e853 3f00 	ldrex	r3, [r3]
 8002f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f14:	f023 0301 	bic.w	r3, r3, #1
 8002f18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3308      	adds	r3, #8
 8002f22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f26:	633a      	str	r2, [r7, #48]	; 0x30
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f2e:	e841 2300 	strex	r3, r2, [r1]
 8002f32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e1      	bne.n	8002efe <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	e853 3f00 	ldrex	r3, [r3]
 8002f5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0310 	bic.w	r3, r3, #16
 8002f62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f74:	69b9      	ldr	r1, [r7, #24]
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	e841 2300 	strex	r3, r2, [r1]
 8002f7c:	617b      	str	r3, [r7, #20]
   return(result);
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1e4      	bne.n	8002f4e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f88:	4619      	mov	r1, r3
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f880 	bl	8003090 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f90:	e063      	b.n	800305a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00e      	beq.n	8002fbc <HAL_UART_IRQHandler+0x584>
 8002f9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fb2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 ff41 	bl	8003e3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fba:	e051      	b.n	8003060 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d014      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d105      	bne.n	8002fe0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d03a      	beq.n	800305e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
    }
    return;
 8002ff0:	e035      	b.n	800305e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d009      	beq.n	8003012 <HAL_UART_IRQHandler+0x5da>
 8002ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 feeb 	bl	8003de6 <UART_EndTransmit_IT>
    return;
 8003010:	e026      	b.n	8003060 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003016:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d009      	beq.n	8003032 <HAL_UART_IRQHandler+0x5fa>
 800301e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003022:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 ff1a 	bl	8003e64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003030:	e016      	b.n	8003060 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003036:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <HAL_UART_IRQHandler+0x628>
 800303e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003042:	2b00      	cmp	r3, #0
 8003044:	da0c      	bge.n	8003060 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 ff02 	bl	8003e50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800304c:	e008      	b.n	8003060 <HAL_UART_IRQHandler+0x628>
      return;
 800304e:	bf00      	nop
 8003050:	e006      	b.n	8003060 <HAL_UART_IRQHandler+0x628>
    return;
 8003052:	bf00      	nop
 8003054:	e004      	b.n	8003060 <HAL_UART_IRQHandler+0x628>
      return;
 8003056:	bf00      	nop
 8003058:	e002      	b.n	8003060 <HAL_UART_IRQHandler+0x628>
      return;
 800305a:	bf00      	nop
 800305c:	e000      	b.n	8003060 <HAL_UART_IRQHandler+0x628>
    return;
 800305e:	bf00      	nop
  }
}
 8003060:	37e8      	adds	r7, #232	; 0xe8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop

08003068 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	460b      	mov	r3, r1
 800309a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ac:	b08c      	sub	sp, #48	; 0x30
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4bab      	ldr	r3, [pc, #684]	; (8003384 <UART_SetConfig+0x2dc>)
 80030d8:	4013      	ands	r3, r2
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	6812      	ldr	r2, [r2, #0]
 80030de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030e0:	430b      	orrs	r3, r1
 80030e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4aa0      	ldr	r2, [pc, #640]	; (8003388 <UART_SetConfig+0x2e0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d004      	beq.n	8003114 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003110:	4313      	orrs	r3, r2
 8003112:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800311e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003128:	430b      	orrs	r3, r1
 800312a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003132:	f023 010f 	bic.w	r1, r3, #15
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a91      	ldr	r2, [pc, #580]	; (800338c <UART_SetConfig+0x2e4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d125      	bne.n	8003198 <UART_SetConfig+0xf0>
 800314c:	4b90      	ldr	r3, [pc, #576]	; (8003390 <UART_SetConfig+0x2e8>)
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	2b03      	cmp	r3, #3
 8003158:	d81a      	bhi.n	8003190 <UART_SetConfig+0xe8>
 800315a:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <UART_SetConfig+0xb8>)
 800315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003160:	08003171 	.word	0x08003171
 8003164:	08003181 	.word	0x08003181
 8003168:	08003179 	.word	0x08003179
 800316c:	08003189 	.word	0x08003189
 8003170:	2301      	movs	r3, #1
 8003172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003176:	e0d6      	b.n	8003326 <UART_SetConfig+0x27e>
 8003178:	2302      	movs	r3, #2
 800317a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800317e:	e0d2      	b.n	8003326 <UART_SetConfig+0x27e>
 8003180:	2304      	movs	r3, #4
 8003182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003186:	e0ce      	b.n	8003326 <UART_SetConfig+0x27e>
 8003188:	2308      	movs	r3, #8
 800318a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800318e:	e0ca      	b.n	8003326 <UART_SetConfig+0x27e>
 8003190:	2310      	movs	r3, #16
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003196:	e0c6      	b.n	8003326 <UART_SetConfig+0x27e>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a7d      	ldr	r2, [pc, #500]	; (8003394 <UART_SetConfig+0x2ec>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d138      	bne.n	8003214 <UART_SetConfig+0x16c>
 80031a2:	4b7b      	ldr	r3, [pc, #492]	; (8003390 <UART_SetConfig+0x2e8>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a8:	f003 030c 	and.w	r3, r3, #12
 80031ac:	2b0c      	cmp	r3, #12
 80031ae:	d82d      	bhi.n	800320c <UART_SetConfig+0x164>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <UART_SetConfig+0x110>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031ed 	.word	0x080031ed
 80031bc:	0800320d 	.word	0x0800320d
 80031c0:	0800320d 	.word	0x0800320d
 80031c4:	0800320d 	.word	0x0800320d
 80031c8:	080031fd 	.word	0x080031fd
 80031cc:	0800320d 	.word	0x0800320d
 80031d0:	0800320d 	.word	0x0800320d
 80031d4:	0800320d 	.word	0x0800320d
 80031d8:	080031f5 	.word	0x080031f5
 80031dc:	0800320d 	.word	0x0800320d
 80031e0:	0800320d 	.word	0x0800320d
 80031e4:	0800320d 	.word	0x0800320d
 80031e8:	08003205 	.word	0x08003205
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031f2:	e098      	b.n	8003326 <UART_SetConfig+0x27e>
 80031f4:	2302      	movs	r3, #2
 80031f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031fa:	e094      	b.n	8003326 <UART_SetConfig+0x27e>
 80031fc:	2304      	movs	r3, #4
 80031fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003202:	e090      	b.n	8003326 <UART_SetConfig+0x27e>
 8003204:	2308      	movs	r3, #8
 8003206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800320a:	e08c      	b.n	8003326 <UART_SetConfig+0x27e>
 800320c:	2310      	movs	r3, #16
 800320e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003212:	e088      	b.n	8003326 <UART_SetConfig+0x27e>
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a5f      	ldr	r2, [pc, #380]	; (8003398 <UART_SetConfig+0x2f0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d125      	bne.n	800326a <UART_SetConfig+0x1c2>
 800321e:	4b5c      	ldr	r3, [pc, #368]	; (8003390 <UART_SetConfig+0x2e8>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003228:	2b30      	cmp	r3, #48	; 0x30
 800322a:	d016      	beq.n	800325a <UART_SetConfig+0x1b2>
 800322c:	2b30      	cmp	r3, #48	; 0x30
 800322e:	d818      	bhi.n	8003262 <UART_SetConfig+0x1ba>
 8003230:	2b20      	cmp	r3, #32
 8003232:	d00a      	beq.n	800324a <UART_SetConfig+0x1a2>
 8003234:	2b20      	cmp	r3, #32
 8003236:	d814      	bhi.n	8003262 <UART_SetConfig+0x1ba>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <UART_SetConfig+0x19a>
 800323c:	2b10      	cmp	r3, #16
 800323e:	d008      	beq.n	8003252 <UART_SetConfig+0x1aa>
 8003240:	e00f      	b.n	8003262 <UART_SetConfig+0x1ba>
 8003242:	2300      	movs	r3, #0
 8003244:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003248:	e06d      	b.n	8003326 <UART_SetConfig+0x27e>
 800324a:	2302      	movs	r3, #2
 800324c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003250:	e069      	b.n	8003326 <UART_SetConfig+0x27e>
 8003252:	2304      	movs	r3, #4
 8003254:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003258:	e065      	b.n	8003326 <UART_SetConfig+0x27e>
 800325a:	2308      	movs	r3, #8
 800325c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003260:	e061      	b.n	8003326 <UART_SetConfig+0x27e>
 8003262:	2310      	movs	r3, #16
 8003264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003268:	e05d      	b.n	8003326 <UART_SetConfig+0x27e>
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a4b      	ldr	r2, [pc, #300]	; (800339c <UART_SetConfig+0x2f4>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d125      	bne.n	80032c0 <UART_SetConfig+0x218>
 8003274:	4b46      	ldr	r3, [pc, #280]	; (8003390 <UART_SetConfig+0x2e8>)
 8003276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800327e:	2bc0      	cmp	r3, #192	; 0xc0
 8003280:	d016      	beq.n	80032b0 <UART_SetConfig+0x208>
 8003282:	2bc0      	cmp	r3, #192	; 0xc0
 8003284:	d818      	bhi.n	80032b8 <UART_SetConfig+0x210>
 8003286:	2b80      	cmp	r3, #128	; 0x80
 8003288:	d00a      	beq.n	80032a0 <UART_SetConfig+0x1f8>
 800328a:	2b80      	cmp	r3, #128	; 0x80
 800328c:	d814      	bhi.n	80032b8 <UART_SetConfig+0x210>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <UART_SetConfig+0x1f0>
 8003292:	2b40      	cmp	r3, #64	; 0x40
 8003294:	d008      	beq.n	80032a8 <UART_SetConfig+0x200>
 8003296:	e00f      	b.n	80032b8 <UART_SetConfig+0x210>
 8003298:	2300      	movs	r3, #0
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800329e:	e042      	b.n	8003326 <UART_SetConfig+0x27e>
 80032a0:	2302      	movs	r3, #2
 80032a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032a6:	e03e      	b.n	8003326 <UART_SetConfig+0x27e>
 80032a8:	2304      	movs	r3, #4
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032ae:	e03a      	b.n	8003326 <UART_SetConfig+0x27e>
 80032b0:	2308      	movs	r3, #8
 80032b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032b6:	e036      	b.n	8003326 <UART_SetConfig+0x27e>
 80032b8:	2310      	movs	r3, #16
 80032ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032be:	e032      	b.n	8003326 <UART_SetConfig+0x27e>
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a30      	ldr	r2, [pc, #192]	; (8003388 <UART_SetConfig+0x2e0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d12a      	bne.n	8003320 <UART_SetConfig+0x278>
 80032ca:	4b31      	ldr	r3, [pc, #196]	; (8003390 <UART_SetConfig+0x2e8>)
 80032cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032d8:	d01a      	beq.n	8003310 <UART_SetConfig+0x268>
 80032da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032de:	d81b      	bhi.n	8003318 <UART_SetConfig+0x270>
 80032e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032e4:	d00c      	beq.n	8003300 <UART_SetConfig+0x258>
 80032e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032ea:	d815      	bhi.n	8003318 <UART_SetConfig+0x270>
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <UART_SetConfig+0x250>
 80032f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f4:	d008      	beq.n	8003308 <UART_SetConfig+0x260>
 80032f6:	e00f      	b.n	8003318 <UART_SetConfig+0x270>
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80032fe:	e012      	b.n	8003326 <UART_SetConfig+0x27e>
 8003300:	2302      	movs	r3, #2
 8003302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003306:	e00e      	b.n	8003326 <UART_SetConfig+0x27e>
 8003308:	2304      	movs	r3, #4
 800330a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800330e:	e00a      	b.n	8003326 <UART_SetConfig+0x27e>
 8003310:	2308      	movs	r3, #8
 8003312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003316:	e006      	b.n	8003326 <UART_SetConfig+0x27e>
 8003318:	2310      	movs	r3, #16
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800331e:	e002      	b.n	8003326 <UART_SetConfig+0x27e>
 8003320:	2310      	movs	r3, #16
 8003322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a17      	ldr	r2, [pc, #92]	; (8003388 <UART_SetConfig+0x2e0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	f040 80a8 	bne.w	8003482 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003332:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003336:	2b08      	cmp	r3, #8
 8003338:	d834      	bhi.n	80033a4 <UART_SetConfig+0x2fc>
 800333a:	a201      	add	r2, pc, #4	; (adr r2, 8003340 <UART_SetConfig+0x298>)
 800333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003340:	08003365 	.word	0x08003365
 8003344:	080033a5 	.word	0x080033a5
 8003348:	0800336d 	.word	0x0800336d
 800334c:	080033a5 	.word	0x080033a5
 8003350:	08003373 	.word	0x08003373
 8003354:	080033a5 	.word	0x080033a5
 8003358:	080033a5 	.word	0x080033a5
 800335c:	080033a5 	.word	0x080033a5
 8003360:	0800337b 	.word	0x0800337b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003364:	f7fe fc92 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8003368:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800336a:	e021      	b.n	80033b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800336c:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <UART_SetConfig+0x2f8>)
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003370:	e01e      	b.n	80033b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003372:	f7fe fc1d 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 8003376:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003378:	e01a      	b.n	80033b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800337a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003380:	e016      	b.n	80033b0 <UART_SetConfig+0x308>
 8003382:	bf00      	nop
 8003384:	cfff69f3 	.word	0xcfff69f3
 8003388:	40008000 	.word	0x40008000
 800338c:	40013800 	.word	0x40013800
 8003390:	40021000 	.word	0x40021000
 8003394:	40004400 	.word	0x40004400
 8003398:	40004800 	.word	0x40004800
 800339c:	40004c00 	.word	0x40004c00
 80033a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80033ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f000 812a 	beq.w	800360c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	4a9e      	ldr	r2, [pc, #632]	; (8003638 <UART_SetConfig+0x590>)
 80033be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80033c2:	461a      	mov	r2, r3
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	4413      	add	r3, r2
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d305      	bcc.n	80033e8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d903      	bls.n	80033f0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033ee:	e10d      	b.n	800360c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	2200      	movs	r2, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	60fa      	str	r2, [r7, #12]
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	4a8e      	ldr	r2, [pc, #568]	; (8003638 <UART_SetConfig+0x590>)
 80033fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003402:	b29b      	uxth	r3, r3
 8003404:	2200      	movs	r2, #0
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	607a      	str	r2, [r7, #4]
 800340a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800340e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003412:	f7fc ff05 	bl	8000220 <__aeabi_uldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	020b      	lsls	r3, r1, #8
 8003428:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800342c:	0202      	lsls	r2, r0, #8
 800342e:	6979      	ldr	r1, [r7, #20]
 8003430:	6849      	ldr	r1, [r1, #4]
 8003432:	0849      	lsrs	r1, r1, #1
 8003434:	2000      	movs	r0, #0
 8003436:	460c      	mov	r4, r1
 8003438:	4605      	mov	r5, r0
 800343a:	eb12 0804 	adds.w	r8, r2, r4
 800343e:	eb43 0905 	adc.w	r9, r3, r5
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	469a      	mov	sl, r3
 800344a:	4693      	mov	fp, r2
 800344c:	4652      	mov	r2, sl
 800344e:	465b      	mov	r3, fp
 8003450:	4640      	mov	r0, r8
 8003452:	4649      	mov	r1, r9
 8003454:	f7fc fee4 	bl	8000220 <__aeabi_uldivmod>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4613      	mov	r3, r2
 800345e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003466:	d308      	bcc.n	800347a <UART_SetConfig+0x3d2>
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800346e:	d204      	bcs.n	800347a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6a3a      	ldr	r2, [r7, #32]
 8003476:	60da      	str	r2, [r3, #12]
 8003478:	e0c8      	b.n	800360c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003480:	e0c4      	b.n	800360c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800348a:	d167      	bne.n	800355c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800348c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003490:	2b08      	cmp	r3, #8
 8003492:	d828      	bhi.n	80034e6 <UART_SetConfig+0x43e>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <UART_SetConfig+0x3f4>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034c1 	.word	0x080034c1
 80034a0:	080034c9 	.word	0x080034c9
 80034a4:	080034d1 	.word	0x080034d1
 80034a8:	080034e7 	.word	0x080034e7
 80034ac:	080034d7 	.word	0x080034d7
 80034b0:	080034e7 	.word	0x080034e7
 80034b4:	080034e7 	.word	0x080034e7
 80034b8:	080034e7 	.word	0x080034e7
 80034bc:	080034df 	.word	0x080034df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c0:	f7fe fbe4 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 80034c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034c6:	e014      	b.n	80034f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034c8:	f7fe fbf6 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 80034cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034ce:	e010      	b.n	80034f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034d0:	4b5a      	ldr	r3, [pc, #360]	; (800363c <UART_SetConfig+0x594>)
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034d4:	e00d      	b.n	80034f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034d6:	f7fe fb6b 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 80034da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034dc:	e009      	b.n	80034f2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034e4:	e005      	b.n	80034f2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80034f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f000 8089 	beq.w	800360c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	4a4e      	ldr	r2, [pc, #312]	; (8003638 <UART_SetConfig+0x590>)
 8003500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003504:	461a      	mov	r2, r3
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	fbb3 f3f2 	udiv	r3, r3, r2
 800350c:	005a      	lsls	r2, r3, #1
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	441a      	add	r2, r3
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d916      	bls.n	8003554 <UART_SetConfig+0x4ac>
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800352c:	d212      	bcs.n	8003554 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	b29b      	uxth	r3, r3
 8003532:	f023 030f 	bic.w	r3, r3, #15
 8003536:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	085b      	lsrs	r3, r3, #1
 800353c:	b29b      	uxth	r3, r3
 800353e:	f003 0307 	and.w	r3, r3, #7
 8003542:	b29a      	uxth	r2, r3
 8003544:	8bfb      	ldrh	r3, [r7, #30]
 8003546:	4313      	orrs	r3, r2
 8003548:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	8bfa      	ldrh	r2, [r7, #30]
 8003550:	60da      	str	r2, [r3, #12]
 8003552:	e05b      	b.n	800360c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800355a:	e057      	b.n	800360c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800355c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003560:	2b08      	cmp	r3, #8
 8003562:	d828      	bhi.n	80035b6 <UART_SetConfig+0x50e>
 8003564:	a201      	add	r2, pc, #4	; (adr r2, 800356c <UART_SetConfig+0x4c4>)
 8003566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800356a:	bf00      	nop
 800356c:	08003591 	.word	0x08003591
 8003570:	08003599 	.word	0x08003599
 8003574:	080035a1 	.word	0x080035a1
 8003578:	080035b7 	.word	0x080035b7
 800357c:	080035a7 	.word	0x080035a7
 8003580:	080035b7 	.word	0x080035b7
 8003584:	080035b7 	.word	0x080035b7
 8003588:	080035b7 	.word	0x080035b7
 800358c:	080035af 	.word	0x080035af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003590:	f7fe fb7c 	bl	8001c8c <HAL_RCC_GetPCLK1Freq>
 8003594:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003596:	e014      	b.n	80035c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003598:	f7fe fb8e 	bl	8001cb8 <HAL_RCC_GetPCLK2Freq>
 800359c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800359e:	e010      	b.n	80035c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035a0:	4b26      	ldr	r3, [pc, #152]	; (800363c <UART_SetConfig+0x594>)
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035a4:	e00d      	b.n	80035c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035a6:	f7fe fb03 	bl	8001bb0 <HAL_RCC_GetSysClockFreq>
 80035aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80035ac:	e009      	b.n	80035c2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035b4:	e005      	b.n	80035c2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80035c0:	bf00      	nop
    }

    if (pclk != 0U)
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d021      	beq.n	800360c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	4a1a      	ldr	r2, [pc, #104]	; (8003638 <UART_SetConfig+0x590>)
 80035ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035d2:	461a      	mov	r2, r3
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	085b      	lsrs	r3, r3, #1
 80035e0:	441a      	add	r2, r3
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	2b0f      	cmp	r3, #15
 80035f0:	d909      	bls.n	8003606 <UART_SetConfig+0x55e>
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f8:	d205      	bcs.n	8003606 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035fa:	6a3b      	ldr	r3, [r7, #32]
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60da      	str	r2, [r3, #12]
 8003604:	e002      	b.n	800360c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2201      	movs	r2, #1
 8003610:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2201      	movs	r2, #1
 8003618:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2200      	movs	r2, #0
 8003620:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2200      	movs	r2, #0
 8003626:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003628:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800362c:	4618      	mov	r0, r3
 800362e:	3730      	adds	r7, #48	; 0x30
 8003630:	46bd      	mov	sp, r7
 8003632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003636:	bf00      	nop
 8003638:	080063fc 	.word	0x080063fc
 800363c:	00f42400 	.word	0x00f42400

08003640 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00a      	beq.n	800366a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00a      	beq.n	800368c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	f003 0304 	and.w	r3, r3, #4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00a      	beq.n	80036ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00a      	beq.n	80036f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800371c:	2b00      	cmp	r3, #0
 800371e:	d01a      	beq.n	8003756 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800373e:	d10a      	bne.n	8003756 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  }
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af02      	add	r7, sp, #8
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003794:	f7fd f9e6 	bl	8000b64 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0308 	and.w	r3, r3, #8
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d10e      	bne.n	80037c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f82f 	bl	800381a <UART_WaitOnFlagUntilTimeout>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e025      	b.n	8003812 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d10e      	bne.n	80037f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f819 	bl	800381a <UART_WaitOnFlagUntilTimeout>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e00f      	b.n	8003812 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b09c      	sub	sp, #112	; 0x70
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	603b      	str	r3, [r7, #0]
 8003826:	4613      	mov	r3, r2
 8003828:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800382a:	e0a9      	b.n	8003980 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003832:	f000 80a5 	beq.w	8003980 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003836:	f7fd f995 	bl	8000b64 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003842:	429a      	cmp	r2, r3
 8003844:	d302      	bcc.n	800384c <UART_WaitOnFlagUntilTimeout+0x32>
 8003846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003848:	2b00      	cmp	r3, #0
 800384a:	d140      	bne.n	80038ce <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800385a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003860:	667b      	str	r3, [r7, #100]	; 0x64
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800386a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800386c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003870:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003872:	e841 2300 	strex	r3, r2, [r1]
 8003876:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1e6      	bne.n	800384c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	3308      	adds	r3, #8
 8003884:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003888:	e853 3f00 	ldrex	r3, [r3]
 800388c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	663b      	str	r3, [r7, #96]	; 0x60
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3308      	adds	r3, #8
 800389c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800389e:	64ba      	str	r2, [r7, #72]	; 0x48
 80038a0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e5      	bne.n	800387e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2220      	movs	r2, #32
 80038b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e069      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d051      	beq.n	8003980 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ea:	d149      	bne.n	8003980 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038f4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fe:	e853 3f00 	ldrex	r3, [r3]
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800390a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	461a      	mov	r2, r3
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	637b      	str	r3, [r7, #52]	; 0x34
 8003916:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003918:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800391a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800391c:	e841 2300 	strex	r3, r2, [r1]
 8003920:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d1e6      	bne.n	80038f6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3308      	adds	r3, #8
 800392e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	e853 3f00 	ldrex	r3, [r3]
 8003936:	613b      	str	r3, [r7, #16]
   return(result);
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f023 0301 	bic.w	r3, r3, #1
 800393e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3308      	adds	r3, #8
 8003946:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003948:	623a      	str	r2, [r7, #32]
 800394a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	69f9      	ldr	r1, [r7, #28]
 800394e:	6a3a      	ldr	r2, [r7, #32]
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	61bb      	str	r3, [r7, #24]
   return(result);
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e5      	bne.n	8003928 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e010      	b.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	69da      	ldr	r2, [r3, #28]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	4013      	ands	r3, r2
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	429a      	cmp	r2, r3
 800398e:	bf0c      	ite	eq
 8003990:	2301      	moveq	r3, #1
 8003992:	2300      	movne	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	461a      	mov	r2, r3
 8003998:	79fb      	ldrb	r3, [r7, #7]
 800399a:	429a      	cmp	r2, r3
 800399c:	f43f af46 	beq.w	800382c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3770      	adds	r7, #112	; 0x70
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b095      	sub	sp, #84	; 0x54
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ba:	e853 3f00 	ldrex	r3, [r3]
 80039be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	461a      	mov	r2, r3
 80039ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039d0:	643b      	str	r3, [r7, #64]	; 0x40
 80039d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e6      	bne.n	80039b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3308      	adds	r3, #8
 80039ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	e853 3f00 	ldrex	r3, [r3]
 80039f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	3308      	adds	r3, #8
 8003a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e3      	bne.n	80039e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d118      	bne.n	8003a56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f023 0310 	bic.w	r3, r3, #16
 8003a38:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a46:	6979      	ldr	r1, [r7, #20]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	e841 2300 	strex	r3, r2, [r1]
 8003a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e6      	bne.n	8003a24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	671a      	str	r2, [r3, #112]	; 0x70
}
 8003a6a:	bf00      	nop
 8003a6c:	3754      	adds	r7, #84	; 0x54
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b084      	sub	sp, #16
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f7ff faf1 	bl	800307c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b08f      	sub	sp, #60	; 0x3c
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab0:	2b21      	cmp	r3, #33	; 0x21
 8003ab2:	d14c      	bne.n	8003b4e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d132      	bne.n	8003b26 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	461a      	mov	r2, r3
 8003adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ade:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e6      	bne.n	8003ac0 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	e853 3f00 	ldrex	r3, [r3]
 8003afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b06:	633b      	str	r3, [r7, #48]	; 0x30
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b14:	6979      	ldr	r1, [r7, #20]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	e841 2300 	strex	r3, r2, [r1]
 8003b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e6      	bne.n	8003af2 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003b24:	e013      	b.n	8003b4e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b2a:	781a      	ldrb	r2, [r3, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003b4e:	bf00      	nop
 8003b50:	373c      	adds	r7, #60	; 0x3c
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b091      	sub	sp, #68	; 0x44
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b68:	2b21      	cmp	r3, #33	; 0x21
 8003b6a:	d151      	bne.n	8003c10 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d132      	bne.n	8003bde <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	e853 3f00 	ldrex	r3, [r3]
 8003b84:	623b      	str	r3, [r7, #32]
   return(result);
 8003b86:	6a3b      	ldr	r3, [r7, #32]
 8003b88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	461a      	mov	r2, r3
 8003b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b96:	633b      	str	r3, [r7, #48]	; 0x30
 8003b98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e6      	bne.n	8003b78 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bbe:	637b      	str	r3, [r7, #52]	; 0x34
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc8:	61fb      	str	r3, [r7, #28]
 8003bca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	617b      	str	r3, [r7, #20]
   return(result);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e6      	bne.n	8003baa <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003bdc:	e018      	b.n	8003c10 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be6:	881b      	ldrh	r3, [r3, #0]
 8003be8:	461a      	mov	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf8:	1c9a      	adds	r2, r3, #2
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8003c10:	bf00      	nop
 8003c12:	3744      	adds	r7, #68	; 0x44
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b091      	sub	sp, #68	; 0x44
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c2a:	2b21      	cmp	r3, #33	; 0x21
 8003c2c:	d160      	bne.n	8003cf0 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003c34:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003c36:	e057      	b.n	8003ce8 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c3e:	b29b      	uxth	r3, r3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d133      	bne.n	8003cac <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3308      	adds	r3, #8
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	623b      	str	r3, [r7, #32]
   return(result);
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	3308      	adds	r3, #8
 8003c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c64:	633a      	str	r2, [r7, #48]	; 0x30
 8003c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6c:	e841 2300 	strex	r3, r2, [r1]
 8003c70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e5      	bne.n	8003c44 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	461a      	mov	r2, r3
 8003c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c96:	61fb      	str	r3, [r7, #28]
 8003c98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9a:	69b9      	ldr	r1, [r7, #24]
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	e841 2300 	strex	r3, r2, [r1]
 8003ca2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d1e6      	bne.n	8003c78 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003caa:	e021      	b.n	8003cf0 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	69db      	ldr	r3, [r3, #28]
 8003cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d013      	beq.n	8003ce2 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003ce2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003ce4:	3b01      	subs	r3, #1
 8003ce6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003ce8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1a4      	bne.n	8003c38 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003cee:	e7ff      	b.n	8003cf0 <UART_TxISR_8BIT_FIFOEN+0xd4>
 8003cf0:	bf00      	nop
 8003cf2:	3744      	adds	r7, #68	; 0x44
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b091      	sub	sp, #68	; 0x44
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d0a:	2b21      	cmp	r3, #33	; 0x21
 8003d0c:	d165      	bne.n	8003dda <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8003d14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003d16:	e05c      	b.n	8003dd2 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d133      	bne.n	8003d8c <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3308      	adds	r3, #8
 8003d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	e853 3f00 	ldrex	r3, [r3]
 8003d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	3308      	adds	r3, #8
 8003d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d4c:	e841 2300 	strex	r3, r2, [r1]
 8003d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1e5      	bne.n	8003d24 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	e853 3f00 	ldrex	r3, [r3]
 8003d64:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6979      	ldr	r1, [r7, #20]
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	613b      	str	r3, [r7, #16]
   return(result);
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e6      	bne.n	8003d58 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8003d8a:	e026      	b.n	8003dda <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d018      	beq.n	8003dcc <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9e:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	881b      	ldrh	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db4:	1c9a      	adds	r2, r3, #2
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003dcc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003dd2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d19f      	bne.n	8003d18 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8003dd8:	e7ff      	b.n	8003dda <UART_TxISR_16BIT_FIFOEN+0xde>
 8003dda:	bf00      	nop
 8003ddc:	3744      	adds	r7, #68	; 0x44
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b088      	sub	sp, #32
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6979      	ldr	r1, [r7, #20]
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e6      	bne.n	8003dee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff f91a 	bl	8003068 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e34:	bf00      	nop
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_UARTEx_DisableFifoMode+0x16>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e027      	b.n	8003ede <HAL_UARTEx_DisableFifoMode+0x66>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2224      	movs	r2, #36	; 0x24
 8003e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 0201 	bic.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003ebc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b084      	sub	sp, #16
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e02d      	b.n	8003f5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2224      	movs	r2, #36	; 0x24
 8003f0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0201 	bic.w	r2, r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f850 	bl	8003fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e02d      	b.n	8003fda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2224      	movs	r2, #36	; 0x24
 8003f8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f812 	bl	8003fe4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d108      	bne.n	8004006 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004004:	e031      	b.n	800406a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004006:	2308      	movs	r3, #8
 8004008:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800400a:	2308      	movs	r3, #8
 800400c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	0e5b      	lsrs	r3, r3, #25
 8004016:	b2db      	uxtb	r3, r3
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	0f5b      	lsrs	r3, r3, #29
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800402e:	7bbb      	ldrb	r3, [r7, #14]
 8004030:	7b3a      	ldrb	r2, [r7, #12]
 8004032:	4911      	ldr	r1, [pc, #68]	; (8004078 <UARTEx_SetNbDataToProcess+0x94>)
 8004034:	5c8a      	ldrb	r2, [r1, r2]
 8004036:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800403a:	7b3a      	ldrb	r2, [r7, #12]
 800403c:	490f      	ldr	r1, [pc, #60]	; (800407c <UARTEx_SetNbDataToProcess+0x98>)
 800403e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004040:	fb93 f3f2 	sdiv	r3, r3, r2
 8004044:	b29a      	uxth	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800404c:	7bfb      	ldrb	r3, [r7, #15]
 800404e:	7b7a      	ldrb	r2, [r7, #13]
 8004050:	4909      	ldr	r1, [pc, #36]	; (8004078 <UARTEx_SetNbDataToProcess+0x94>)
 8004052:	5c8a      	ldrb	r2, [r1, r2]
 8004054:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004058:	7b7a      	ldrb	r2, [r7, #13]
 800405a:	4908      	ldr	r1, [pc, #32]	; (800407c <UARTEx_SetNbDataToProcess+0x98>)
 800405c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800405e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800406a:	bf00      	nop
 800406c:	3714      	adds	r7, #20
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	08006414 	.word	0x08006414
 800407c:	0800641c 	.word	0x0800641c

08004080 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004080:	b480      	push	{r7}
 8004082:	b085      	sub	sp, #20
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800408e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004092:	2b84      	cmp	r3, #132	; 0x84
 8004094:	d005      	beq.n	80040a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004096:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4413      	add	r3, r2
 800409e:	3303      	adds	r3, #3
 80040a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80040a2:	68fb      	ldr	r3, [r7, #12]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80040b4:	f000 fe6c 	bl	8004d90 <vTaskStartScheduler>
  
  return osOK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	bd80      	pop	{r7, pc}

080040be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80040be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040c0:	b087      	sub	sp, #28
 80040c2:	af02      	add	r7, sp, #8
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685c      	ldr	r4, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040d4:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80040dc:	4618      	mov	r0, r3
 80040de:	f7ff ffcf 	bl	8004080 <makeFreeRtosPriority>
 80040e2:	4602      	mov	r2, r0
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	9200      	str	r2, [sp, #0]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4632      	mov	r2, r6
 80040f0:	4629      	mov	r1, r5
 80040f2:	4620      	mov	r0, r4
 80040f4:	f000 fcce 	bl	8004a94 <xTaskCreate>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d001      	beq.n	8004102 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	e000      	b.n	8004104 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8004102:	68fb      	ldr	r3, [r7, #12]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800410c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <osDelay+0x16>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	e000      	b.n	8004124 <osDelay+0x18>
 8004122:	2301      	movs	r3, #1
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fdff 	bl	8004d28 <vTaskDelay>
  
  return osOK;
 800412a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f103 0208 	add.w	r2, r3, #8
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f04f 32ff 	mov.w	r2, #4294967295
 800414c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f103 0208 	add.w	r2, r3, #8
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f103 0208 	add.w	r2, r3, #8
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004182:	bf00      	nop
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800418e:	b480      	push	{r7}
 8004190:	b085      	sub	sp, #20
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
 8004196:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	1c5a      	adds	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	601a      	str	r2, [r3, #0]
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr

080041d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041d6:	b480      	push	{r7}
 80041d8:	b085      	sub	sp, #20
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ec:	d103      	bne.n	80041f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e00c      	b.n	8004210 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3308      	adds	r3, #8
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	e002      	b.n	8004204 <vListInsert+0x2e>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68ba      	ldr	r2, [r7, #8]
 800420c:	429a      	cmp	r2, r3
 800420e:	d2f6      	bcs.n	80041fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	601a      	str	r2, [r3, #0]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	6892      	ldr	r2, [r2, #8]
 800425e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	6852      	ldr	r2, [r2, #4]
 8004268:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	429a      	cmp	r2, r3
 8004272:	d103      	bne.n	800427c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	1e5a      	subs	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80042c6:	f001 fc8d 	bl	8005be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d2:	68f9      	ldr	r1, [r7, #12]
 80042d4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	441a      	add	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f6:	3b01      	subs	r3, #1
 80042f8:	68f9      	ldr	r1, [r7, #12]
 80042fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	441a      	add	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	22ff      	movs	r2, #255	; 0xff
 800430a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	22ff      	movs	r2, #255	; 0xff
 8004312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d114      	bne.n	8004346 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01a      	beq.n	800435a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3310      	adds	r3, #16
 8004328:	4618      	mov	r0, r3
 800432a:	f000 ff69 	bl	8005200 <xTaskRemoveFromEventList>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d012      	beq.n	800435a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <xQueueGenericReset+0xcc>)
 8004336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800433a:	601a      	str	r2, [r3, #0]
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	f3bf 8f6f 	isb	sy
 8004344:	e009      	b.n	800435a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3310      	adds	r3, #16
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fef2 	bl	8004134 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3324      	adds	r3, #36	; 0x24
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff feed 	bl	8004134 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800435a:	f001 fc73 	bl	8005c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800435e:	2301      	movs	r3, #1
}
 8004360:	4618      	mov	r0, r3
 8004362:	3710      	adds	r7, #16
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	; 0x28
 8004370:	af02      	add	r7, sp, #8
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	4613      	mov	r3, r2
 8004378:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	613b      	str	r3, [r7, #16]
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	fb02 f303 	mul.w	r3, r2, r3
 800439e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	3348      	adds	r3, #72	; 0x48
 80043a4:	4618      	mov	r0, r3
 80043a6:	f001 fcff 	bl	8005da8 <pvPortMalloc>
 80043aa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00d      	beq.n	80043ce <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	3348      	adds	r3, #72	; 0x48
 80043ba:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043bc:	79fa      	ldrb	r2, [r7, #7]
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	4613      	mov	r3, r2
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	68b9      	ldr	r1, [r7, #8]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f805 	bl	80043d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043ce:	69bb      	ldr	r3, [r7, #24]
	}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d103      	bne.n	80043f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e002      	b.n	80043fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004406:	2101      	movs	r1, #1
 8004408:	69b8      	ldr	r0, [r7, #24]
 800440a:	f7ff ff47 	bl	800429c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00e      	beq.n	8004442 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004436:	2300      	movs	r3, #0
 8004438:	2200      	movs	r2, #0
 800443a:	2100      	movs	r1, #0
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f81d 	bl	800447c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800444a:	b580      	push	{r7, lr}
 800444c:	b086      	sub	sp, #24
 800444e:	af00      	add	r7, sp, #0
 8004450:	4603      	mov	r3, r0
 8004452:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004454:	2301      	movs	r3, #1
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	461a      	mov	r2, r3
 8004460:	6939      	ldr	r1, [r7, #16]
 8004462:	6978      	ldr	r0, [r7, #20]
 8004464:	f7ff ff82 	bl	800436c <xQueueGenericCreate>
 8004468:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff ffd3 	bl	8004416 <prvInitialiseMutex>

		return xNewQueue;
 8004470:	68fb      	ldr	r3, [r7, #12]
	}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08e      	sub	sp, #56	; 0x38
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800448a:	2300      	movs	r3, #0
 800448c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10a      	bne.n	80044ae <xQueueGenericSend+0x32>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80044aa:	bf00      	nop
 80044ac:	e7fe      	b.n	80044ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d103      	bne.n	80044bc <xQueueGenericSend+0x40>
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <xQueueGenericSend+0x44>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <xQueueGenericSend+0x46>
 80044c0:	2300      	movs	r3, #0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10a      	bne.n	80044dc <xQueueGenericSend+0x60>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d103      	bne.n	80044ea <xQueueGenericSend+0x6e>
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <xQueueGenericSend+0x72>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <xQueueGenericSend+0x74>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10a      	bne.n	800450a <xQueueGenericSend+0x8e>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	623b      	str	r3, [r7, #32]
}
 8004506:	bf00      	nop
 8004508:	e7fe      	b.n	8004508 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800450a:	f001 f81b 	bl	8005544 <xTaskGetSchedulerState>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d102      	bne.n	800451a <xQueueGenericSend+0x9e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <xQueueGenericSend+0xa2>
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <xQueueGenericSend+0xa4>
 800451e:	2300      	movs	r3, #0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <xQueueGenericSend+0xbe>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	61fb      	str	r3, [r7, #28]
}
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800453a:	f001 fb53 	bl	8005be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800453e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	429a      	cmp	r2, r3
 8004548:	d302      	bcc.n	8004550 <xQueueGenericSend+0xd4>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b02      	cmp	r3, #2
 800454e:	d129      	bne.n	80045a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004556:	f000 f9b3 	bl	80048c0 <prvCopyDataToQueue>
 800455a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d010      	beq.n	8004586 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	3324      	adds	r3, #36	; 0x24
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fe49 	bl	8005200 <xTaskRemoveFromEventList>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004574:	4b3f      	ldr	r3, [pc, #252]	; (8004674 <xQueueGenericSend+0x1f8>)
 8004576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	e00a      	b.n	800459c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800458c:	4b39      	ldr	r3, [pc, #228]	; (8004674 <xQueueGenericSend+0x1f8>)
 800458e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004592:	601a      	str	r2, [r3, #0]
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800459c:	f001 fb52 	bl	8005c44 <vPortExitCritical>
				return pdPASS;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e063      	b.n	800466c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045aa:	f001 fb4b 	bl	8005c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e05c      	b.n	800466c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d106      	bne.n	80045c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fe81 	bl	80052c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045c2:	2301      	movs	r3, #1
 80045c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045c6:	f001 fb3d 	bl	8005c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045ca:	f000 fc31 	bl	8004e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045ce:	f001 fb09 	bl	8005be4 <vPortEnterCritical>
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045d8:	b25b      	sxtb	r3, r3
 80045da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045de:	d103      	bne.n	80045e8 <xQueueGenericSend+0x16c>
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	2200      	movs	r2, #0
 80045e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ee:	b25b      	sxtb	r3, r3
 80045f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f4:	d103      	bne.n	80045fe <xQueueGenericSend+0x182>
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045fe:	f001 fb21 	bl	8005c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004602:	1d3a      	adds	r2, r7, #4
 8004604:	f107 0314 	add.w	r3, r7, #20
 8004608:	4611      	mov	r1, r2
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fe70 	bl	80052f0 <xTaskCheckForTimeOut>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d124      	bne.n	8004660 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004616:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004618:	f000 fa24 	bl	8004a64 <prvIsQueueFull>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d018      	beq.n	8004654 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	3310      	adds	r3, #16
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4611      	mov	r1, r2
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fdc4 	bl	80051b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004630:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004632:	f000 f9af 	bl	8004994 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004636:	f000 fc09 	bl	8004e4c <xTaskResumeAll>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	f47f af7c 	bne.w	800453a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004642:	4b0c      	ldr	r3, [pc, #48]	; (8004674 <xQueueGenericSend+0x1f8>)
 8004644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	e772      	b.n	800453a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004654:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004656:	f000 f99d 	bl	8004994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800465a:	f000 fbf7 	bl	8004e4c <xTaskResumeAll>
 800465e:	e76c      	b.n	800453a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004662:	f000 f997 	bl	8004994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004666:	f000 fbf1 	bl	8004e4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800466a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800466c:	4618      	mov	r0, r3
 800466e:	3738      	adds	r7, #56	; 0x38
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08e      	sub	sp, #56	; 0x38
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004682:	2300      	movs	r3, #0
 8004684:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800468a:	2300      	movs	r3, #0
 800468c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004698:	f383 8811 	msr	BASEPRI, r3
 800469c:	f3bf 8f6f 	isb	sy
 80046a0:	f3bf 8f4f 	dsb	sy
 80046a4:	623b      	str	r3, [r7, #32]
}
 80046a6:	bf00      	nop
 80046a8:	e7fe      	b.n	80046a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	61fb      	str	r3, [r7, #28]
}
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046c8:	f000 ff3c 	bl	8005544 <xTaskGetSchedulerState>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d102      	bne.n	80046d8 <xQueueSemaphoreTake+0x60>
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <xQueueSemaphoreTake+0x64>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <xQueueSemaphoreTake+0x66>
 80046dc:	2300      	movs	r3, #0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d10a      	bne.n	80046f8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	f383 8811 	msr	BASEPRI, r3
 80046ea:	f3bf 8f6f 	isb	sy
 80046ee:	f3bf 8f4f 	dsb	sy
 80046f2:	61bb      	str	r3, [r7, #24]
}
 80046f4:	bf00      	nop
 80046f6:	e7fe      	b.n	80046f6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046f8:	f001 fa74 	bl	8005be4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	2b00      	cmp	r3, #0
 8004706:	d024      	beq.n	8004752 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	1e5a      	subs	r2, r3, #1
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d104      	bne.n	8004722 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004718:	f001 f8bc 	bl	8005894 <pvTaskIncrementMutexHeldCount>
 800471c:	4602      	mov	r2, r0
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00f      	beq.n	800474a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800472a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472c:	3310      	adds	r3, #16
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fd66 	bl	8005200 <xTaskRemoveFromEventList>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d007      	beq.n	800474a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800473a:	4b54      	ldr	r3, [pc, #336]	; (800488c <xQueueSemaphoreTake+0x214>)
 800473c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	f3bf 8f4f 	dsb	sy
 8004746:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800474a:	f001 fa7b 	bl	8005c44 <vPortExitCritical>
				return pdPASS;
 800474e:	2301      	movs	r3, #1
 8004750:	e097      	b.n	8004882 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d111      	bne.n	800477c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	617b      	str	r3, [r7, #20]
}
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004774:	f001 fa66 	bl	8005c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004778:	2300      	movs	r3, #0
 800477a:	e082      	b.n	8004882 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800477c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477e:	2b00      	cmp	r3, #0
 8004780:	d106      	bne.n	8004790 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004782:	f107 030c 	add.w	r3, r7, #12
 8004786:	4618      	mov	r0, r3
 8004788:	f000 fd9c 	bl	80052c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800478c:	2301      	movs	r3, #1
 800478e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004790:	f001 fa58 	bl	8005c44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004794:	f000 fb4c 	bl	8004e30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004798:	f001 fa24 	bl	8005be4 <vPortEnterCritical>
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a2:	b25b      	sxtb	r3, r3
 80047a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a8:	d103      	bne.n	80047b2 <xQueueSemaphoreTake+0x13a>
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b8:	b25b      	sxtb	r3, r3
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d103      	bne.n	80047c8 <xQueueSemaphoreTake+0x150>
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c8:	f001 fa3c 	bl	8005c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047cc:	463a      	mov	r2, r7
 80047ce:	f107 030c 	add.w	r3, r7, #12
 80047d2:	4611      	mov	r1, r2
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fd8b 	bl	80052f0 <xTaskCheckForTimeOut>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d132      	bne.n	8004846 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047e2:	f000 f929 	bl	8004a38 <prvIsQueueEmpty>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d026      	beq.n	800483a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d109      	bne.n	8004808 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80047f4:	f001 f9f6 	bl	8005be4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f000 febf 	bl	8005580 <xTaskPriorityInherit>
 8004802:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004804:	f001 fa1e 	bl	8005c44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	3324      	adds	r3, #36	; 0x24
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	4611      	mov	r1, r2
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fcd1 	bl	80051b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004816:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004818:	f000 f8bc 	bl	8004994 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800481c:	f000 fb16 	bl	8004e4c <xTaskResumeAll>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	f47f af68 	bne.w	80046f8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004828:	4b18      	ldr	r3, [pc, #96]	; (800488c <xQueueSemaphoreTake+0x214>)
 800482a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	e75e      	b.n	80046f8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800483a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800483c:	f000 f8aa 	bl	8004994 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004840:	f000 fb04 	bl	8004e4c <xTaskResumeAll>
 8004844:	e758      	b.n	80046f8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004848:	f000 f8a4 	bl	8004994 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800484c:	f000 fafe 	bl	8004e4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004850:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004852:	f000 f8f1 	bl	8004a38 <prvIsQueueEmpty>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	f43f af4d 	beq.w	80046f8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00d      	beq.n	8004880 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004864:	f001 f9be 	bl	8005be4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004868:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800486a:	f000 f811 	bl	8004890 <prvGetDisinheritPriorityAfterTimeout>
 800486e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004876:	4618      	mov	r0, r3
 8004878:	f000 ff7e 	bl	8005778 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800487c:	f001 f9e2 	bl	8005c44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004880:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004882:	4618      	mov	r0, r3
 8004884:	3738      	adds	r7, #56	; 0x38
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	d006      	beq.n	80048ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f1c3 031f 	rsb	r3, r3, #31
 80048aa:	60fb      	str	r3, [r7, #12]
 80048ac:	e001      	b.n	80048b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80048b2:	68fb      	ldr	r3, [r7, #12]
	}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3714      	adds	r7, #20
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10d      	bne.n	80048fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d14d      	bne.n	8004982 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f000 febe 	bl	800566c <xTaskPriorityDisinherit>
 80048f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	e043      	b.n	8004982 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d119      	bne.n	8004934 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6858      	ldr	r0, [r3, #4]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	461a      	mov	r2, r3
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	f001 fcba 	bl	8006284 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	441a      	add	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	429a      	cmp	r2, r3
 8004928:	d32b      	bcc.n	8004982 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	e026      	b.n	8004982 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	68d8      	ldr	r0, [r3, #12]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	461a      	mov	r2, r3
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	f001 fca0 	bl	8006284 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	68da      	ldr	r2, [r3, #12]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	425b      	negs	r3, r3
 800494e:	441a      	add	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	68da      	ldr	r2, [r3, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d207      	bcs.n	8004970 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	425b      	negs	r3, r3
 800496a:	441a      	add	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d105      	bne.n	8004982 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	3b01      	subs	r3, #1
 8004980:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800498a:	697b      	ldr	r3, [r7, #20]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800499c:	f001 f922 	bl	8005be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049a8:	e011      	b.n	80049ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d012      	beq.n	80049d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	3324      	adds	r3, #36	; 0x24
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fc22 	bl	8005200 <xTaskRemoveFromEventList>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80049c2:	f000 fcf7 	bl	80053b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	dce9      	bgt.n	80049aa <prvUnlockQueue+0x16>
 80049d6:	e000      	b.n	80049da <prvUnlockQueue+0x46>
					break;
 80049d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	22ff      	movs	r2, #255	; 0xff
 80049de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80049e2:	f001 f92f 	bl	8005c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80049e6:	f001 f8fd 	bl	8005be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049f2:	e011      	b.n	8004a18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d012      	beq.n	8004a22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3310      	adds	r3, #16
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fbfd 	bl	8005200 <xTaskRemoveFromEventList>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a0c:	f000 fcd2 	bl	80053b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a10:	7bbb      	ldrb	r3, [r7, #14]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	dce9      	bgt.n	80049f4 <prvUnlockQueue+0x60>
 8004a20:	e000      	b.n	8004a24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	22ff      	movs	r2, #255	; 0xff
 8004a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a2c:	f001 f90a 	bl	8005c44 <vPortExitCritical>
}
 8004a30:	bf00      	nop
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a40:	f001 f8d0 	bl	8005be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d102      	bne.n	8004a52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	60fb      	str	r3, [r7, #12]
 8004a50:	e001      	b.n	8004a56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a56:	f001 f8f5 	bl	8005c44 <vPortExitCritical>

	return xReturn;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a6c:	f001 f8ba 	bl	8005be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d102      	bne.n	8004a82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	e001      	b.n	8004a86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a86:	f001 f8dd 	bl	8005c44 <vPortExitCritical>

	return xReturn;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08c      	sub	sp, #48	; 0x30
 8004a98:	af04      	add	r7, sp, #16
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004aa4:	88fb      	ldrh	r3, [r7, #6]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f001 f97d 	bl	8005da8 <pvPortMalloc>
 8004aae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00e      	beq.n	8004ad4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ab6:	20a0      	movs	r0, #160	; 0xa0
 8004ab8:	f001 f976 	bl	8005da8 <pvPortMalloc>
 8004abc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d003      	beq.n	8004acc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8004aca:	e005      	b.n	8004ad8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	f001 fa37 	bl	8005f40 <vPortFree>
 8004ad2:	e001      	b.n	8004ad8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d013      	beq.n	8004b06 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9303      	str	r3, [sp, #12]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	9302      	str	r3, [sp, #8]
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f80f 	bl	8004b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004afa:	69f8      	ldr	r0, [r7, #28]
 8004afc:	f000 f8aa 	bl	8004c54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b00:	2301      	movs	r3, #1
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	e002      	b.n	8004b0c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295
 8004b0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
	}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b30:	3b01      	subs	r3, #1
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	f023 0307 	bic.w	r3, r3, #7
 8004b3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4e:	f383 8811 	msr	BASEPRI, r3
 8004b52:	f3bf 8f6f 	isb	sy
 8004b56:	f3bf 8f4f 	dsb	sy
 8004b5a:	617b      	str	r3, [r7, #20]
}
 8004b5c:	bf00      	nop
 8004b5e:	e7fe      	b.n	8004b5e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01f      	beq.n	8004ba6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b66:	2300      	movs	r3, #0
 8004b68:	61fb      	str	r3, [r7, #28]
 8004b6a:	e012      	b.n	8004b92 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	7819      	ldrb	r1, [r3, #0]
 8004b74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	4413      	add	r3, r2
 8004b7a:	3334      	adds	r3, #52	; 0x34
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b80:	68ba      	ldr	r2, [r7, #8]
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	4413      	add	r3, r2
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d006      	beq.n	8004b9a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	61fb      	str	r3, [r7, #28]
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2b0f      	cmp	r3, #15
 8004b96:	d9e9      	bls.n	8004b6c <prvInitialiseNewTask+0x54>
 8004b98:	e000      	b.n	8004b9c <prvInitialiseNewTask+0x84>
			{
				break;
 8004b9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba4:	e003      	b.n	8004bae <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	2b1e      	cmp	r3, #30
 8004bb2:	d901      	bls.n	8004bb8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bb4:	231e      	movs	r3, #30
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	3304      	adds	r3, #4
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7ff fad0 	bl	8004174 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd6:	3318      	adds	r3, #24
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7ff facb 	bl	8004174 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be6:	f1c3 021f 	rsb	r2, r3, #31
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c06:	334c      	adds	r3, #76	; 0x4c
 8004c08:	224c      	movs	r2, #76	; 0x4c
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f001 fab5 	bl	800617c <memset>
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	4a0c      	ldr	r2, [pc, #48]	; (8004c48 <prvInitialiseNewTask+0x130>)
 8004c16:	651a      	str	r2, [r3, #80]	; 0x50
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	4a0c      	ldr	r2, [pc, #48]	; (8004c4c <prvInitialiseNewTask+0x134>)
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c20:	4a0b      	ldr	r2, [pc, #44]	; (8004c50 <prvInitialiseNewTask+0x138>)
 8004c22:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	68f9      	ldr	r1, [r7, #12]
 8004c28:	69b8      	ldr	r0, [r7, #24]
 8004c2a:	f000 fead 	bl	8005988 <pxPortInitialiseStack>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d002      	beq.n	8004c40 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c40:	bf00      	nop
 8004c42:	3720      	adds	r7, #32
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	20002c98 	.word	0x20002c98
 8004c4c:	20002d00 	.word	0x20002d00
 8004c50:	20002d68 	.word	0x20002d68

08004c54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c5c:	f000 ffc2 	bl	8005be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c60:	4b2a      	ldr	r3, [pc, #168]	; (8004d0c <prvAddNewTaskToReadyList+0xb8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	4a29      	ldr	r2, [pc, #164]	; (8004d0c <prvAddNewTaskToReadyList+0xb8>)
 8004c68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c6a:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <prvAddNewTaskToReadyList+0xbc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c72:	4a27      	ldr	r2, [pc, #156]	; (8004d10 <prvAddNewTaskToReadyList+0xbc>)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c78:	4b24      	ldr	r3, [pc, #144]	; (8004d0c <prvAddNewTaskToReadyList+0xb8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d110      	bne.n	8004ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c80:	f000 fbbc 	bl	80053fc <prvInitialiseTaskLists>
 8004c84:	e00d      	b.n	8004ca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c86:	4b23      	ldr	r3, [pc, #140]	; (8004d14 <prvAddNewTaskToReadyList+0xc0>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c8e:	4b20      	ldr	r3, [pc, #128]	; (8004d10 <prvAddNewTaskToReadyList+0xbc>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d802      	bhi.n	8004ca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c9c:	4a1c      	ldr	r2, [pc, #112]	; (8004d10 <prvAddNewTaskToReadyList+0xbc>)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ca2:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <prvAddNewTaskToReadyList+0xc4>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	4a1b      	ldr	r2, [pc, #108]	; (8004d18 <prvAddNewTaskToReadyList+0xc4>)
 8004caa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	409a      	lsls	r2, r3
 8004cb4:	4b19      	ldr	r3, [pc, #100]	; (8004d1c <prvAddNewTaskToReadyList+0xc8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	4a18      	ldr	r2, [pc, #96]	; (8004d1c <prvAddNewTaskToReadyList+0xc8>)
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <prvAddNewTaskToReadyList+0xcc>)
 8004ccc:	441a      	add	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f7ff fa5a 	bl	800418e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cda:	f000 ffb3 	bl	8005c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <prvAddNewTaskToReadyList+0xc0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00e      	beq.n	8004d04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ce6:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <prvAddNewTaskToReadyList+0xbc>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d207      	bcs.n	8004d04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004cf4:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <prvAddNewTaskToReadyList+0xd0>)
 8004cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000444 	.word	0x20000444
 8004d10:	20000164 	.word	0x20000164
 8004d14:	20000450 	.word	0x20000450
 8004d18:	20000460 	.word	0x20000460
 8004d1c:	2000044c 	.word	0x2000044c
 8004d20:	20000168 	.word	0x20000168
 8004d24:	e000ed04 	.word	0xe000ed04

08004d28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d017      	beq.n	8004d6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004d3a:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <vTaskDelay+0x60>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <vTaskDelay+0x30>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	60bb      	str	r3, [r7, #8]
}
 8004d54:	bf00      	nop
 8004d56:	e7fe      	b.n	8004d56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004d58:	f000 f86a 	bl	8004e30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 fdac 	bl	80058bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d64:	f000 f872 	bl	8004e4c <xTaskResumeAll>
 8004d68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d107      	bne.n	8004d80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d70:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <vTaskDelay+0x64>)
 8004d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d80:	bf00      	nop
 8004d82:	3710      	adds	r7, #16
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	2000046c 	.word	0x2000046c
 8004d8c:	e000ed04 	.word	0xe000ed04

08004d90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004d96:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <vTaskStartScheduler+0x80>)
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	2300      	movs	r3, #0
 8004da0:	2280      	movs	r2, #128	; 0x80
 8004da2:	491c      	ldr	r1, [pc, #112]	; (8004e14 <vTaskStartScheduler+0x84>)
 8004da4:	481c      	ldr	r0, [pc, #112]	; (8004e18 <vTaskStartScheduler+0x88>)
 8004da6:	f7ff fe75 	bl	8004a94 <xTaskCreate>
 8004daa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d11b      	bne.n	8004dea <vTaskStartScheduler+0x5a>
	__asm volatile
 8004db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db6:	f383 8811 	msr	BASEPRI, r3
 8004dba:	f3bf 8f6f 	isb	sy
 8004dbe:	f3bf 8f4f 	dsb	sy
 8004dc2:	60bb      	str	r3, [r7, #8]
}
 8004dc4:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004dc6:	4b15      	ldr	r3, [pc, #84]	; (8004e1c <vTaskStartScheduler+0x8c>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	334c      	adds	r3, #76	; 0x4c
 8004dcc:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <vTaskStartScheduler+0x90>)
 8004dce:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004dd0:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <vTaskStartScheduler+0x94>)
 8004dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004dd8:	4b13      	ldr	r3, [pc, #76]	; (8004e28 <vTaskStartScheduler+0x98>)
 8004dda:	2201      	movs	r2, #1
 8004ddc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004dde:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <vTaskStartScheduler+0x9c>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004de4:	f000 fe5c 	bl	8005aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004de8:	e00e      	b.n	8004e08 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df0:	d10a      	bne.n	8004e08 <vTaskStartScheduler+0x78>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	607b      	str	r3, [r7, #4]
}
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <vTaskStartScheduler+0x76>
}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	20000468 	.word	0x20000468
 8004e14:	080063dc 	.word	0x080063dc
 8004e18:	080053cd 	.word	0x080053cd
 8004e1c:	20000164 	.word	0x20000164
 8004e20:	2000005c 	.word	0x2000005c
 8004e24:	20000464 	.word	0x20000464
 8004e28:	20000450 	.word	0x20000450
 8004e2c:	20000448 	.word	0x20000448

08004e30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004e34:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <vTaskSuspendAll+0x18>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	4a03      	ldr	r2, [pc, #12]	; (8004e48 <vTaskSuspendAll+0x18>)
 8004e3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e3e:	bf00      	nop
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	2000046c 	.word	0x2000046c

08004e4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e5a:	4b41      	ldr	r3, [pc, #260]	; (8004f60 <xTaskResumeAll+0x114>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <xTaskResumeAll+0x2c>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	603b      	str	r3, [r7, #0]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e78:	f000 feb4 	bl	8005be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e7c:	4b38      	ldr	r3, [pc, #224]	; (8004f60 <xTaskResumeAll+0x114>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	4a37      	ldr	r2, [pc, #220]	; (8004f60 <xTaskResumeAll+0x114>)
 8004e84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e86:	4b36      	ldr	r3, [pc, #216]	; (8004f60 <xTaskResumeAll+0x114>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d161      	bne.n	8004f52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e8e:	4b35      	ldr	r3, [pc, #212]	; (8004f64 <xTaskResumeAll+0x118>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d05d      	beq.n	8004f52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e96:	e02e      	b.n	8004ef6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e98:	4b33      	ldr	r3, [pc, #204]	; (8004f68 <xTaskResumeAll+0x11c>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3318      	adds	r3, #24
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f7ff f9cf 	bl	8004248 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3304      	adds	r3, #4
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff f9ca 	bl	8004248 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	2201      	movs	r2, #1
 8004eba:	409a      	lsls	r2, r3
 8004ebc:	4b2b      	ldr	r3, [pc, #172]	; (8004f6c <xTaskResumeAll+0x120>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	4a2a      	ldr	r2, [pc, #168]	; (8004f6c <xTaskResumeAll+0x120>)
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4a27      	ldr	r2, [pc, #156]	; (8004f70 <xTaskResumeAll+0x124>)
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f7ff f956 	bl	800418e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee6:	4b23      	ldr	r3, [pc, #140]	; (8004f74 <xTaskResumeAll+0x128>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d302      	bcc.n	8004ef6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004ef0:	4b21      	ldr	r3, [pc, #132]	; (8004f78 <xTaskResumeAll+0x12c>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ef6:	4b1c      	ldr	r3, [pc, #112]	; (8004f68 <xTaskResumeAll+0x11c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1cc      	bne.n	8004e98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004f04:	f000 fafe 	bl	8005504 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004f08:	4b1c      	ldr	r3, [pc, #112]	; (8004f7c <xTaskResumeAll+0x130>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d010      	beq.n	8004f36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004f14:	f000 f836 	bl	8004f84 <xTaskIncrementTick>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004f1e:	4b16      	ldr	r3, [pc, #88]	; (8004f78 <xTaskResumeAll+0x12c>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f1      	bne.n	8004f14 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004f30:	4b12      	ldr	r3, [pc, #72]	; (8004f7c <xTaskResumeAll+0x130>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004f36:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <xTaskResumeAll+0x12c>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f42:	4b0f      	ldr	r3, [pc, #60]	; (8004f80 <xTaskResumeAll+0x134>)
 8004f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	f3bf 8f4f 	dsb	sy
 8004f4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f52:	f000 fe77 	bl	8005c44 <vPortExitCritical>

	return xAlreadyYielded;
 8004f56:	68bb      	ldr	r3, [r7, #8]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	2000046c 	.word	0x2000046c
 8004f64:	20000444 	.word	0x20000444
 8004f68:	20000404 	.word	0x20000404
 8004f6c:	2000044c 	.word	0x2000044c
 8004f70:	20000168 	.word	0x20000168
 8004f74:	20000164 	.word	0x20000164
 8004f78:	20000458 	.word	0x20000458
 8004f7c:	20000454 	.word	0x20000454
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f8e:	4b4e      	ldr	r3, [pc, #312]	; (80050c8 <xTaskIncrementTick+0x144>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f040 808e 	bne.w	80050b4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f98:	4b4c      	ldr	r3, [pc, #304]	; (80050cc <xTaskIncrementTick+0x148>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004fa0:	4a4a      	ldr	r2, [pc, #296]	; (80050cc <xTaskIncrementTick+0x148>)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d120      	bne.n	8004fee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004fac:	4b48      	ldr	r3, [pc, #288]	; (80050d0 <xTaskIncrementTick+0x14c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <xTaskIncrementTick+0x48>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	603b      	str	r3, [r7, #0]
}
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <xTaskIncrementTick+0x46>
 8004fcc:	4b40      	ldr	r3, [pc, #256]	; (80050d0 <xTaskIncrementTick+0x14c>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <xTaskIncrementTick+0x150>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a3e      	ldr	r2, [pc, #248]	; (80050d0 <xTaskIncrementTick+0x14c>)
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	4a3e      	ldr	r2, [pc, #248]	; (80050d4 <xTaskIncrementTick+0x150>)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6013      	str	r3, [r2, #0]
 8004fe0:	4b3d      	ldr	r3, [pc, #244]	; (80050d8 <xTaskIncrementTick+0x154>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	4a3c      	ldr	r2, [pc, #240]	; (80050d8 <xTaskIncrementTick+0x154>)
 8004fe8:	6013      	str	r3, [r2, #0]
 8004fea:	f000 fa8b 	bl	8005504 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fee:	4b3b      	ldr	r3, [pc, #236]	; (80050dc <xTaskIncrementTick+0x158>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d348      	bcc.n	800508a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ff8:	4b35      	ldr	r3, [pc, #212]	; (80050d0 <xTaskIncrementTick+0x14c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d104      	bne.n	800500c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005002:	4b36      	ldr	r3, [pc, #216]	; (80050dc <xTaskIncrementTick+0x158>)
 8005004:	f04f 32ff 	mov.w	r2, #4294967295
 8005008:	601a      	str	r2, [r3, #0]
					break;
 800500a:	e03e      	b.n	800508a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800500c:	4b30      	ldr	r3, [pc, #192]	; (80050d0 <xTaskIncrementTick+0x14c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d203      	bcs.n	800502c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005024:	4a2d      	ldr	r2, [pc, #180]	; (80050dc <xTaskIncrementTick+0x158>)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800502a:	e02e      	b.n	800508a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	3304      	adds	r3, #4
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff f909 	bl	8004248 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	d004      	beq.n	8005048 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	3318      	adds	r3, #24
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff f900 	bl	8004248 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504c:	2201      	movs	r2, #1
 800504e:	409a      	lsls	r2, r3
 8005050:	4b23      	ldr	r3, [pc, #140]	; (80050e0 <xTaskIncrementTick+0x15c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4313      	orrs	r3, r2
 8005056:	4a22      	ldr	r2, [pc, #136]	; (80050e0 <xTaskIncrementTick+0x15c>)
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505e:	4613      	mov	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	4413      	add	r3, r2
 8005064:	009b      	lsls	r3, r3, #2
 8005066:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <xTaskIncrementTick+0x160>)
 8005068:	441a      	add	r2, r3
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f7ff f88c 	bl	800418e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <xTaskIncrementTick+0x164>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	429a      	cmp	r2, r3
 8005082:	d3b9      	bcc.n	8004ff8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005084:	2301      	movs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005088:	e7b6      	b.n	8004ff8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800508a:	4b17      	ldr	r3, [pc, #92]	; (80050e8 <xTaskIncrementTick+0x164>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005090:	4914      	ldr	r1, [pc, #80]	; (80050e4 <xTaskIncrementTick+0x160>)
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	440b      	add	r3, r1
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d901      	bls.n	80050a6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80050a2:	2301      	movs	r3, #1
 80050a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80050a6:	4b11      	ldr	r3, [pc, #68]	; (80050ec <xTaskIncrementTick+0x168>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d007      	beq.n	80050be <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80050ae:	2301      	movs	r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	e004      	b.n	80050be <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <xTaskIncrementTick+0x16c>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	4a0d      	ldr	r2, [pc, #52]	; (80050f0 <xTaskIncrementTick+0x16c>)
 80050bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80050be:	697b      	ldr	r3, [r7, #20]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	2000046c 	.word	0x2000046c
 80050cc:	20000448 	.word	0x20000448
 80050d0:	200003fc 	.word	0x200003fc
 80050d4:	20000400 	.word	0x20000400
 80050d8:	2000045c 	.word	0x2000045c
 80050dc:	20000464 	.word	0x20000464
 80050e0:	2000044c 	.word	0x2000044c
 80050e4:	20000168 	.word	0x20000168
 80050e8:	20000164 	.word	0x20000164
 80050ec:	20000458 	.word	0x20000458
 80050f0:	20000454 	.word	0x20000454

080050f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050fa:	4b29      	ldr	r3, [pc, #164]	; (80051a0 <vTaskSwitchContext+0xac>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005102:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <vTaskSwitchContext+0xb0>)
 8005104:	2201      	movs	r2, #1
 8005106:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005108:	e044      	b.n	8005194 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800510a:	4b26      	ldr	r3, [pc, #152]	; (80051a4 <vTaskSwitchContext+0xb0>)
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005110:	4b25      	ldr	r3, [pc, #148]	; (80051a8 <vTaskSwitchContext+0xb4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	fab3 f383 	clz	r3, r3
 800511c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800511e:	7afb      	ldrb	r3, [r7, #11]
 8005120:	f1c3 031f 	rsb	r3, r3, #31
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	4921      	ldr	r1, [pc, #132]	; (80051ac <vTaskSwitchContext+0xb8>)
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	4613      	mov	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	440b      	add	r3, r1
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10a      	bne.n	8005150 <vTaskSwitchContext+0x5c>
	__asm volatile
 800513a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513e:	f383 8811 	msr	BASEPRI, r3
 8005142:	f3bf 8f6f 	isb	sy
 8005146:	f3bf 8f4f 	dsb	sy
 800514a:	607b      	str	r3, [r7, #4]
}
 800514c:	bf00      	nop
 800514e:	e7fe      	b.n	800514e <vTaskSwitchContext+0x5a>
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	4613      	mov	r3, r2
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4a14      	ldr	r2, [pc, #80]	; (80051ac <vTaskSwitchContext+0xb8>)
 800515c:	4413      	add	r3, r2
 800515e:	613b      	str	r3, [r7, #16]
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	605a      	str	r2, [r3, #4]
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	3308      	adds	r3, #8
 8005172:	429a      	cmp	r2, r3
 8005174:	d104      	bne.n	8005180 <vTaskSwitchContext+0x8c>
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	4a0a      	ldr	r2, [pc, #40]	; (80051b0 <vTaskSwitchContext+0xbc>)
 8005188:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <vTaskSwitchContext+0xbc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	334c      	adds	r3, #76	; 0x4c
 8005190:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <vTaskSwitchContext+0xc0>)
 8005192:	6013      	str	r3, [r2, #0]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	2000046c 	.word	0x2000046c
 80051a4:	20000458 	.word	0x20000458
 80051a8:	2000044c 	.word	0x2000044c
 80051ac:	20000168 	.word	0x20000168
 80051b0:	20000164 	.word	0x20000164
 80051b4:	2000005c 	.word	0x2000005c

080051b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10a      	bne.n	80051de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	f383 8811 	msr	BASEPRI, r3
 80051d0:	f3bf 8f6f 	isb	sy
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	60fb      	str	r3, [r7, #12]
}
 80051da:	bf00      	nop
 80051dc:	e7fe      	b.n	80051dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80051de:	4b07      	ldr	r3, [pc, #28]	; (80051fc <vTaskPlaceOnEventList+0x44>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	3318      	adds	r3, #24
 80051e4:	4619      	mov	r1, r3
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f7fe fff5 	bl	80041d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80051ec:	2101      	movs	r1, #1
 80051ee:	6838      	ldr	r0, [r7, #0]
 80051f0:	f000 fb64 	bl	80058bc <prvAddCurrentTaskToDelayedList>
}
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20000164 	.word	0x20000164

08005200 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10a      	bne.n	800522c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	60fb      	str	r3, [r7, #12]
}
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	3318      	adds	r3, #24
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff f809 	bl	8004248 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005236:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <xTaskRemoveFromEventList+0xac>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d11c      	bne.n	8005278 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	3304      	adds	r3, #4
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff f800 	bl	8004248 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	2201      	movs	r2, #1
 800524e:	409a      	lsls	r2, r3
 8005250:	4b17      	ldr	r3, [pc, #92]	; (80052b0 <xTaskRemoveFromEventList+0xb0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4313      	orrs	r3, r2
 8005256:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <xTaskRemoveFromEventList+0xb0>)
 8005258:	6013      	str	r3, [r2, #0]
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4a13      	ldr	r2, [pc, #76]	; (80052b4 <xTaskRemoveFromEventList+0xb4>)
 8005268:	441a      	add	r2, r3
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	3304      	adds	r3, #4
 800526e:	4619      	mov	r1, r3
 8005270:	4610      	mov	r0, r2
 8005272:	f7fe ff8c 	bl	800418e <vListInsertEnd>
 8005276:	e005      	b.n	8005284 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	3318      	adds	r3, #24
 800527c:	4619      	mov	r1, r3
 800527e:	480e      	ldr	r0, [pc, #56]	; (80052b8 <xTaskRemoveFromEventList+0xb8>)
 8005280:	f7fe ff85 	bl	800418e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005288:	4b0c      	ldr	r3, [pc, #48]	; (80052bc <xTaskRemoveFromEventList+0xbc>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	429a      	cmp	r2, r3
 8005290:	d905      	bls.n	800529e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005292:	2301      	movs	r3, #1
 8005294:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <xTaskRemoveFromEventList+0xc0>)
 8005298:	2201      	movs	r2, #1
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e001      	b.n	80052a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80052a2:	697b      	ldr	r3, [r7, #20]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	2000046c 	.word	0x2000046c
 80052b0:	2000044c 	.word	0x2000044c
 80052b4:	20000168 	.word	0x20000168
 80052b8:	20000404 	.word	0x20000404
 80052bc:	20000164 	.word	0x20000164
 80052c0:	20000458 	.word	0x20000458

080052c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <vTaskInternalSetTimeOutState+0x24>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <vTaskInternalSetTimeOutState+0x28>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	605a      	str	r2, [r3, #4]
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	2000045c 	.word	0x2000045c
 80052ec:	20000448 	.word	0x20000448

080052f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005304:	f383 8811 	msr	BASEPRI, r3
 8005308:	f3bf 8f6f 	isb	sy
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	613b      	str	r3, [r7, #16]
}
 8005312:	bf00      	nop
 8005314:	e7fe      	b.n	8005314 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10a      	bne.n	8005332 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	60fb      	str	r3, [r7, #12]
}
 800532e:	bf00      	nop
 8005330:	e7fe      	b.n	8005330 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005332:	f000 fc57 	bl	8005be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <xTaskCheckForTimeOut+0xbc>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	69ba      	ldr	r2, [r7, #24]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d102      	bne.n	8005356 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	61fb      	str	r3, [r7, #28]
 8005354:	e023      	b.n	800539e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	4b15      	ldr	r3, [pc, #84]	; (80053b0 <xTaskCheckForTimeOut+0xc0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d007      	beq.n	8005372 <xTaskCheckForTimeOut+0x82>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	429a      	cmp	r2, r3
 800536a:	d302      	bcc.n	8005372 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800536c:	2301      	movs	r3, #1
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	e015      	b.n	800539e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	429a      	cmp	r2, r3
 800537a:	d20b      	bcs.n	8005394 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	1ad2      	subs	r2, r2, r3
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff ff9b 	bl	80052c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800538e:	2300      	movs	r3, #0
 8005390:	61fb      	str	r3, [r7, #28]
 8005392:	e004      	b.n	800539e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800539a:	2301      	movs	r3, #1
 800539c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800539e:	f000 fc51 	bl	8005c44 <vPortExitCritical>

	return xReturn;
 80053a2:	69fb      	ldr	r3, [r7, #28]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3720      	adds	r7, #32
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	20000448 	.word	0x20000448
 80053b0:	2000045c 	.word	0x2000045c

080053b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80053b8:	4b03      	ldr	r3, [pc, #12]	; (80053c8 <vTaskMissedYield+0x14>)
 80053ba:	2201      	movs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
}
 80053be:	bf00      	nop
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr
 80053c8:	20000458 	.word	0x20000458

080053cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053d4:	f000 f852 	bl	800547c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <prvIdleTask+0x28>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d9f9      	bls.n	80053d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053e0:	4b05      	ldr	r3, [pc, #20]	; (80053f8 <prvIdleTask+0x2c>)
 80053e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053e6:	601a      	str	r2, [r3, #0]
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053f0:	e7f0      	b.n	80053d4 <prvIdleTask+0x8>
 80053f2:	bf00      	nop
 80053f4:	20000168 	.word	0x20000168
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005402:	2300      	movs	r3, #0
 8005404:	607b      	str	r3, [r7, #4]
 8005406:	e00c      	b.n	8005422 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	4613      	mov	r3, r2
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	4a12      	ldr	r2, [pc, #72]	; (800545c <prvInitialiseTaskLists+0x60>)
 8005414:	4413      	add	r3, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fe8c 	bl	8004134 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	3301      	adds	r3, #1
 8005420:	607b      	str	r3, [r7, #4]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b1e      	cmp	r3, #30
 8005426:	d9ef      	bls.n	8005408 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005428:	480d      	ldr	r0, [pc, #52]	; (8005460 <prvInitialiseTaskLists+0x64>)
 800542a:	f7fe fe83 	bl	8004134 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800542e:	480d      	ldr	r0, [pc, #52]	; (8005464 <prvInitialiseTaskLists+0x68>)
 8005430:	f7fe fe80 	bl	8004134 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005434:	480c      	ldr	r0, [pc, #48]	; (8005468 <prvInitialiseTaskLists+0x6c>)
 8005436:	f7fe fe7d 	bl	8004134 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800543a:	480c      	ldr	r0, [pc, #48]	; (800546c <prvInitialiseTaskLists+0x70>)
 800543c:	f7fe fe7a 	bl	8004134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005440:	480b      	ldr	r0, [pc, #44]	; (8005470 <prvInitialiseTaskLists+0x74>)
 8005442:	f7fe fe77 	bl	8004134 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005446:	4b0b      	ldr	r3, [pc, #44]	; (8005474 <prvInitialiseTaskLists+0x78>)
 8005448:	4a05      	ldr	r2, [pc, #20]	; (8005460 <prvInitialiseTaskLists+0x64>)
 800544a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800544c:	4b0a      	ldr	r3, [pc, #40]	; (8005478 <prvInitialiseTaskLists+0x7c>)
 800544e:	4a05      	ldr	r2, [pc, #20]	; (8005464 <prvInitialiseTaskLists+0x68>)
 8005450:	601a      	str	r2, [r3, #0]
}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000168 	.word	0x20000168
 8005460:	200003d4 	.word	0x200003d4
 8005464:	200003e8 	.word	0x200003e8
 8005468:	20000404 	.word	0x20000404
 800546c:	20000418 	.word	0x20000418
 8005470:	20000430 	.word	0x20000430
 8005474:	200003fc 	.word	0x200003fc
 8005478:	20000400 	.word	0x20000400

0800547c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005482:	e019      	b.n	80054b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005484:	f000 fbae 	bl	8005be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005488:	4b10      	ldr	r3, [pc, #64]	; (80054cc <prvCheckTasksWaitingTermination+0x50>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3304      	adds	r3, #4
 8005494:	4618      	mov	r0, r3
 8005496:	f7fe fed7 	bl	8004248 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800549a:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <prvCheckTasksWaitingTermination+0x54>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3b01      	subs	r3, #1
 80054a0:	4a0b      	ldr	r2, [pc, #44]	; (80054d0 <prvCheckTasksWaitingTermination+0x54>)
 80054a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <prvCheckTasksWaitingTermination+0x58>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3b01      	subs	r3, #1
 80054aa:	4a0a      	ldr	r2, [pc, #40]	; (80054d4 <prvCheckTasksWaitingTermination+0x58>)
 80054ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80054ae:	f000 fbc9 	bl	8005c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f810 	bl	80054d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054b8:	4b06      	ldr	r3, [pc, #24]	; (80054d4 <prvCheckTasksWaitingTermination+0x58>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e1      	bne.n	8005484 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20000418 	.word	0x20000418
 80054d0:	20000444 	.word	0x20000444
 80054d4:	2000042c 	.word	0x2000042c

080054d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	334c      	adds	r3, #76	; 0x4c
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fe51 	bl	800618c <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fd26 	bl	8005f40 <vPortFree>
			vPortFree( pxTCB );
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fd23 	bl	8005f40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054fa:	bf00      	nop
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800550a:	4b0c      	ldr	r3, [pc, #48]	; (800553c <prvResetNextTaskUnblockTime+0x38>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005514:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <prvResetNextTaskUnblockTime+0x3c>)
 8005516:	f04f 32ff 	mov.w	r2, #4294967295
 800551a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800551c:	e008      	b.n	8005530 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800551e:	4b07      	ldr	r3, [pc, #28]	; (800553c <prvResetNextTaskUnblockTime+0x38>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4a04      	ldr	r2, [pc, #16]	; (8005540 <prvResetNextTaskUnblockTime+0x3c>)
 800552e:	6013      	str	r3, [r2, #0]
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	200003fc 	.word	0x200003fc
 8005540:	20000464 	.word	0x20000464

08005544 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <xTaskGetSchedulerState+0x34>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005552:	2301      	movs	r3, #1
 8005554:	607b      	str	r3, [r7, #4]
 8005556:	e008      	b.n	800556a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <xTaskGetSchedulerState+0x38>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005560:	2302      	movs	r3, #2
 8005562:	607b      	str	r3, [r7, #4]
 8005564:	e001      	b.n	800556a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005566:	2300      	movs	r3, #0
 8005568:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800556a:	687b      	ldr	r3, [r7, #4]
	}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	20000450 	.word	0x20000450
 800557c:	2000046c 	.word	0x2000046c

08005580 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d05e      	beq.n	8005654 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	4b31      	ldr	r3, [pc, #196]	; (8005660 <xTaskPriorityInherit+0xe0>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d24e      	bcs.n	8005642 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	db06      	blt.n	80055ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ac:	4b2c      	ldr	r3, [pc, #176]	; (8005660 <xTaskPriorityInherit+0xe0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	f1c3 021f 	rsb	r2, r3, #31
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6959      	ldr	r1, [r3, #20]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4a26      	ldr	r2, [pc, #152]	; (8005664 <xTaskPriorityInherit+0xe4>)
 80055cc:	4413      	add	r3, r2
 80055ce:	4299      	cmp	r1, r3
 80055d0:	d12f      	bne.n	8005632 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	3304      	adds	r3, #4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe fe36 	bl	8004248 <uxListRemove>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	2201      	movs	r2, #1
 80055e8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ec:	43da      	mvns	r2, r3
 80055ee:	4b1e      	ldr	r3, [pc, #120]	; (8005668 <xTaskPriorityInherit+0xe8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4013      	ands	r3, r2
 80055f4:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <xTaskPriorityInherit+0xe8>)
 80055f6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055f8:	4b19      	ldr	r3, [pc, #100]	; (8005660 <xTaskPriorityInherit+0xe0>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	2201      	movs	r2, #1
 8005608:	409a      	lsls	r2, r3
 800560a:	4b17      	ldr	r3, [pc, #92]	; (8005668 <xTaskPriorityInherit+0xe8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	4a15      	ldr	r2, [pc, #84]	; (8005668 <xTaskPriorityInherit+0xe8>)
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	4a10      	ldr	r2, [pc, #64]	; (8005664 <xTaskPriorityInherit+0xe4>)
 8005622:	441a      	add	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	3304      	adds	r3, #4
 8005628:	4619      	mov	r1, r3
 800562a:	4610      	mov	r0, r2
 800562c:	f7fe fdaf 	bl	800418e <vListInsertEnd>
 8005630:	e004      	b.n	800563c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <xTaskPriorityInherit+0xe0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800563c:	2301      	movs	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
 8005640:	e008      	b.n	8005654 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <xTaskPriorityInherit+0xe0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	429a      	cmp	r2, r3
 800564e:	d201      	bcs.n	8005654 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005650:	2301      	movs	r3, #1
 8005652:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005654:	68fb      	ldr	r3, [r7, #12]
	}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	20000164 	.word	0x20000164
 8005664:	20000168 	.word	0x20000168
 8005668:	2000044c 	.word	0x2000044c

0800566c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005678:	2300      	movs	r3, #0
 800567a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d06e      	beq.n	8005760 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005682:	4b3a      	ldr	r3, [pc, #232]	; (800576c <xTaskPriorityDisinherit+0x100>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	429a      	cmp	r2, r3
 800568a:	d00a      	beq.n	80056a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	60fb      	str	r3, [r7, #12]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d10a      	bne.n	80056c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	60bb      	str	r3, [r7, #8]
}
 80056bc:	bf00      	nop
 80056be:	e7fe      	b.n	80056be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c4:	1e5a      	subs	r2, r3, #1
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d044      	beq.n	8005760 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d140      	bne.n	8005760 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fe fdb0 	bl	8004248 <uxListRemove>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d115      	bne.n	800571a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f2:	491f      	ldr	r1, [pc, #124]	; (8005770 <xTaskPriorityDisinherit+0x104>)
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10a      	bne.n	800571a <xTaskPriorityDisinherit+0xae>
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005708:	2201      	movs	r2, #1
 800570a:	fa02 f303 	lsl.w	r3, r2, r3
 800570e:	43da      	mvns	r2, r3
 8005710:	4b18      	ldr	r3, [pc, #96]	; (8005774 <xTaskPriorityDisinherit+0x108>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4013      	ands	r3, r2
 8005716:	4a17      	ldr	r2, [pc, #92]	; (8005774 <xTaskPriorityDisinherit+0x108>)
 8005718:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800571a:	693b      	ldr	r3, [r7, #16]
 800571c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005726:	f1c3 021f 	rsb	r2, r3, #31
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005732:	2201      	movs	r2, #1
 8005734:	409a      	lsls	r2, r3
 8005736:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <xTaskPriorityDisinherit+0x108>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4313      	orrs	r3, r2
 800573c:	4a0d      	ldr	r2, [pc, #52]	; (8005774 <xTaskPriorityDisinherit+0x108>)
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	4a08      	ldr	r2, [pc, #32]	; (8005770 <xTaskPriorityDisinherit+0x104>)
 800574e:	441a      	add	r2, r3
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	3304      	adds	r3, #4
 8005754:	4619      	mov	r1, r3
 8005756:	4610      	mov	r0, r2
 8005758:	f7fe fd19 	bl	800418e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800575c:	2301      	movs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005760:	697b      	ldr	r3, [r7, #20]
	}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000164 	.word	0x20000164
 8005770:	20000168 	.word	0x20000168
 8005774:	2000044c 	.word	0x2000044c

08005778 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005786:	2301      	movs	r3, #1
 8005788:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d077      	beq.n	8005880 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10a      	bne.n	80057ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	60fb      	str	r3, [r7, #12]
}
 80057aa:	bf00      	nop
 80057ac:	e7fe      	b.n	80057ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d902      	bls.n	80057be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	e002      	b.n	80057c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d058      	beq.n	8005880 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d153      	bne.n	8005880 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80057d8:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d10a      	bne.n	80057f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	60bb      	str	r3, [r7, #8]
}
 80057f4:	bf00      	nop
 80057f6:	e7fe      	b.n	80057f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	69fa      	ldr	r2, [r7, #28]
 8005802:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	2b00      	cmp	r3, #0
 800580a:	db04      	blt.n	8005816 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f1c3 021f 	rsb	r2, r3, #31
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	6959      	ldr	r1, [r3, #20]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4613      	mov	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4413      	add	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4a19      	ldr	r2, [pc, #100]	; (800588c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005826:	4413      	add	r3, r2
 8005828:	4299      	cmp	r1, r3
 800582a:	d129      	bne.n	8005880 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	3304      	adds	r3, #4
 8005830:	4618      	mov	r0, r3
 8005832:	f7fe fd09 	bl	8004248 <uxListRemove>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	2201      	movs	r2, #1
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	43da      	mvns	r2, r3
 8005848:	4b11      	ldr	r3, [pc, #68]	; (8005890 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4013      	ands	r3, r2
 800584e:	4a10      	ldr	r2, [pc, #64]	; (8005890 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005850:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	2201      	movs	r2, #1
 8005858:	409a      	lsls	r2, r3
 800585a:	4b0d      	ldr	r3, [pc, #52]	; (8005890 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4313      	orrs	r3, r2
 8005860:	4a0b      	ldr	r2, [pc, #44]	; (8005890 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005862:	6013      	str	r3, [r2, #0]
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	4a06      	ldr	r2, [pc, #24]	; (800588c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005872:	441a      	add	r2, r3
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	3304      	adds	r3, #4
 8005878:	4619      	mov	r1, r3
 800587a:	4610      	mov	r0, r2
 800587c:	f7fe fc87 	bl	800418e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005880:	bf00      	nop
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	20000164 	.word	0x20000164
 800588c:	20000168 	.word	0x20000168
 8005890:	2000044c 	.word	0x2000044c

08005894 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005894:	b480      	push	{r7}
 8005896:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005898:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d004      	beq.n	80058aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80058a0:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058a6:	3201      	adds	r2, #1
 80058a8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80058aa:	4b03      	ldr	r3, [pc, #12]	; (80058b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80058ac:	681b      	ldr	r3, [r3, #0]
	}
 80058ae:	4618      	mov	r0, r3
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	20000164 	.word	0x20000164

080058bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80058c6:	4b29      	ldr	r3, [pc, #164]	; (800596c <prvAddCurrentTaskToDelayedList+0xb0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058cc:	4b28      	ldr	r3, [pc, #160]	; (8005970 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3304      	adds	r3, #4
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe fcb8 	bl	8004248 <uxListRemove>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10b      	bne.n	80058f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80058de:	4b24      	ldr	r3, [pc, #144]	; (8005970 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e4:	2201      	movs	r2, #1
 80058e6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ea:	43da      	mvns	r2, r3
 80058ec:	4b21      	ldr	r3, [pc, #132]	; (8005974 <prvAddCurrentTaskToDelayedList+0xb8>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4013      	ands	r3, r2
 80058f2:	4a20      	ldr	r2, [pc, #128]	; (8005974 <prvAddCurrentTaskToDelayedList+0xb8>)
 80058f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fc:	d10a      	bne.n	8005914 <prvAddCurrentTaskToDelayedList+0x58>
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d007      	beq.n	8005914 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005904:	4b1a      	ldr	r3, [pc, #104]	; (8005970 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3304      	adds	r3, #4
 800590a:	4619      	mov	r1, r3
 800590c:	481a      	ldr	r0, [pc, #104]	; (8005978 <prvAddCurrentTaskToDelayedList+0xbc>)
 800590e:	f7fe fc3e 	bl	800418e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005912:	e026      	b.n	8005962 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4413      	add	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800591c:	4b14      	ldr	r3, [pc, #80]	; (8005970 <prvAddCurrentTaskToDelayedList+0xb4>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	429a      	cmp	r2, r3
 800592a:	d209      	bcs.n	8005940 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800592c:	4b13      	ldr	r3, [pc, #76]	; (800597c <prvAddCurrentTaskToDelayedList+0xc0>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	3304      	adds	r3, #4
 8005936:	4619      	mov	r1, r3
 8005938:	4610      	mov	r0, r2
 800593a:	f7fe fc4c 	bl	80041d6 <vListInsert>
}
 800593e:	e010      	b.n	8005962 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005940:	4b0f      	ldr	r3, [pc, #60]	; (8005980 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3304      	adds	r3, #4
 800594a:	4619      	mov	r1, r3
 800594c:	4610      	mov	r0, r2
 800594e:	f7fe fc42 	bl	80041d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005952:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	429a      	cmp	r2, r3
 800595a:	d202      	bcs.n	8005962 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800595c:	4a09      	ldr	r2, [pc, #36]	; (8005984 <prvAddCurrentTaskToDelayedList+0xc8>)
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	6013      	str	r3, [r2, #0]
}
 8005962:	bf00      	nop
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	20000448 	.word	0x20000448
 8005970:	20000164 	.word	0x20000164
 8005974:	2000044c 	.word	0x2000044c
 8005978:	20000430 	.word	0x20000430
 800597c:	20000400 	.word	0x20000400
 8005980:	200003fc 	.word	0x200003fc
 8005984:	20000464 	.word	0x20000464

08005988 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3b04      	subs	r3, #4
 8005998:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80059a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	3b04      	subs	r3, #4
 80059a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f023 0201 	bic.w	r2, r3, #1
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3b04      	subs	r3, #4
 80059b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80059b8:	4a0c      	ldr	r2, [pc, #48]	; (80059ec <pxPortInitialiseStack+0x64>)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3b14      	subs	r3, #20
 80059c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3b04      	subs	r3, #4
 80059ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f06f 0202 	mvn.w	r2, #2
 80059d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	3b20      	subs	r3, #32
 80059dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80059de:	68fb      	ldr	r3, [r7, #12]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	080059f1 	.word	0x080059f1

080059f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80059fa:	4b12      	ldr	r3, [pc, #72]	; (8005a44 <prvTaskExitError+0x54>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a02:	d00a      	beq.n	8005a1a <prvTaskExitError+0x2a>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	60fb      	str	r3, [r7, #12]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <prvTaskExitError+0x28>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	60bb      	str	r3, [r7, #8]
}
 8005a2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005a2e:	bf00      	nop
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d0fc      	beq.n	8005a30 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	2000000c 	.word	0x2000000c
	...

08005a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005a50:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <pxCurrentTCBConst2>)
 8005a52:	6819      	ldr	r1, [r3, #0]
 8005a54:	6808      	ldr	r0, [r1, #0]
 8005a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5a:	f380 8809 	msr	PSP, r0
 8005a5e:	f3bf 8f6f 	isb	sy
 8005a62:	f04f 0000 	mov.w	r0, #0
 8005a66:	f380 8811 	msr	BASEPRI, r0
 8005a6a:	4770      	bx	lr
 8005a6c:	f3af 8000 	nop.w

08005a70 <pxCurrentTCBConst2>:
 8005a70:	20000164 	.word	0x20000164
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop

08005a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a78:	4808      	ldr	r0, [pc, #32]	; (8005a9c <prvPortStartFirstTask+0x24>)
 8005a7a:	6800      	ldr	r0, [r0, #0]
 8005a7c:	6800      	ldr	r0, [r0, #0]
 8005a7e:	f380 8808 	msr	MSP, r0
 8005a82:	f04f 0000 	mov.w	r0, #0
 8005a86:	f380 8814 	msr	CONTROL, r0
 8005a8a:	b662      	cpsie	i
 8005a8c:	b661      	cpsie	f
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	f3bf 8f6f 	isb	sy
 8005a96:	df00      	svc	0
 8005a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a9a:	bf00      	nop
 8005a9c:	e000ed08 	.word	0xe000ed08

08005aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005aa6:	4b46      	ldr	r3, [pc, #280]	; (8005bc0 <xPortStartScheduler+0x120>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a46      	ldr	r2, [pc, #280]	; (8005bc4 <xPortStartScheduler+0x124>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d10a      	bne.n	8005ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8005ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab4:	f383 8811 	msr	BASEPRI, r3
 8005ab8:	f3bf 8f6f 	isb	sy
 8005abc:	f3bf 8f4f 	dsb	sy
 8005ac0:	613b      	str	r3, [r7, #16]
}
 8005ac2:	bf00      	nop
 8005ac4:	e7fe      	b.n	8005ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ac6:	4b3e      	ldr	r3, [pc, #248]	; (8005bc0 <xPortStartScheduler+0x120>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a3f      	ldr	r2, [pc, #252]	; (8005bc8 <xPortStartScheduler+0x128>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d10a      	bne.n	8005ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8005ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad4:	f383 8811 	msr	BASEPRI, r3
 8005ad8:	f3bf 8f6f 	isb	sy
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	60fb      	str	r3, [r7, #12]
}
 8005ae2:	bf00      	nop
 8005ae4:	e7fe      	b.n	8005ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005ae6:	4b39      	ldr	r3, [pc, #228]	; (8005bcc <xPortStartScheduler+0x12c>)
 8005ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	22ff      	movs	r2, #255	; 0xff
 8005af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b00:	78fb      	ldrb	r3, [r7, #3]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	4b31      	ldr	r3, [pc, #196]	; (8005bd0 <xPortStartScheduler+0x130>)
 8005b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b0e:	4b31      	ldr	r3, [pc, #196]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b10:	2207      	movs	r2, #7
 8005b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b14:	e009      	b.n	8005b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005b16:	4b2f      	ldr	r3, [pc, #188]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	3b01      	subs	r3, #1
 8005b1c:	4a2d      	ldr	r2, [pc, #180]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b2a:	78fb      	ldrb	r3, [r7, #3]
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b32:	2b80      	cmp	r3, #128	; 0x80
 8005b34:	d0ef      	beq.n	8005b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b36:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1c3 0307 	rsb	r3, r3, #7
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d00a      	beq.n	8005b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	60bb      	str	r3, [r7, #8]
}
 8005b54:	bf00      	nop
 8005b56:	e7fe      	b.n	8005b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005b58:	4b1e      	ldr	r3, [pc, #120]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	4a1d      	ldr	r2, [pc, #116]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005b62:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b6a:	4a1a      	ldr	r2, [pc, #104]	; (8005bd4 <xPortStartScheduler+0x134>)
 8005b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b76:	4b18      	ldr	r3, [pc, #96]	; (8005bd8 <xPortStartScheduler+0x138>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a17      	ldr	r2, [pc, #92]	; (8005bd8 <xPortStartScheduler+0x138>)
 8005b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b82:	4b15      	ldr	r3, [pc, #84]	; (8005bd8 <xPortStartScheduler+0x138>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a14      	ldr	r2, [pc, #80]	; (8005bd8 <xPortStartScheduler+0x138>)
 8005b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b8e:	f000 f8dd 	bl	8005d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b92:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <xPortStartScheduler+0x13c>)
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b98:	f000 f8fc 	bl	8005d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b9c:	4b10      	ldr	r3, [pc, #64]	; (8005be0 <xPortStartScheduler+0x140>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0f      	ldr	r2, [pc, #60]	; (8005be0 <xPortStartScheduler+0x140>)
 8005ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005ba8:	f7ff ff66 	bl	8005a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bac:	f7ff faa2 	bl	80050f4 <vTaskSwitchContext>
	prvTaskExitError();
 8005bb0:	f7ff ff1e 	bl	80059f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3718      	adds	r7, #24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	e000ed00 	.word	0xe000ed00
 8005bc4:	410fc271 	.word	0x410fc271
 8005bc8:	410fc270 	.word	0x410fc270
 8005bcc:	e000e400 	.word	0xe000e400
 8005bd0:	20000470 	.word	0x20000470
 8005bd4:	20000474 	.word	0x20000474
 8005bd8:	e000ed20 	.word	0xe000ed20
 8005bdc:	2000000c 	.word	0x2000000c
 8005be0:	e000ef34 	.word	0xe000ef34

08005be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	607b      	str	r3, [r7, #4]
}
 8005bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005bfe:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <vPortEnterCritical+0x58>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3301      	adds	r3, #1
 8005c04:	4a0d      	ldr	r2, [pc, #52]	; (8005c3c <vPortEnterCritical+0x58>)
 8005c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c08:	4b0c      	ldr	r3, [pc, #48]	; (8005c3c <vPortEnterCritical+0x58>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d10f      	bne.n	8005c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <vPortEnterCritical+0x5c>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8005c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c1e:	f383 8811 	msr	BASEPRI, r3
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	f3bf 8f4f 	dsb	sy
 8005c2a:	603b      	str	r3, [r7, #0]
}
 8005c2c:	bf00      	nop
 8005c2e:	e7fe      	b.n	8005c2e <vPortEnterCritical+0x4a>
	}
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	2000000c 	.word	0x2000000c
 8005c40:	e000ed04 	.word	0xe000ed04

08005c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c4a:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <vPortExitCritical+0x50>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d10a      	bne.n	8005c68 <vPortExitCritical+0x24>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	607b      	str	r3, [r7, #4]
}
 8005c64:	bf00      	nop
 8005c66:	e7fe      	b.n	8005c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005c68:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <vPortExitCritical+0x50>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	4a09      	ldr	r2, [pc, #36]	; (8005c94 <vPortExitCritical+0x50>)
 8005c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c72:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <vPortExitCritical+0x50>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d105      	bne.n	8005c86 <vPortExitCritical+0x42>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c86:	bf00      	nop
 8005c88:	370c      	adds	r7, #12
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr
 8005c92:	bf00      	nop
 8005c94:	2000000c 	.word	0x2000000c
	...

08005ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ca0:	f3ef 8009 	mrs	r0, PSP
 8005ca4:	f3bf 8f6f 	isb	sy
 8005ca8:	4b15      	ldr	r3, [pc, #84]	; (8005d00 <pxCurrentTCBConst>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	f01e 0f10 	tst.w	lr, #16
 8005cb0:	bf08      	it	eq
 8005cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cba:	6010      	str	r0, [r2, #0]
 8005cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005cc4:	f380 8811 	msr	BASEPRI, r0
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f7ff fa10 	bl	80050f4 <vTaskSwitchContext>
 8005cd4:	f04f 0000 	mov.w	r0, #0
 8005cd8:	f380 8811 	msr	BASEPRI, r0
 8005cdc:	bc09      	pop	{r0, r3}
 8005cde:	6819      	ldr	r1, [r3, #0]
 8005ce0:	6808      	ldr	r0, [r1, #0]
 8005ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ce6:	f01e 0f10 	tst.w	lr, #16
 8005cea:	bf08      	it	eq
 8005cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005cf0:	f380 8809 	msr	PSP, r0
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	f3af 8000 	nop.w

08005d00 <pxCurrentTCBConst>:
 8005d00:	20000164 	.word	0x20000164
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop

08005d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	607b      	str	r3, [r7, #4]
}
 8005d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d22:	f7ff f92f 	bl	8004f84 <xTaskIncrementTick>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d003      	beq.n	8005d34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <SysTick_Handler+0x40>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	2300      	movs	r3, #0
 8005d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	f383 8811 	msr	BASEPRI, r3
}
 8005d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	e000ed04 	.word	0xe000ed04

08005d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <vPortSetupTimerInterrupt+0x34>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d56:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <vPortSetupTimerInterrupt+0x38>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d5c:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <vPortSetupTimerInterrupt+0x3c>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a0a      	ldr	r2, [pc, #40]	; (8005d8c <vPortSetupTimerInterrupt+0x40>)
 8005d62:	fba2 2303 	umull	r2, r3, r2, r3
 8005d66:	099b      	lsrs	r3, r3, #6
 8005d68:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <vPortSetupTimerInterrupt+0x44>)
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d6e:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <vPortSetupTimerInterrupt+0x34>)
 8005d70:	2207      	movs	r2, #7
 8005d72:	601a      	str	r2, [r3, #0]
}
 8005d74:	bf00      	nop
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	e000e010 	.word	0xe000e010
 8005d84:	e000e018 	.word	0xe000e018
 8005d88:	20000000 	.word	0x20000000
 8005d8c:	10624dd3 	.word	0x10624dd3
 8005d90:	e000e014 	.word	0xe000e014

08005d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005da4 <vPortEnableVFP+0x10>
 8005d98:	6801      	ldr	r1, [r0, #0]
 8005d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d9e:	6001      	str	r1, [r0, #0]
 8005da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005da2:	bf00      	nop
 8005da4:	e000ed88 	.word	0xe000ed88

08005da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08a      	sub	sp, #40	; 0x28
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005db4:	f7ff f83c 	bl	8004e30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005db8:	4b5b      	ldr	r3, [pc, #364]	; (8005f28 <pvPortMalloc+0x180>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005dc0:	f000 f920 	bl	8006004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005dc4:	4b59      	ldr	r3, [pc, #356]	; (8005f2c <pvPortMalloc+0x184>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f040 8093 	bne.w	8005ef8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d01d      	beq.n	8005e14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005dd8:	2208      	movs	r2, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4413      	add	r3, r2
 8005dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d014      	beq.n	8005e14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f023 0307 	bic.w	r3, r3, #7
 8005df0:	3308      	adds	r3, #8
 8005df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f003 0307 	and.w	r3, r3, #7
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <pvPortMalloc+0x6c>
	__asm volatile
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	617b      	str	r3, [r7, #20]
}
 8005e10:	bf00      	nop
 8005e12:	e7fe      	b.n	8005e12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d06e      	beq.n	8005ef8 <pvPortMalloc+0x150>
 8005e1a:	4b45      	ldr	r3, [pc, #276]	; (8005f30 <pvPortMalloc+0x188>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d869      	bhi.n	8005ef8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e24:	4b43      	ldr	r3, [pc, #268]	; (8005f34 <pvPortMalloc+0x18c>)
 8005e26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e28:	4b42      	ldr	r3, [pc, #264]	; (8005f34 <pvPortMalloc+0x18c>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e2e:	e004      	b.n	8005e3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d903      	bls.n	8005e4c <pvPortMalloc+0xa4>
 8005e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f1      	bne.n	8005e30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e4c:	4b36      	ldr	r3, [pc, #216]	; (8005f28 <pvPortMalloc+0x180>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d050      	beq.n	8005ef8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e56:	6a3b      	ldr	r3, [r7, #32]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2208      	movs	r2, #8
 8005e5c:	4413      	add	r3, r2
 8005e5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	1ad2      	subs	r2, r2, r3
 8005e70:	2308      	movs	r3, #8
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d91f      	bls.n	8005eb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <pvPortMalloc+0xf8>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	613b      	str	r3, [r7, #16]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	1ad2      	subs	r2, r2, r3
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005eb2:	69b8      	ldr	r0, [r7, #24]
 8005eb4:	f000 f908 	bl	80060c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005eb8:	4b1d      	ldr	r3, [pc, #116]	; (8005f30 <pvPortMalloc+0x188>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	4a1b      	ldr	r2, [pc, #108]	; (8005f30 <pvPortMalloc+0x188>)
 8005ec4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ec6:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <pvPortMalloc+0x188>)
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <pvPortMalloc+0x190>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d203      	bcs.n	8005eda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005ed2:	4b17      	ldr	r3, [pc, #92]	; (8005f30 <pvPortMalloc+0x188>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a18      	ldr	r2, [pc, #96]	; (8005f38 <pvPortMalloc+0x190>)
 8005ed8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	4b13      	ldr	r3, [pc, #76]	; (8005f2c <pvPortMalloc+0x184>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005eee:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <pvPortMalloc+0x194>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	4a11      	ldr	r2, [pc, #68]	; (8005f3c <pvPortMalloc+0x194>)
 8005ef6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ef8:	f7fe ffa8 	bl	8004e4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <pvPortMalloc+0x174>
	__asm volatile
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	60fb      	str	r3, [r7, #12]
}
 8005f18:	bf00      	nop
 8005f1a:	e7fe      	b.n	8005f1a <pvPortMalloc+0x172>
	return pvReturn;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3728      	adds	r7, #40	; 0x28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20002c80 	.word	0x20002c80
 8005f2c:	20002c94 	.word	0x20002c94
 8005f30:	20002c84 	.word	0x20002c84
 8005f34:	20002c78 	.word	0x20002c78
 8005f38:	20002c88 	.word	0x20002c88
 8005f3c:	20002c8c 	.word	0x20002c8c

08005f40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d04d      	beq.n	8005fee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f52:	2308      	movs	r3, #8
 8005f54:	425b      	negs	r3, r3
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4413      	add	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	4b24      	ldr	r3, [pc, #144]	; (8005ff8 <vPortFree+0xb8>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4013      	ands	r3, r2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <vPortFree+0x44>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	60fb      	str	r3, [r7, #12]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00a      	beq.n	8005fa2 <vPortFree+0x62>
	__asm volatile
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	60bb      	str	r3, [r7, #8]
}
 8005f9e:	bf00      	nop
 8005fa0:	e7fe      	b.n	8005fa0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <vPortFree+0xb8>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4013      	ands	r3, r2
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01e      	beq.n	8005fee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d11a      	bne.n	8005fee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <vPortFree+0xb8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	43db      	mvns	r3, r3
 8005fc2:	401a      	ands	r2, r3
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fc8:	f7fe ff32 	bl	8004e30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	4b0a      	ldr	r3, [pc, #40]	; (8005ffc <vPortFree+0xbc>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	4a09      	ldr	r2, [pc, #36]	; (8005ffc <vPortFree+0xbc>)
 8005fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fda:	6938      	ldr	r0, [r7, #16]
 8005fdc:	f000 f874 	bl	80060c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <vPortFree+0xc0>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	4a06      	ldr	r2, [pc, #24]	; (8006000 <vPortFree+0xc0>)
 8005fe8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005fea:	f7fe ff2f 	bl	8004e4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fee:	bf00      	nop
 8005ff0:	3718      	adds	r7, #24
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20002c94 	.word	0x20002c94
 8005ffc:	20002c84 	.word	0x20002c84
 8006000:	20002c90 	.word	0x20002c90

08006004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800600a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800600e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006010:	4b27      	ldr	r3, [pc, #156]	; (80060b0 <prvHeapInit+0xac>)
 8006012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f003 0307 	and.w	r3, r3, #7
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00c      	beq.n	8006038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	3307      	adds	r3, #7
 8006022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f023 0307 	bic.w	r3, r3, #7
 800602a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800602c:	68ba      	ldr	r2, [r7, #8]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	4a1f      	ldr	r2, [pc, #124]	; (80060b0 <prvHeapInit+0xac>)
 8006034:	4413      	add	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800603c:	4a1d      	ldr	r2, [pc, #116]	; (80060b4 <prvHeapInit+0xb0>)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006042:	4b1c      	ldr	r3, [pc, #112]	; (80060b4 <prvHeapInit+0xb0>)
 8006044:	2200      	movs	r2, #0
 8006046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	4413      	add	r3, r2
 800604e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006050:	2208      	movs	r2, #8
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0307 	bic.w	r3, r3, #7
 800605e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4a15      	ldr	r2, [pc, #84]	; (80060b8 <prvHeapInit+0xb4>)
 8006064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006066:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <prvHeapInit+0xb4>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2200      	movs	r2, #0
 800606c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800606e:	4b12      	ldr	r3, [pc, #72]	; (80060b8 <prvHeapInit+0xb4>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2200      	movs	r2, #0
 8006074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	1ad2      	subs	r2, r2, r3
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006084:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvHeapInit+0xb4>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	4a0a      	ldr	r2, [pc, #40]	; (80060bc <prvHeapInit+0xb8>)
 8006092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	4a09      	ldr	r2, [pc, #36]	; (80060c0 <prvHeapInit+0xbc>)
 800609a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800609c:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <prvHeapInit+0xc0>)
 800609e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80060a2:	601a      	str	r2, [r3, #0]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000478 	.word	0x20000478
 80060b4:	20002c78 	.word	0x20002c78
 80060b8:	20002c80 	.word	0x20002c80
 80060bc:	20002c88 	.word	0x20002c88
 80060c0:	20002c84 	.word	0x20002c84
 80060c4:	20002c94 	.word	0x20002c94

080060c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060d0:	4b28      	ldr	r3, [pc, #160]	; (8006174 <prvInsertBlockIntoFreeList+0xac>)
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e002      	b.n	80060dc <prvInsertBlockIntoFreeList+0x14>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	687a      	ldr	r2, [r7, #4]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d8f7      	bhi.n	80060d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	4413      	add	r3, r2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d108      	bne.n	800610a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	441a      	add	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	441a      	add	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d118      	bne.n	8006150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	4b15      	ldr	r3, [pc, #84]	; (8006178 <prvInsertBlockIntoFreeList+0xb0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	d00d      	beq.n	8006146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	441a      	add	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	e008      	b.n	8006158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006146:	4b0c      	ldr	r3, [pc, #48]	; (8006178 <prvInsertBlockIntoFreeList+0xb0>)
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	e003      	b.n	8006158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	429a      	cmp	r2, r3
 800615e:	d002      	beq.n	8006166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006166:	bf00      	nop
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	20002c78 	.word	0x20002c78
 8006178:	20002c80 	.word	0x20002c80

0800617c <memset>:
 800617c:	4402      	add	r2, r0
 800617e:	4603      	mov	r3, r0
 8006180:	4293      	cmp	r3, r2
 8006182:	d100      	bne.n	8006186 <memset+0xa>
 8006184:	4770      	bx	lr
 8006186:	f803 1b01 	strb.w	r1, [r3], #1
 800618a:	e7f9      	b.n	8006180 <memset+0x4>

0800618c <_reclaim_reent>:
 800618c:	4b29      	ldr	r3, [pc, #164]	; (8006234 <_reclaim_reent+0xa8>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4283      	cmp	r3, r0
 8006192:	b570      	push	{r4, r5, r6, lr}
 8006194:	4604      	mov	r4, r0
 8006196:	d04b      	beq.n	8006230 <_reclaim_reent+0xa4>
 8006198:	69c3      	ldr	r3, [r0, #28]
 800619a:	b143      	cbz	r3, 80061ae <_reclaim_reent+0x22>
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d144      	bne.n	800622c <_reclaim_reent+0xa0>
 80061a2:	69e3      	ldr	r3, [r4, #28]
 80061a4:	6819      	ldr	r1, [r3, #0]
 80061a6:	b111      	cbz	r1, 80061ae <_reclaim_reent+0x22>
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 f879 	bl	80062a0 <_free_r>
 80061ae:	6961      	ldr	r1, [r4, #20]
 80061b0:	b111      	cbz	r1, 80061b8 <_reclaim_reent+0x2c>
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 f874 	bl	80062a0 <_free_r>
 80061b8:	69e1      	ldr	r1, [r4, #28]
 80061ba:	b111      	cbz	r1, 80061c2 <_reclaim_reent+0x36>
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 f86f 	bl	80062a0 <_free_r>
 80061c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80061c4:	b111      	cbz	r1, 80061cc <_reclaim_reent+0x40>
 80061c6:	4620      	mov	r0, r4
 80061c8:	f000 f86a 	bl	80062a0 <_free_r>
 80061cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061ce:	b111      	cbz	r1, 80061d6 <_reclaim_reent+0x4a>
 80061d0:	4620      	mov	r0, r4
 80061d2:	f000 f865 	bl	80062a0 <_free_r>
 80061d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80061d8:	b111      	cbz	r1, 80061e0 <_reclaim_reent+0x54>
 80061da:	4620      	mov	r0, r4
 80061dc:	f000 f860 	bl	80062a0 <_free_r>
 80061e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80061e2:	b111      	cbz	r1, 80061ea <_reclaim_reent+0x5e>
 80061e4:	4620      	mov	r0, r4
 80061e6:	f000 f85b 	bl	80062a0 <_free_r>
 80061ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80061ec:	b111      	cbz	r1, 80061f4 <_reclaim_reent+0x68>
 80061ee:	4620      	mov	r0, r4
 80061f0:	f000 f856 	bl	80062a0 <_free_r>
 80061f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80061f6:	b111      	cbz	r1, 80061fe <_reclaim_reent+0x72>
 80061f8:	4620      	mov	r0, r4
 80061fa:	f000 f851 	bl	80062a0 <_free_r>
 80061fe:	6a23      	ldr	r3, [r4, #32]
 8006200:	b1b3      	cbz	r3, 8006230 <_reclaim_reent+0xa4>
 8006202:	4620      	mov	r0, r4
 8006204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006208:	4718      	bx	r3
 800620a:	5949      	ldr	r1, [r1, r5]
 800620c:	b941      	cbnz	r1, 8006220 <_reclaim_reent+0x94>
 800620e:	3504      	adds	r5, #4
 8006210:	69e3      	ldr	r3, [r4, #28]
 8006212:	2d80      	cmp	r5, #128	; 0x80
 8006214:	68d9      	ldr	r1, [r3, #12]
 8006216:	d1f8      	bne.n	800620a <_reclaim_reent+0x7e>
 8006218:	4620      	mov	r0, r4
 800621a:	f000 f841 	bl	80062a0 <_free_r>
 800621e:	e7c0      	b.n	80061a2 <_reclaim_reent+0x16>
 8006220:	680e      	ldr	r6, [r1, #0]
 8006222:	4620      	mov	r0, r4
 8006224:	f000 f83c 	bl	80062a0 <_free_r>
 8006228:	4631      	mov	r1, r6
 800622a:	e7ef      	b.n	800620c <_reclaim_reent+0x80>
 800622c:	2500      	movs	r5, #0
 800622e:	e7ef      	b.n	8006210 <_reclaim_reent+0x84>
 8006230:	bd70      	pop	{r4, r5, r6, pc}
 8006232:	bf00      	nop
 8006234:	2000005c 	.word	0x2000005c

08006238 <__libc_init_array>:
 8006238:	b570      	push	{r4, r5, r6, lr}
 800623a:	4d0d      	ldr	r5, [pc, #52]	; (8006270 <__libc_init_array+0x38>)
 800623c:	4c0d      	ldr	r4, [pc, #52]	; (8006274 <__libc_init_array+0x3c>)
 800623e:	1b64      	subs	r4, r4, r5
 8006240:	10a4      	asrs	r4, r4, #2
 8006242:	2600      	movs	r6, #0
 8006244:	42a6      	cmp	r6, r4
 8006246:	d109      	bne.n	800625c <__libc_init_array+0x24>
 8006248:	4d0b      	ldr	r5, [pc, #44]	; (8006278 <__libc_init_array+0x40>)
 800624a:	4c0c      	ldr	r4, [pc, #48]	; (800627c <__libc_init_array+0x44>)
 800624c:	f000 f880 	bl	8006350 <_init>
 8006250:	1b64      	subs	r4, r4, r5
 8006252:	10a4      	asrs	r4, r4, #2
 8006254:	2600      	movs	r6, #0
 8006256:	42a6      	cmp	r6, r4
 8006258:	d105      	bne.n	8006266 <__libc_init_array+0x2e>
 800625a:	bd70      	pop	{r4, r5, r6, pc}
 800625c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006260:	4798      	blx	r3
 8006262:	3601      	adds	r6, #1
 8006264:	e7ee      	b.n	8006244 <__libc_init_array+0xc>
 8006266:	f855 3b04 	ldr.w	r3, [r5], #4
 800626a:	4798      	blx	r3
 800626c:	3601      	adds	r6, #1
 800626e:	e7f2      	b.n	8006256 <__libc_init_array+0x1e>
 8006270:	0800642c 	.word	0x0800642c
 8006274:	0800642c 	.word	0x0800642c
 8006278:	0800642c 	.word	0x0800642c
 800627c:	08006430 	.word	0x08006430

08006280 <__retarget_lock_acquire_recursive>:
 8006280:	4770      	bx	lr

08006282 <__retarget_lock_release_recursive>:
 8006282:	4770      	bx	lr

08006284 <memcpy>:
 8006284:	440a      	add	r2, r1
 8006286:	4291      	cmp	r1, r2
 8006288:	f100 33ff 	add.w	r3, r0, #4294967295
 800628c:	d100      	bne.n	8006290 <memcpy+0xc>
 800628e:	4770      	bx	lr
 8006290:	b510      	push	{r4, lr}
 8006292:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800629a:	4291      	cmp	r1, r2
 800629c:	d1f9      	bne.n	8006292 <memcpy+0xe>
 800629e:	bd10      	pop	{r4, pc}

080062a0 <_free_r>:
 80062a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80062a2:	2900      	cmp	r1, #0
 80062a4:	d044      	beq.n	8006330 <_free_r+0x90>
 80062a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062aa:	9001      	str	r0, [sp, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f1a1 0404 	sub.w	r4, r1, #4
 80062b2:	bfb8      	it	lt
 80062b4:	18e4      	addlt	r4, r4, r3
 80062b6:	f000 f83f 	bl	8006338 <__malloc_lock>
 80062ba:	4a1e      	ldr	r2, [pc, #120]	; (8006334 <_free_r+0x94>)
 80062bc:	9801      	ldr	r0, [sp, #4]
 80062be:	6813      	ldr	r3, [r2, #0]
 80062c0:	b933      	cbnz	r3, 80062d0 <_free_r+0x30>
 80062c2:	6063      	str	r3, [r4, #4]
 80062c4:	6014      	str	r4, [r2, #0]
 80062c6:	b003      	add	sp, #12
 80062c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062cc:	f000 b83a 	b.w	8006344 <__malloc_unlock>
 80062d0:	42a3      	cmp	r3, r4
 80062d2:	d908      	bls.n	80062e6 <_free_r+0x46>
 80062d4:	6825      	ldr	r5, [r4, #0]
 80062d6:	1961      	adds	r1, r4, r5
 80062d8:	428b      	cmp	r3, r1
 80062da:	bf01      	itttt	eq
 80062dc:	6819      	ldreq	r1, [r3, #0]
 80062de:	685b      	ldreq	r3, [r3, #4]
 80062e0:	1949      	addeq	r1, r1, r5
 80062e2:	6021      	streq	r1, [r4, #0]
 80062e4:	e7ed      	b.n	80062c2 <_free_r+0x22>
 80062e6:	461a      	mov	r2, r3
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	b10b      	cbz	r3, 80062f0 <_free_r+0x50>
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	d9fa      	bls.n	80062e6 <_free_r+0x46>
 80062f0:	6811      	ldr	r1, [r2, #0]
 80062f2:	1855      	adds	r5, r2, r1
 80062f4:	42a5      	cmp	r5, r4
 80062f6:	d10b      	bne.n	8006310 <_free_r+0x70>
 80062f8:	6824      	ldr	r4, [r4, #0]
 80062fa:	4421      	add	r1, r4
 80062fc:	1854      	adds	r4, r2, r1
 80062fe:	42a3      	cmp	r3, r4
 8006300:	6011      	str	r1, [r2, #0]
 8006302:	d1e0      	bne.n	80062c6 <_free_r+0x26>
 8006304:	681c      	ldr	r4, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	6053      	str	r3, [r2, #4]
 800630a:	440c      	add	r4, r1
 800630c:	6014      	str	r4, [r2, #0]
 800630e:	e7da      	b.n	80062c6 <_free_r+0x26>
 8006310:	d902      	bls.n	8006318 <_free_r+0x78>
 8006312:	230c      	movs	r3, #12
 8006314:	6003      	str	r3, [r0, #0]
 8006316:	e7d6      	b.n	80062c6 <_free_r+0x26>
 8006318:	6825      	ldr	r5, [r4, #0]
 800631a:	1961      	adds	r1, r4, r5
 800631c:	428b      	cmp	r3, r1
 800631e:	bf04      	itt	eq
 8006320:	6819      	ldreq	r1, [r3, #0]
 8006322:	685b      	ldreq	r3, [r3, #4]
 8006324:	6063      	str	r3, [r4, #4]
 8006326:	bf04      	itt	eq
 8006328:	1949      	addeq	r1, r1, r5
 800632a:	6021      	streq	r1, [r4, #0]
 800632c:	6054      	str	r4, [r2, #4]
 800632e:	e7ca      	b.n	80062c6 <_free_r+0x26>
 8006330:	b003      	add	sp, #12
 8006332:	bd30      	pop	{r4, r5, pc}
 8006334:	20002dd4 	.word	0x20002dd4

08006338 <__malloc_lock>:
 8006338:	4801      	ldr	r0, [pc, #4]	; (8006340 <__malloc_lock+0x8>)
 800633a:	f7ff bfa1 	b.w	8006280 <__retarget_lock_acquire_recursive>
 800633e:	bf00      	nop
 8006340:	20002dd0 	.word	0x20002dd0

08006344 <__malloc_unlock>:
 8006344:	4801      	ldr	r0, [pc, #4]	; (800634c <__malloc_unlock+0x8>)
 8006346:	f7ff bf9c 	b.w	8006282 <__retarget_lock_release_recursive>
 800634a:	bf00      	nop
 800634c:	20002dd0 	.word	0x20002dd0

08006350 <_init>:
 8006350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006352:	bf00      	nop
 8006354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006356:	bc08      	pop	{r3}
 8006358:	469e      	mov	lr, r3
 800635a:	4770      	bx	lr

0800635c <_fini>:
 800635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800635e:	bf00      	nop
 8006360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006362:	bc08      	pop	{r3}
 8006364:	469e      	mov	lr, r3
 8006366:	4770      	bx	lr
