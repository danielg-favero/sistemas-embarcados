
protothread.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b0c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002ce4  08002ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d24  08002d24  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002d24  08002d24  00012d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d2c  08002d2c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d2c  08002d2c  00012d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d30  08002d30  00012d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002d34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000014  08002d48  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002d48  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b97f  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ac2  00000000  00000000  0002ba06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000940  00000000  00000000  0002d4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000071a  00000000  00000000  0002de08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c138  00000000  00000000  0002e522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b8f4  00000000  00000000  0004a65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2fa4  00000000  00000000  00055f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002510  00000000  00000000  00108ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010b404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002ccc 	.word	0x08002ccc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08002ccc 	.word	0x08002ccc

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b970 	b.w	8000520 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	460d      	mov	r5, r1
 8000260:	4604      	mov	r4, r0
 8000262:	460f      	mov	r7, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4694      	mov	ip, r2
 800026c:	d965      	bls.n	800033a <__udivmoddi4+0xe2>
 800026e:	fab2 f382 	clz	r3, r2
 8000272:	b143      	cbz	r3, 8000286 <__udivmoddi4+0x2e>
 8000274:	fa02 fc03 	lsl.w	ip, r2, r3
 8000278:	f1c3 0220 	rsb	r2, r3, #32
 800027c:	409f      	lsls	r7, r3
 800027e:	fa20 f202 	lsr.w	r2, r0, r2
 8000282:	4317      	orrs	r7, r2
 8000284:	409c      	lsls	r4, r3
 8000286:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028a:	fa1f f58c 	uxth.w	r5, ip
 800028e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000292:	0c22      	lsrs	r2, r4, #16
 8000294:	fb0e 7711 	mls	r7, lr, r1, r7
 8000298:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800029c:	fb01 f005 	mul.w	r0, r1, r5
 80002a0:	4290      	cmp	r0, r2
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a4:	eb1c 0202 	adds.w	r2, ip, r2
 80002a8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002ac:	f080 811c 	bcs.w	80004e8 <__udivmoddi4+0x290>
 80002b0:	4290      	cmp	r0, r2
 80002b2:	f240 8119 	bls.w	80004e8 <__udivmoddi4+0x290>
 80002b6:	3902      	subs	r1, #2
 80002b8:	4462      	add	r2, ip
 80002ba:	1a12      	subs	r2, r2, r0
 80002bc:	b2a4      	uxth	r4, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ca:	fb00 f505 	mul.w	r5, r0, r5
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	d90a      	bls.n	80002e8 <__udivmoddi4+0x90>
 80002d2:	eb1c 0404 	adds.w	r4, ip, r4
 80002d6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002da:	f080 8107 	bcs.w	80004ec <__udivmoddi4+0x294>
 80002de:	42a5      	cmp	r5, r4
 80002e0:	f240 8104 	bls.w	80004ec <__udivmoddi4+0x294>
 80002e4:	4464      	add	r4, ip
 80002e6:	3802      	subs	r0, #2
 80002e8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ec:	1b64      	subs	r4, r4, r5
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11e      	cbz	r6, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40dc      	lsrs	r4, r3
 80002f4:	2300      	movs	r3, #0
 80002f6:	e9c6 4300 	strd	r4, r3, [r6]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0xbc>
 8000302:	2e00      	cmp	r6, #0
 8000304:	f000 80ed 	beq.w	80004e2 <__udivmoddi4+0x28a>
 8000308:	2100      	movs	r1, #0
 800030a:	e9c6 0500 	strd	r0, r5, [r6]
 800030e:	4608      	mov	r0, r1
 8000310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000314:	fab3 f183 	clz	r1, r3
 8000318:	2900      	cmp	r1, #0
 800031a:	d149      	bne.n	80003b0 <__udivmoddi4+0x158>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d302      	bcc.n	8000326 <__udivmoddi4+0xce>
 8000320:	4282      	cmp	r2, r0
 8000322:	f200 80f8 	bhi.w	8000516 <__udivmoddi4+0x2be>
 8000326:	1a84      	subs	r4, r0, r2
 8000328:	eb65 0203 	sbc.w	r2, r5, r3
 800032c:	2001      	movs	r0, #1
 800032e:	4617      	mov	r7, r2
 8000330:	2e00      	cmp	r6, #0
 8000332:	d0e2      	beq.n	80002fa <__udivmoddi4+0xa2>
 8000334:	e9c6 4700 	strd	r4, r7, [r6]
 8000338:	e7df      	b.n	80002fa <__udivmoddi4+0xa2>
 800033a:	b902      	cbnz	r2, 800033e <__udivmoddi4+0xe6>
 800033c:	deff      	udf	#255	; 0xff
 800033e:	fab2 f382 	clz	r3, r2
 8000342:	2b00      	cmp	r3, #0
 8000344:	f040 8090 	bne.w	8000468 <__udivmoddi4+0x210>
 8000348:	1a8a      	subs	r2, r1, r2
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2101      	movs	r1, #1
 8000354:	fbb2 f5f7 	udiv	r5, r2, r7
 8000358:	fb07 2015 	mls	r0, r7, r5, r2
 800035c:	0c22      	lsrs	r2, r4, #16
 800035e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000362:	fb0e f005 	mul.w	r0, lr, r5
 8000366:	4290      	cmp	r0, r2
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x124>
 800036a:	eb1c 0202 	adds.w	r2, ip, r2
 800036e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x122>
 8000374:	4290      	cmp	r0, r2
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2b8>
 800037a:	4645      	mov	r5, r8
 800037c:	1a12      	subs	r2, r2, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb2 f0f7 	udiv	r0, r2, r7
 8000384:	fb07 2210 	mls	r2, r7, r0, r2
 8000388:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x14e>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 32ff 	add.w	r2, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x14c>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2c2>
 80003a4:	4610      	mov	r0, r2
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ae:	e79f      	b.n	80002f0 <__udivmoddi4+0x98>
 80003b0:	f1c1 0720 	rsb	r7, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa05 f401 	lsl.w	r4, r5, r1
 80003c2:	fa20 f307 	lsr.w	r3, r0, r7
 80003c6:	40fd      	lsrs	r5, r7
 80003c8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d2:	fa1f fe8c 	uxth.w	lr, ip
 80003d6:	fb09 5518 	mls	r5, r9, r8, r5
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e0:	fb08 f50e 	mul.w	r5, r8, lr
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ea:	fa00 f001 	lsl.w	r0, r0, r1
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b0>
 80003f0:	eb1c 0404 	adds.w	r4, ip, r4
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2b4>
 80003fc:	42a5      	cmp	r5, r4
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2b4>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4464      	add	r4, ip
 8000408:	1b64      	subs	r4, r4, r5
 800040a:	b29d      	uxth	r5, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000418:	fb03 fe0e 	mul.w	lr, r3, lr
 800041c:	45a6      	cmp	lr, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1da>
 8000420:	eb1c 0404 	adds.w	r4, ip, r4
 8000424:	f103 35ff 	add.w	r5, r3, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2ac>
 800042a:	45a6      	cmp	lr, r4
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2ac>
 800042e:	3b02      	subs	r3, #2
 8000430:	4464      	add	r4, ip
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fba3 9502 	umull	r9, r5, r3, r2
 800043a:	eba4 040e 	sub.w	r4, r4, lr
 800043e:	42ac      	cmp	r4, r5
 8000440:	46c8      	mov	r8, r9
 8000442:	46ae      	mov	lr, r5
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x29c>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x298>
 8000448:	b156      	cbz	r6, 8000460 <__udivmoddi4+0x208>
 800044a:	ebb0 0208 	subs.w	r2, r0, r8
 800044e:	eb64 040e 	sbc.w	r4, r4, lr
 8000452:	fa04 f707 	lsl.w	r7, r4, r7
 8000456:	40ca      	lsrs	r2, r1
 8000458:	40cc      	lsrs	r4, r1
 800045a:	4317      	orrs	r7, r2
 800045c:	e9c6 7400 	strd	r7, r4, [r6]
 8000460:	4618      	mov	r0, r3
 8000462:	2100      	movs	r1, #0
 8000464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000468:	f1c3 0120 	rsb	r1, r3, #32
 800046c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000470:	fa20 f201 	lsr.w	r2, r0, r1
 8000474:	fa25 f101 	lsr.w	r1, r5, r1
 8000478:	409d      	lsls	r5, r3
 800047a:	432a      	orrs	r2, r5
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb1 f0f7 	udiv	r0, r1, r7
 8000488:	fb07 1510 	mls	r5, r7, r0, r1
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000492:	fb00 f50e 	mul.w	r5, r0, lr
 8000496:	428d      	cmp	r5, r1
 8000498:	fa04 f403 	lsl.w	r4, r4, r3
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x258>
 800049e:	eb1c 0101 	adds.w	r1, ip, r1
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b0>
 80004a8:	428d      	cmp	r5, r1
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1b49      	subs	r1, r1, r5
 80004b2:	b292      	uxth	r2, r2
 80004b4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b8:	fb07 1115 	mls	r1, r7, r5, r1
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	fb05 f10e 	mul.w	r1, r5, lr
 80004c4:	4291      	cmp	r1, r2
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x282>
 80004c8:	eb1c 0202 	adds.w	r2, ip, r2
 80004cc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2a8>
 80004d2:	4291      	cmp	r1, r2
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2a8>
 80004d6:	3d02      	subs	r5, #2
 80004d8:	4462      	add	r2, ip
 80004da:	1a52      	subs	r2, r2, r1
 80004dc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0xfc>
 80004e2:	4631      	mov	r1, r6
 80004e4:	4630      	mov	r0, r6
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xa2>
 80004e8:	4639      	mov	r1, r7
 80004ea:	e6e6      	b.n	80002ba <__udivmoddi4+0x62>
 80004ec:	4610      	mov	r0, r2
 80004ee:	e6fb      	b.n	80002e8 <__udivmoddi4+0x90>
 80004f0:	4548      	cmp	r0, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f0>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004fc:	3b01      	subs	r3, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f0>
 8000500:	4645      	mov	r5, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x282>
 8000504:	462b      	mov	r3, r5
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1da>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x258>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b0>
 8000510:	3d02      	subs	r5, #2
 8000512:	4462      	add	r2, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x124>
 8000516:	4608      	mov	r0, r1
 8000518:	e70a      	b.n	8000330 <__udivmoddi4+0xd8>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x14e>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <protothread>:
/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef hlpuart1;
char data[5] = {'t', 'e', 's', 't', 'e', '\0'};

/* USER CODE BEGIN PV */
static char protothread(struct pt *pt) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	PT_BEGIN(pt);
 800052c:	2301      	movs	r3, #1
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	881b      	ldrh	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d002      	beq.n	800053e <protothread+0x1a>
 8000538:	2b3a      	cmp	r3, #58	; 0x3a
 800053a:	d00e      	beq.n	800055a <protothread+0x36>
 800053c:	e018      	b.n	8000570 <protothread+0x4c>

	while(1) {
		// Ligue o LED (nível lógico alto)
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800053e:	2120      	movs	r1, #32
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f000 fd3a 	bl	8000fbc <HAL_GPIO_TogglePin>
		SLEEP(1000);
 8000548:	f000 fac6 	bl	8000ad8 <HAL_GetTick>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <protothread+0x60>)
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	223a      	movs	r2, #58	; 0x3a
 8000558:	801a      	strh	r2, [r3, #0]
 800055a:	f000 fabd 	bl	8000ad8 <HAL_GetTick>
 800055e:	4603      	mov	r3, r0
 8000560:	4a08      	ldr	r2, [pc, #32]	; (8000584 <protothread+0x60>)
 8000562:	6812      	ldr	r2, [r2, #0]
 8000564:	1a9b      	subs	r3, r3, r2
 8000566:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800056a:	d8e8      	bhi.n	800053e <protothread+0x1a>
 800056c:	2300      	movs	r3, #0
 800056e:	e005      	b.n	800057c <protothread+0x58>
	}

	PT_END(pt);
 8000570:	2300      	movs	r3, #0
 8000572:	73fb      	strb	r3, [r7, #15]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	2200      	movs	r2, #0
 8000578:	801a      	strh	r2, [r3, #0]
 800057a:	2303      	movs	r3, #3
}
 800057c:	4618      	mov	r0, r3
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000030 	.word	0x20000030

08000588 <protothreadUART>:

static char protothreadUART(struct pt *pt) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	PT_BEGIN(pt);
 8000590:	2301      	movs	r3, #1
 8000592:	73fb      	strb	r3, [r7, #15]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d003      	beq.n	80005a4 <protothreadUART+0x1c>
 800059c:	2b45      	cmp	r3, #69	; 0x45
 800059e:	d015      	beq.n	80005cc <protothreadUART+0x44>
 80005a0:	e01f      	b.n	80005e2 <protothreadUART+0x5a>

	while(1) {
 80005a2:	bf00      	nop
		HAL_UART_Transmit(&hlpuart1, (uint8_t *)data, strlen(data), HAL_MAX_DELAY);
 80005a4:	4814      	ldr	r0, [pc, #80]	; (80005f8 <protothreadUART+0x70>)
 80005a6:	f7ff fe37 	bl	8000218 <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295
 80005b2:	4911      	ldr	r1, [pc, #68]	; (80005f8 <protothreadUART+0x70>)
 80005b4:	4811      	ldr	r0, [pc, #68]	; (80005fc <protothreadUART+0x74>)
 80005b6:	f001 fd43 	bl	8002040 <HAL_UART_Transmit>
		SLEEP(1000);
 80005ba:	f000 fa8d 	bl	8000ad8 <HAL_GetTick>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <protothreadUART+0x78>)
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2245      	movs	r2, #69	; 0x45
 80005ca:	801a      	strh	r2, [r3, #0]
 80005cc:	f000 fa84 	bl	8000ad8 <HAL_GetTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <protothreadUART+0x78>)
 80005d4:	6812      	ldr	r2, [r2, #0]
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005dc:	d8e1      	bhi.n	80005a2 <protothreadUART+0x1a>
 80005de:	2300      	movs	r3, #0
 80005e0:	e005      	b.n	80005ee <protothreadUART+0x66>
	}

	PT_END(pt);
 80005e2:	2300      	movs	r3, #0
 80005e4:	73fb      	strb	r3, [r7, #15]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	801a      	strh	r2, [r3, #0]
 80005ec:	2303      	movs	r3, #3
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000000 	.word	0x20000000
 80005fc:	20000034 	.word	0x20000034
 8000600:	20000030 	.word	0x20000030

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f000 fa00 	bl	8000a0e <HAL_Init>

  /* USER CODE BEGIN Init */
  struct pt pt1;
  struct pt ptUART;

  PT_INIT(&pt1);
 800060e:	2300      	movs	r3, #0
 8000610:	83bb      	strh	r3, [r7, #28]
  PT_INIT(&ptUART);
 8000612:	2300      	movs	r3, #0
 8000614:	833b      	strh	r3, [r7, #24]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f82b 	bl	8000670 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE(); // Ativar o clock para o GPIOA
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <main+0x68>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <main+0x68>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <main+0x68>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	683b      	ldr	r3, [r7, #0]

  GPIO_InitStruct.Pin = GPIO_PIN_5; // PA5
 8000632:	2320      	movs	r3, #32
 8000634:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Saída push-pull
 8000636:	2301      	movs	r3, #1
 8000638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL; // Sem resistor de pull-up/pull-down
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW; // Baixa velocidade
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4619      	mov	r1, r3
 8000646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800064a:	f000 fb35 	bl	8000cb8 <HAL_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 f8a5 	bl	800079c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000652:	f000 f859 	bl	8000708 <MX_LPUART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  protothread(&pt1);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff62 	bl	8000524 <protothread>
	  protothreadUART(&ptUART);
 8000660:	f107 0318 	add.w	r3, r7, #24
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff8f 	bl	8000588 <protothreadUART>
	  protothread(&pt1);
 800066a:	e7f4      	b.n	8000656 <main+0x52>
 800066c:	40021000 	.word	0x40021000

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	2238      	movs	r2, #56	; 0x38
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f002 faf8 	bl	8002c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 fcac 	bl	8000ff0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000698:	2302      	movs	r3, #2
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	2340      	movs	r3, #64	; 0x40
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006ae:	2304      	movs	r3, #4
 80006b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006b2:	2355      	movs	r3, #85	; 0x55
 80006b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b6:	2302      	movs	r3, #2
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006be:	2302      	movs	r3, #2
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0318 	add.w	r3, r7, #24
 80006c6:	4618      	mov	r0, r3
 80006c8:	f000 fd46 	bl	8001158 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006d2:	f000 f8b5 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2303      	movs	r3, #3
 80006dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2104      	movs	r1, #4
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 f84a 	bl	8001788 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006fa:	f000 f8a1 	bl	8000840 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	; 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800070e:	4a22      	ldr	r2, [pc, #136]	; (8000798 <MX_LPUART1_UART_Init+0x90>)
 8000710:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000712:	4b20      	ldr	r3, [pc, #128]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000718:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800071c:	2200      	movs	r2, #0
 800071e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000720:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000726:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000728:	2200      	movs	r2, #0
 800072a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800072e:	220c      	movs	r2, #12
 8000730:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000734:	2200      	movs	r2, #0
 8000736:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800073a:	2200      	movs	r2, #0
 800073c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000740:	2200      	movs	r2, #0
 8000742:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800074c:	f001 fc28 	bl	8001fa0 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f873 	bl	8000840 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 800075e:	f002 f9bf 	bl	8002ae0 <HAL_UARTEx_SetTxFifoThreshold>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000768:	f000 f86a 	bl	8000840 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800076c:	2100      	movs	r1, #0
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000770:	f002 f9f4 	bl	8002b5c <HAL_UARTEx_SetRxFifoThreshold>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800077a:	f000 f861 	bl	8000840 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_LPUART1_UART_Init+0x8c>)
 8000780:	f002 f975 	bl	8002a6e <HAL_UARTEx_DisableFifoMode>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800078a:	f000 f859 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000034 	.word	0x20000034
 8000798:	40008000 	.word	0x40008000

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b21      	ldr	r3, [pc, #132]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	4a20      	ldr	r2, [pc, #128]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007be:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ca:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007d0:	f043 0320 	orr.w	r3, r3, #32
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0320 	and.w	r3, r3, #32
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a14      	ldr	r2, [pc, #80]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_GPIO_Init+0x9c>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <MX_GPIO_Init+0x9c>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_GPIO_Init+0x9c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000818:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0xa0>)
 800082a:	f000 fa45 	bl	8000cb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40021000 	.word	0x40021000
 800083c:	48000800 	.word	0x48000800

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	e7fe      	b.n	8000848 <Error_Handler+0x8>
	...

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_MspInit+0x44>)
 8000854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000856:	4a0e      	ldr	r2, [pc, #56]	; (8000890 <HAL_MspInit+0x44>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6613      	str	r3, [r2, #96]	; 0x60
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <HAL_MspInit+0x44>)
 8000860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <HAL_MspInit+0x44>)
 800086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_MspInit+0x44>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000874:	6593      	str	r3, [r2, #88]	; 0x58
 8000876:	4b06      	ldr	r3, [pc, #24]	; (8000890 <HAL_MspInit+0x44>)
 8000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000882:	f000 fc59 	bl	8001138 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b09a      	sub	sp, #104	; 0x68
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	2244      	movs	r2, #68	; 0x44
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 f9dd 	bl	8002c74 <memset>
  if(huart->Instance==LPUART1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a1f      	ldr	r2, [pc, #124]	; (800093c <HAL_UART_MspInit+0xa8>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d136      	bne.n	8000932 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008c4:	2320      	movs	r3, #32
 80008c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 f975 	bl	8001bc0 <HAL_RCCEx_PeriphCLKConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008dc:	f7ff ffb0 	bl	8000840 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <HAL_UART_MspInit+0xac>)
 80008e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <HAL_UART_MspInit+0xac>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <HAL_UART_MspInit+0xac>)
 80008ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008f0:	f003 0301 	and.w	r3, r3, #1
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <HAL_UART_MspInit+0xac>)
 80008fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fc:	4a10      	ldr	r2, [pc, #64]	; (8000940 <HAL_UART_MspInit+0xac>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000904:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <HAL_UART_MspInit+0xac>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000910:	230c      	movs	r3, #12
 8000912:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000920:	230c      	movs	r3, #12
 8000922:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000928:	4619      	mov	r1, r3
 800092a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092e:	f000 f9c3 	bl	8000cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000932:	bf00      	nop
 8000934:	3768      	adds	r7, #104	; 0x68
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40008000 	.word	0x40008000
 8000940:	40021000 	.word	0x40021000

08000944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <NMI_Handler+0x4>

0800094a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094e:	e7fe      	b.n	800094e <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <MemManage_Handler+0x4>

08000956 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <BusFault_Handler+0x4>

0800095c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <UsageFault_Handler+0x4>

08000962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000966:	bf00      	nop
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr

0800097e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f890 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490e      	ldr	r1, [pc, #56]	; (80009fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0b      	ldr	r4, [pc, #44]	; (8000a08 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009e6:	f7ff ffd7 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ea:	f002 f94b 	bl	8002c84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ee:	f7ff fe09 	bl	8000604 <main>

080009f2 <LoopForever>:

LoopForever:
    b LoopForever
 80009f2:	e7fe      	b.n	80009f2 <LoopForever>
  ldr   r0, =_estack
 80009f4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a00:	08002d34 	.word	0x08002d34
  ldr r2, =_sbss
 8000a04:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a08:	200000c8 	.word	0x200000c8

08000a0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC1_2_IRQHandler>

08000a0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b082      	sub	sp, #8
 8000a12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a14:	2300      	movs	r3, #0
 8000a16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a18:	2003      	movs	r0, #3
 8000a1a:	f000 f91b 	bl	8000c54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a1e:	2000      	movs	r0, #0
 8000a20:	f000 f80e 	bl	8000a40 <HAL_InitTick>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d002      	beq.n	8000a30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	71fb      	strb	r3, [r7, #7]
 8000a2e:	e001      	b.n	8000a34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a30:	f7ff ff0c 	bl	800084c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a34:	79fb      	ldrb	r3, [r7, #7]

}
 8000a36:	4618      	mov	r0, r3
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <HAL_InitTick+0x68>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d022      	beq.n	8000a9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <HAL_InitTick+0x6c>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <HAL_InitTick+0x68>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a60:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f000 f918 	bl	8000c9e <HAL_SYSTICK_Config>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d10f      	bne.n	8000a94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b0f      	cmp	r3, #15
 8000a78:	d809      	bhi.n	8000a8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a82:	f000 f8f2 	bl	8000c6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a86:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_InitTick+0x70>)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	e007      	b.n	8000a9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	e004      	b.n	8000a9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a94:	2301      	movs	r3, #1
 8000a96:	73fb      	strb	r3, [r7, #15]
 8000a98:	e001      	b.n	8000a9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000010 	.word	0x20000010
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	2000000c 	.word	0x2000000c

08000ab4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_IncTick+0x1c>)
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_IncTick+0x20>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	4a03      	ldr	r2, [pc, #12]	; (8000ad0 <HAL_IncTick+0x1c>)
 8000ac4:	6013      	str	r3, [r2, #0]
}
 8000ac6:	bf00      	nop
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr
 8000ad0:	200000c4 	.word	0x200000c4
 8000ad4:	20000010 	.word	0x20000010

08000ad8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  return uwTick;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <HAL_GetTick+0x14>)
 8000ade:	681b      	ldr	r3, [r3, #0]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	200000c4 	.word	0x200000c4

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	db0a      	blt.n	8000b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	b2da      	uxtb	r2, r3
 8000b6c:	490c      	ldr	r1, [pc, #48]	; (8000ba0 <__NVIC_SetPriority+0x4c>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	0112      	lsls	r2, r2, #4
 8000b74:	b2d2      	uxtb	r2, r2
 8000b76:	440b      	add	r3, r1
 8000b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b7c:	e00a      	b.n	8000b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4908      	ldr	r1, [pc, #32]	; (8000ba4 <__NVIC_SetPriority+0x50>)
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	f003 030f 	and.w	r3, r3, #15
 8000b8a:	3b04      	subs	r3, #4
 8000b8c:	0112      	lsls	r2, r2, #4
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	440b      	add	r3, r1
 8000b92:	761a      	strb	r2, [r3, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000e100 	.word	0xe000e100
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b089      	sub	sp, #36	; 0x24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	f1c3 0307 	rsb	r3, r3, #7
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	bf28      	it	cs
 8000bc6:	2304      	movcs	r3, #4
 8000bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3304      	adds	r3, #4
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d902      	bls.n	8000bd8 <NVIC_EncodePriority+0x30>
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3b03      	subs	r3, #3
 8000bd6:	e000      	b.n	8000bda <NVIC_EncodePriority+0x32>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43da      	mvns	r2, r3
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	401a      	ands	r2, r3
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfa:	43d9      	mvns	r1, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c00:	4313      	orrs	r3, r2
         );
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3724      	adds	r7, #36	; 0x24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
	...

08000c10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c20:	d301      	bcc.n	8000c26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00f      	b.n	8000c46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <SysTick_Config+0x40>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2e:	210f      	movs	r1, #15
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f7ff ff8e 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <SysTick_Config+0x40>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <SysTick_Config+0x40>)
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	e000e010 	.word	0xe000e010

08000c54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff47 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b086      	sub	sp, #24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	4603      	mov	r3, r0
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff5e 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff90 	bl	8000ba8 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5f 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffb2 	bl	8000c10 <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b087      	sub	sp, #28
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cc6:	e15a      	b.n	8000f7e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	2101      	movs	r1, #1
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	f000 814c 	beq.w	8000f78 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0303 	and.w	r3, r3, #3
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d005      	beq.n	8000cf8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d130      	bne.n	8000d5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	2203      	movs	r2, #3
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68da      	ldr	r2, [r3, #12]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d2e:	2201      	movs	r2, #1
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	43db      	mvns	r3, r3
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	091b      	lsrs	r3, r3, #4
 8000d44:	f003 0201 	and.w	r2, r3, #1
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d017      	beq.n	8000d96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	2203      	movs	r2, #3
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	43db      	mvns	r3, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	689a      	ldr	r2, [r3, #8]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d123      	bne.n	8000dea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	08da      	lsrs	r2, r3, #3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	3208      	adds	r2, #8
 8000daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	009b      	lsls	r3, r3, #2
 8000db8:	220f      	movs	r2, #15
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f003 0307 	and.w	r3, r3, #7
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	08da      	lsrs	r2, r3, #3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3208      	adds	r2, #8
 8000de4:	6939      	ldr	r1, [r7, #16]
 8000de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0203 	and.w	r2, r3, #3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	f000 80a6 	beq.w	8000f78 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2c:	4b5b      	ldr	r3, [pc, #364]	; (8000f9c <HAL_GPIO_Init+0x2e4>)
 8000e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e30:	4a5a      	ldr	r2, [pc, #360]	; (8000f9c <HAL_GPIO_Init+0x2e4>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6613      	str	r3, [r2, #96]	; 0x60
 8000e38:	4b58      	ldr	r3, [pc, #352]	; (8000f9c <HAL_GPIO_Init+0x2e4>)
 8000e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e44:	4a56      	ldr	r2, [pc, #344]	; (8000fa0 <HAL_GPIO_Init+0x2e8>)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f003 0303 	and.w	r3, r3, #3
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e6e:	d01f      	beq.n	8000eb0 <HAL_GPIO_Init+0x1f8>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a4c      	ldr	r2, [pc, #304]	; (8000fa4 <HAL_GPIO_Init+0x2ec>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d019      	beq.n	8000eac <HAL_GPIO_Init+0x1f4>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a4b      	ldr	r2, [pc, #300]	; (8000fa8 <HAL_GPIO_Init+0x2f0>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d013      	beq.n	8000ea8 <HAL_GPIO_Init+0x1f0>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a4a      	ldr	r2, [pc, #296]	; (8000fac <HAL_GPIO_Init+0x2f4>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d00d      	beq.n	8000ea4 <HAL_GPIO_Init+0x1ec>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a49      	ldr	r2, [pc, #292]	; (8000fb0 <HAL_GPIO_Init+0x2f8>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x1e8>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a48      	ldr	r2, [pc, #288]	; (8000fb4 <HAL_GPIO_Init+0x2fc>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d101      	bne.n	8000e9c <HAL_GPIO_Init+0x1e4>
 8000e98:	2305      	movs	r3, #5
 8000e9a:	e00a      	b.n	8000eb2 <HAL_GPIO_Init+0x1fa>
 8000e9c:	2306      	movs	r3, #6
 8000e9e:	e008      	b.n	8000eb2 <HAL_GPIO_Init+0x1fa>
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	e006      	b.n	8000eb2 <HAL_GPIO_Init+0x1fa>
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e004      	b.n	8000eb2 <HAL_GPIO_Init+0x1fa>
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	e002      	b.n	8000eb2 <HAL_GPIO_Init+0x1fa>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <HAL_GPIO_Init+0x1fa>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	f002 0203 	and.w	r2, r2, #3
 8000eb8:	0092      	lsls	r2, r2, #2
 8000eba:	4093      	lsls	r3, r2
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec2:	4937      	ldr	r1, [pc, #220]	; (8000fa0 <HAL_GPIO_Init+0x2e8>)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ed0:	4b39      	ldr	r3, [pc, #228]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	4013      	ands	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d003      	beq.n	8000ef4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ef4:	4a30      	ldr	r2, [pc, #192]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000efa:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f1e:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43db      	mvns	r3, r3
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f72:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_GPIO_Init+0x300>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa22 f303 	lsr.w	r3, r2, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	f47f ae9d 	bne.w	8000cc8 <HAL_GPIO_Init+0x10>
  }
}
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	371c      	adds	r7, #28
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	48000400 	.word	0x48000400
 8000fa8:	48000800 	.word	0x48000800
 8000fac:	48000c00 	.word	0x48000c00
 8000fb0:	48001000 	.word	0x48001000
 8000fb4:	48001400 	.word	0x48001400
 8000fb8:	40010400 	.word	0x40010400

08000fbc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	695b      	ldr	r3, [r3, #20]
 8000fcc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fce:	887a      	ldrh	r2, [r7, #2]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	041a      	lsls	r2, r3, #16
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43d9      	mvns	r1, r3
 8000fda:	887b      	ldrh	r3, [r7, #2]
 8000fdc:	400b      	ands	r3, r1
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	619a      	str	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d141      	bne.n	8001082 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ffe:	4b4b      	ldr	r3, [pc, #300]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100a:	d131      	bne.n	8001070 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800100c:	4b47      	ldr	r3, [pc, #284]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800100e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001012:	4a46      	ldr	r2, [pc, #280]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001018:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800101c:	4b43      	ldr	r3, [pc, #268]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001024:	4a41      	ldr	r2, [pc, #260]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800102c:	4b40      	ldr	r3, [pc, #256]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2232      	movs	r2, #50	; 0x32
 8001032:	fb02 f303 	mul.w	r3, r2, r3
 8001036:	4a3f      	ldr	r2, [pc, #252]	; (8001134 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001038:	fba2 2303 	umull	r2, r3, r2, r3
 800103c:	0c9b      	lsrs	r3, r3, #18
 800103e:	3301      	adds	r3, #1
 8001040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001042:	e002      	b.n	800104a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	3b01      	subs	r3, #1
 8001048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001056:	d102      	bne.n	800105e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f2      	bne.n	8001044 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800105e:	4b33      	ldr	r3, [pc, #204]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800106a:	d158      	bne.n	800111e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e057      	b.n	8001120 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001070:	4b2e      	ldr	r3, [pc, #184]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001076:	4a2d      	ldr	r2, [pc, #180]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800107c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001080:	e04d      	b.n	800111e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001088:	d141      	bne.n	800110e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001096:	d131      	bne.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001098:	4b24      	ldr	r3, [pc, #144]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800109a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800109e:	4a23      	ldr	r2, [pc, #140]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	4b20      	ldr	r3, [pc, #128]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010b0:	4a1e      	ldr	r2, [pc, #120]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2232      	movs	r2, #50	; 0x32
 80010be:	fb02 f303 	mul.w	r3, r2, r3
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010c4:	fba2 2303 	umull	r2, r3, r2, r3
 80010c8:	0c9b      	lsrs	r3, r3, #18
 80010ca:	3301      	adds	r3, #1
 80010cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010ce:	e002      	b.n	80010d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3b01      	subs	r3, #1
 80010d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e2:	d102      	bne.n	80010ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f2      	bne.n	80010d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f6:	d112      	bne.n	800111e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010f8:	2303      	movs	r3, #3
 80010fa:	e011      	b.n	8001120 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001108:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800110c:	e007      	b.n	800111e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001118:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800111c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	40007000 	.word	0x40007000
 8001130:	20000008 	.word	0x20000008
 8001134:	431bde83 	.word	0x431bde83

08001138 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001142:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001146:	6093      	str	r3, [r2, #8]
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40007000 	.word	0x40007000

08001158 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e306      	b.n	8001778 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d075      	beq.n	8001262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001176:	4b97      	ldr	r3, [pc, #604]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001180:	4b94      	ldr	r3, [pc, #592]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	2b0c      	cmp	r3, #12
 800118e:	d102      	bne.n	8001196 <HAL_RCC_OscConfig+0x3e>
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b03      	cmp	r3, #3
 8001194:	d002      	beq.n	800119c <HAL_RCC_OscConfig+0x44>
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	2b08      	cmp	r3, #8
 800119a:	d10b      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	4b8d      	ldr	r3, [pc, #564]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d05b      	beq.n	8001260 <HAL_RCC_OscConfig+0x108>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d157      	bne.n	8001260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e2e1      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d106      	bne.n	80011cc <HAL_RCC_OscConfig+0x74>
 80011be:	4b85      	ldr	r3, [pc, #532]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a84      	ldr	r2, [pc, #528]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01d      	b.n	8001208 <HAL_RCC_OscConfig+0xb0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x98>
 80011d6:	4b7f      	ldr	r3, [pc, #508]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a7e      	ldr	r2, [pc, #504]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b7c      	ldr	r3, [pc, #496]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a7b      	ldr	r2, [pc, #492]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0xb0>
 80011f0:	4b78      	ldr	r3, [pc, #480]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a77      	ldr	r2, [pc, #476]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b75      	ldr	r3, [pc, #468]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a74      	ldr	r2, [pc, #464]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fc62 	bl	8000ad8 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fc5e 	bl	8000ad8 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e2a6      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800122a:	4b6a      	ldr	r3, [pc, #424]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0xc0>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fc4e 	bl	8000ad8 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fc4a 	bl	8000ad8 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e292      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001252:	4b60      	ldr	r3, [pc, #384]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0xe8>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d075      	beq.n	800135a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800126e:	4b59      	ldr	r3, [pc, #356]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001278:	4b56      	ldr	r3, [pc, #344]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b0c      	cmp	r3, #12
 8001286:	d102      	bne.n	800128e <HAL_RCC_OscConfig+0x136>
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	2b02      	cmp	r3, #2
 800128c:	d002      	beq.n	8001294 <HAL_RCC_OscConfig+0x13c>
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2b04      	cmp	r3, #4
 8001292:	d11f      	bne.n	80012d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001294:	4b4f      	ldr	r3, [pc, #316]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <HAL_RCC_OscConfig+0x154>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e265      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	061b      	lsls	r3, r3, #24
 80012ba:	4946      	ldr	r1, [pc, #280]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012c0:	4b45      	ldr	r3, [pc, #276]	; (80013d8 <HAL_RCC_OscConfig+0x280>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fbbb 	bl	8000a40 <HAL_InitTick>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d043      	beq.n	8001358 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e251      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d023      	beq.n	8001324 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012dc:	4b3d      	ldr	r3, [pc, #244]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a3c      	ldr	r2, [pc, #240]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80012e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e8:	f7ff fbf6 	bl	8000ad8 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012f0:	f7ff fbf2 	bl	8000ad8 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e23a      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	061b      	lsls	r3, r3, #24
 800131c:	492d      	ldr	r1, [pc, #180]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
 8001322:	e01a      	b.n	800135a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001324:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a2a      	ldr	r2, [pc, #168]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 800132a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800132e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fbd2 	bl	8000ad8 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001338:	f7ff fbce 	bl	8000ad8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e216      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x1e0>
 8001356:	e000      	b.n	800135a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001358:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d041      	beq.n	80013ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d01c      	beq.n	80013a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 8001370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001374:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800137e:	f7ff fbab 	bl	8000ad8 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff fba7 	bl	8000ad8 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1ef      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 800139a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0ef      	beq.n	8001386 <HAL_RCC_OscConfig+0x22e>
 80013a6:	e020      	b.n	80013ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80013aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ae:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <HAL_RCC_OscConfig+0x27c>)
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff fb8e 	bl	8000ad8 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013be:	e00d      	b.n	80013dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013c0:	f7ff fb8a 	bl	8000ad8 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d906      	bls.n	80013dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e1d2      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
 80013d8:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013dc:	4b8c      	ldr	r3, [pc, #560]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80013de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1ea      	bne.n	80013c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f000 80a6 	beq.w	8001544 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80013fc:	4b84      	ldr	r3, [pc, #528]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80013fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_RCC_OscConfig+0x2b4>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x2b6>
 800140c:	2300      	movs	r3, #0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00d      	beq.n	800142e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001412:	4b7f      	ldr	r3, [pc, #508]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	4a7e      	ldr	r2, [pc, #504]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 8001418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141c:	6593      	str	r3, [r2, #88]	; 0x58
 800141e:	4b7c      	ldr	r3, [pc, #496]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 8001420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800142a:	2301      	movs	r3, #1
 800142c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800142e:	4b79      	ldr	r3, [pc, #484]	; (8001614 <HAL_RCC_OscConfig+0x4bc>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001436:	2b00      	cmp	r3, #0
 8001438:	d118      	bne.n	800146c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800143a:	4b76      	ldr	r3, [pc, #472]	; (8001614 <HAL_RCC_OscConfig+0x4bc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a75      	ldr	r2, [pc, #468]	; (8001614 <HAL_RCC_OscConfig+0x4bc>)
 8001440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001446:	f7ff fb47 	bl	8000ad8 <HAL_GetTick>
 800144a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800144c:	e008      	b.n	8001460 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144e:	f7ff fb43 	bl	8000ad8 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e18b      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001460:	4b6c      	ldr	r3, [pc, #432]	; (8001614 <HAL_RCC_OscConfig+0x4bc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001468:	2b00      	cmp	r3, #0
 800146a:	d0f0      	beq.n	800144e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d108      	bne.n	8001486 <HAL_RCC_OscConfig+0x32e>
 8001474:	4b66      	ldr	r3, [pc, #408]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 8001476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800147a:	4a65      	ldr	r2, [pc, #404]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001484:	e024      	b.n	80014d0 <HAL_RCC_OscConfig+0x378>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b05      	cmp	r3, #5
 800148c:	d110      	bne.n	80014b0 <HAL_RCC_OscConfig+0x358>
 800148e:	4b60      	ldr	r3, [pc, #384]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 8001490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001494:	4a5e      	ldr	r2, [pc, #376]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 8001496:	f043 0304 	orr.w	r3, r3, #4
 800149a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800149e:	4b5c      	ldr	r3, [pc, #368]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80014a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a4:	4a5a      	ldr	r2, [pc, #360]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ae:	e00f      	b.n	80014d0 <HAL_RCC_OscConfig+0x378>
 80014b0:	4b57      	ldr	r3, [pc, #348]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80014b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014b6:	4a56      	ldr	r2, [pc, #344]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80014b8:	f023 0301 	bic.w	r3, r3, #1
 80014bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80014c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c6:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80014c8:	f023 0304 	bic.w	r3, r3, #4
 80014cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d016      	beq.n	8001506 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fafe 	bl	8000ad8 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014de:	e00a      	b.n	80014f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e0:	f7ff fafa 	bl	8000ad8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e140      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014f6:	4b46      	ldr	r3, [pc, #280]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80014f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0ed      	beq.n	80014e0 <HAL_RCC_OscConfig+0x388>
 8001504:	e015      	b.n	8001532 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001506:	f7ff fae7 	bl	8000ad8 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fae3 	bl	8000ad8 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	; 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e129      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001524:	4b3a      	ldr	r3, [pc, #232]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 8001526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ed      	bne.n	800150e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001532:	7ffb      	ldrb	r3, [r7, #31]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001538:	4b35      	ldr	r3, [pc, #212]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 800153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153c:	4a34      	ldr	r2, [pc, #208]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 800153e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001542:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	2b00      	cmp	r3, #0
 800154e:	d03c      	beq.n	80015ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d01c      	beq.n	8001592 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 800155a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800155e:	4a2c      	ldr	r2, [pc, #176]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff fab6 	bl	8000ad8 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001570:	f7ff fab2 	bl	8000ad8 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0fa      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001582:	4b23      	ldr	r3, [pc, #140]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 8001584:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0ef      	beq.n	8001570 <HAL_RCC_OscConfig+0x418>
 8001590:	e01b      	b.n	80015ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 8001594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001598:	4a1d      	ldr	r2, [pc, #116]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a2:	f7ff fa99 	bl	8000ad8 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015aa:	f7ff fa95 	bl	8000ad8 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0dd      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80015be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1ef      	bne.n	80015aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80d1 	beq.w	8001776 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b0c      	cmp	r3, #12
 80015de:	f000 808b 	beq.w	80016f8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d15e      	bne.n	80016a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b09      	ldr	r3, [pc, #36]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a08      	ldr	r2, [pc, #32]	; (8001610 <HAL_RCC_OscConfig+0x4b8>)
 80015f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff fa6f 	bl	8000ad8 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015fc:	e00c      	b.n	8001618 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fe:	f7ff fa6b 	bl	8000ad8 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d905      	bls.n	8001618 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0b3      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
 8001610:	40021000 	.word	0x40021000
 8001614:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001618:	4b59      	ldr	r3, [pc, #356]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d1ec      	bne.n	80015fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001624:	4b56      	ldr	r3, [pc, #344]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	4b56      	ldr	r3, [pc, #344]	; (8001784 <HAL_RCC_OscConfig+0x62c>)
 800162a:	4013      	ands	r3, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6a11      	ldr	r1, [r2, #32]
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001634:	3a01      	subs	r2, #1
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	4311      	orrs	r1, r2
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800163e:	0212      	lsls	r2, r2, #8
 8001640:	4311      	orrs	r1, r2
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001646:	0852      	lsrs	r2, r2, #1
 8001648:	3a01      	subs	r2, #1
 800164a:	0552      	lsls	r2, r2, #21
 800164c:	4311      	orrs	r1, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001652:	0852      	lsrs	r2, r2, #1
 8001654:	3a01      	subs	r2, #1
 8001656:	0652      	lsls	r2, r2, #25
 8001658:	4311      	orrs	r1, r2
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800165e:	06d2      	lsls	r2, r2, #27
 8001660:	430a      	orrs	r2, r1
 8001662:	4947      	ldr	r1, [pc, #284]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 8001664:	4313      	orrs	r3, r2
 8001666:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001668:	4b45      	ldr	r3, [pc, #276]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a44      	ldr	r2, [pc, #272]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 800166e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001674:	4b42      	ldr	r3, [pc, #264]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	4a41      	ldr	r2, [pc, #260]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 800167a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800167e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fa2a 	bl	8000ad8 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fa26 	bl	8000ad8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e06e      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169a:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x530>
 80016a6:	e066      	b.n	8001776 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a8:	4b35      	ldr	r3, [pc, #212]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a34      	ldr	r2, [pc, #208]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 80016ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016b4:	4b32      	ldr	r3, [pc, #200]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a31      	ldr	r2, [pc, #196]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 80016ba:	f023 0303 	bic.w	r3, r3, #3
 80016be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80016c0:	4b2f      	ldr	r3, [pc, #188]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a2e      	ldr	r2, [pc, #184]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 80016c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80016ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fa02 	bl	8000ad8 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff f9fe 	bl	8000ad8 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e046      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ea:	4b25      	ldr	r3, [pc, #148]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x580>
 80016f6:	e03e      	b.n	8001776 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	e039      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001704:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <HAL_RCC_OscConfig+0x628>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f003 0203 	and.w	r2, r3, #3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	429a      	cmp	r2, r3
 8001716:	d12c      	bne.n	8001772 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	3b01      	subs	r3, #1
 8001724:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001726:	429a      	cmp	r2, r3
 8001728:	d123      	bne.n	8001772 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001734:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001736:	429a      	cmp	r2, r3
 8001738:	d11b      	bne.n	8001772 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001744:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001746:	429a      	cmp	r2, r3
 8001748:	d113      	bne.n	8001772 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001754:	085b      	lsrs	r3, r3, #1
 8001756:	3b01      	subs	r3, #1
 8001758:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800175a:	429a      	cmp	r2, r3
 800175c:	d109      	bne.n	8001772 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	3b01      	subs	r3, #1
 800176c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3720      	adds	r7, #32
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000
 8001784:	019f800c 	.word	0x019f800c

08001788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e11e      	b.n	80019de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017a0:	4b91      	ldr	r3, [pc, #580]	; (80019e8 <HAL_RCC_ClockConfig+0x260>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d910      	bls.n	80017d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b8e      	ldr	r3, [pc, #568]	; (80019e8 <HAL_RCC_ClockConfig+0x260>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 020f 	bic.w	r2, r3, #15
 80017b6:	498c      	ldr	r1, [pc, #560]	; (80019e8 <HAL_RCC_ClockConfig+0x260>)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017be:	4b8a      	ldr	r3, [pc, #552]	; (80019e8 <HAL_RCC_ClockConfig+0x260>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d001      	beq.n	80017d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e106      	b.n	80019de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f003 0301 	and.w	r3, r3, #1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d073      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d129      	bne.n	8001838 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017e4:	4b81      	ldr	r3, [pc, #516]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0f4      	b.n	80019de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80017f4:	f000 f99e 	bl	8001b34 <RCC_GetSysClockFreqFromPLLSource>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4a7c      	ldr	r2, [pc, #496]	; (80019f0 <HAL_RCC_ClockConfig+0x268>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d93f      	bls.n	8001882 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001802:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d009      	beq.n	8001822 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001816:	2b00      	cmp	r3, #0
 8001818:	d033      	beq.n	8001882 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	d12f      	bne.n	8001882 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001822:	4b72      	ldr	r3, [pc, #456]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800182a:	4a70      	ldr	r2, [pc, #448]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 800182c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001830:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e024      	b.n	8001882 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d107      	bne.n	8001850 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001840:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d109      	bne.n	8001860 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e0c6      	b.n	80019de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001850:	4b66      	ldr	r3, [pc, #408]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e0be      	b.n	80019de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001860:	f000 f8ce 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 8001864:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	4a61      	ldr	r2, [pc, #388]	; (80019f0 <HAL_RCC_ClockConfig+0x268>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d909      	bls.n	8001882 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800186e:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001876:	4a5d      	ldr	r2, [pc, #372]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800187c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001882:	4b5a      	ldr	r3, [pc, #360]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f023 0203 	bic.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4957      	ldr	r1, [pc, #348]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001890:	4313      	orrs	r3, r2
 8001892:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001894:	f7ff f920 	bl	8000ad8 <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189c:	f7ff f91c 	bl	8000ad8 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e095      	b.n	80019de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	4b4e      	ldr	r3, [pc, #312]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 020c 	and.w	r2, r3, #12
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1eb      	bne.n	800189c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d023      	beq.n	8001918 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018dc:	4b43      	ldr	r3, [pc, #268]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	4a42      	ldr	r2, [pc, #264]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 80018e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d007      	beq.n	8001904 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80018f4:	4b3d      	ldr	r3, [pc, #244]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80018fc:	4a3b      	ldr	r2, [pc, #236]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 80018fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001902:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001904:	4b39      	ldr	r3, [pc, #228]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4936      	ldr	r1, [pc, #216]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001912:	4313      	orrs	r3, r2
 8001914:	608b      	str	r3, [r1, #8]
 8001916:	e008      	b.n	800192a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b80      	cmp	r3, #128	; 0x80
 800191c:	d105      	bne.n	800192a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800191e:	4b33      	ldr	r3, [pc, #204]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	4a32      	ldr	r2, [pc, #200]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001924:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001928:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <HAL_RCC_ClockConfig+0x260>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d21d      	bcs.n	8001974 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001938:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_RCC_ClockConfig+0x260>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f023 020f 	bic.w	r2, r3, #15
 8001940:	4929      	ldr	r1, [pc, #164]	; (80019e8 <HAL_RCC_ClockConfig+0x260>)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001948:	f7ff f8c6 	bl	8000ad8 <HAL_GetTick>
 800194c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	e00a      	b.n	8001966 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001950:	f7ff f8c2 	bl	8000ad8 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e03b      	b.n	80019de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <HAL_RCC_ClockConfig+0x260>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d1ed      	bne.n	8001950 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b1a      	ldr	r3, [pc, #104]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4917      	ldr	r1, [pc, #92]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	490f      	ldr	r1, [pc, #60]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019b2:	f000 f825 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_RCC_ClockConfig+0x264>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	490c      	ldr	r1, [pc, #48]	; (80019f4 <HAL_RCC_ClockConfig+0x26c>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	f003 031f 	and.w	r3, r3, #31
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_RCC_ClockConfig+0x270>)
 80019d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_RCC_ClockConfig+0x274>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff f832 	bl	8000a40 <HAL_InitTick>
 80019dc:	4603      	mov	r3, r0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40022000 	.word	0x40022000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	04c4b400 	.word	0x04c4b400
 80019f4:	08002ce4 	.word	0x08002ce4
 80019f8:	20000008 	.word	0x20000008
 80019fc:	2000000c 	.word	0x2000000c

08001a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a06:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	d102      	bne.n	8001a18 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a12:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	e047      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a18:	4b27      	ldr	r3, [pc, #156]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 030c 	and.w	r3, r3, #12
 8001a20:	2b08      	cmp	r3, #8
 8001a22:	d102      	bne.n	8001a2a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a24:	4b26      	ldr	r3, [pc, #152]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	e03e      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b0c      	cmp	r3, #12
 8001a34:	d136      	bne.n	8001aa4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a40:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d10c      	bne.n	8001a6e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a54:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a5e:	68d2      	ldr	r2, [r2, #12]
 8001a60:	0a12      	lsrs	r2, r2, #8
 8001a62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a66:	fb02 f303 	mul.w	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
      break;
 8001a6c:	e00c      	b.n	8001a88 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a6e:	4a13      	ldr	r2, [pc, #76]	; (8001abc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a76:	4a10      	ldr	r2, [pc, #64]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a78:	68d2      	ldr	r2, [r2, #12]
 8001a7a:	0a12      	lsrs	r2, r2, #8
 8001a7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
      break;
 8001a86:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0e5b      	lsrs	r3, r3, #25
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	3301      	adds	r3, #1
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	e001      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001aa8:	693b      	ldr	r3, [r7, #16]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	00f42400 	.word	0x00f42400
 8001ac0:	016e3600 	.word	0x016e3600

08001ac4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	20000008 	.word	0x20000008

08001adc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ae0:	f7ff fff0 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4904      	ldr	r1, [pc, #16]	; (8001b04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	f003 031f 	and.w	r3, r3, #31
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40021000 	.word	0x40021000
 8001b04:	08002cf4 	.word	0x08002cf4

08001b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b0c:	f7ff ffda 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001b10:	4602      	mov	r2, r0
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0adb      	lsrs	r3, r3, #11
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	4904      	ldr	r1, [pc, #16]	; (8001b30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b1e:	5ccb      	ldrb	r3, [r1, r3]
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	08002cf4 	.word	0x08002cf4

08001b34 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b3a:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	f003 0303 	and.w	r3, r3, #3
 8001b42:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b44:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d10c      	bne.n	8001b72 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b58:	4a17      	ldr	r2, [pc, #92]	; (8001bb8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b60:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b62:	68d2      	ldr	r2, [r2, #12]
 8001b64:	0a12      	lsrs	r2, r2, #8
 8001b66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
    break;
 8001b70:	e00c      	b.n	8001b8c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	; (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b7c:	68d2      	ldr	r2, [r2, #12]
 8001b7e:	0a12      	lsrs	r2, r2, #8
 8001b80:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b84:	fb02 f303 	mul.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
    break;
 8001b8a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	0e5b      	lsrs	r3, r3, #25
 8001b92:	f003 0303 	and.w	r3, r3, #3
 8001b96:	3301      	adds	r3, #1
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001ba6:	687b      	ldr	r3, [r7, #4]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	371c      	adds	r7, #28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	016e3600 	.word	0x016e3600
 8001bbc:	00f42400 	.word	0x00f42400

08001bc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001bc8:	2300      	movs	r3, #0
 8001bca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001bcc:	2300      	movs	r3, #0
 8001bce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 8098 	beq.w	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bde:	2300      	movs	r3, #0
 8001be0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be2:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10d      	bne.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf2:	4a3f      	ldr	r2, [pc, #252]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c06:	2301      	movs	r3, #1
 8001c08:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c0a:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a39      	ldr	r2, [pc, #228]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c16:	f7fe ff5f 	bl	8000ad8 <HAL_GetTick>
 8001c1a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c1c:	e009      	b.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1e:	f7fe ff5b 	bl	8000ad8 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d902      	bls.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	74fb      	strb	r3, [r7, #19]
        break;
 8001c30:	e005      	b.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c32:	4b30      	ldr	r3, [pc, #192]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0ef      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c3e:	7cfb      	ldrb	r3, [r7, #19]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d159      	bne.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c44:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c4e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01e      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d019      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c6c:	4b20      	ldr	r3, [pc, #128]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	4a1f      	ldr	r2, [pc, #124]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c82:	4a1b      	ldr	r2, [pc, #108]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c8c:	4a18      	ldr	r2, [pc, #96]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d016      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9e:	f7fe ff1b 	bl	8000ad8 <HAL_GetTick>
 8001ca2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca4:	e00b      	b.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ca6:	f7fe ff17 	bl	8000ad8 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d902      	bls.n	8001cbe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	74fb      	strb	r3, [r7, #19]
            break;
 8001cbc:	e006      	b.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0ec      	beq.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001ccc:	7cfb      	ldrb	r3, [r7, #19]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10b      	bne.n	8001cea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ce8:	e008      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001cea:	7cfb      	ldrb	r3, [r7, #19]
 8001cec:	74bb      	strb	r3, [r7, #18]
 8001cee:	e005      	b.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cf8:	7cfb      	ldrb	r3, [r7, #19]
 8001cfa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cfc:	7c7b      	ldrb	r3, [r7, #17]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d105      	bne.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d02:	4ba6      	ldr	r3, [pc, #664]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	4aa5      	ldr	r2, [pc, #660]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00a      	beq.n	8001d30 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d1a:	4ba0      	ldr	r3, [pc, #640]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d20:	f023 0203 	bic.w	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	499c      	ldr	r1, [pc, #624]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00a      	beq.n	8001d52 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d3c:	4b97      	ldr	r3, [pc, #604]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d42:	f023 020c 	bic.w	r2, r3, #12
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	4994      	ldr	r1, [pc, #592]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00a      	beq.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d5e:	4b8f      	ldr	r3, [pc, #572]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d64:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	498b      	ldr	r1, [pc, #556]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00a      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d80:	4b86      	ldr	r3, [pc, #536]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d86:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	4983      	ldr	r1, [pc, #524]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00a      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001da2:	4b7e      	ldr	r3, [pc, #504]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	497a      	ldr	r1, [pc, #488]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d00a      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dc4:	4b75      	ldr	r3, [pc, #468]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	4972      	ldr	r1, [pc, #456]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00a      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001de6:	4b6d      	ldr	r3, [pc, #436]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
 8001df4:	4969      	ldr	r1, [pc, #420]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d00a      	beq.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e08:	4b64      	ldr	r3, [pc, #400]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4961      	ldr	r1, [pc, #388]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00a      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e2a:	4b5c      	ldr	r3, [pc, #368]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e30:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	4958      	ldr	r1, [pc, #352]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d015      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e52:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	4950      	ldr	r1, [pc, #320]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e6a:	d105      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e6c:	4b4b      	ldr	r3, [pc, #300]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a4a      	ldr	r2, [pc, #296]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d015      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001e84:	4b45      	ldr	r3, [pc, #276]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e92:	4942      	ldr	r1, [pc, #264]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea2:	d105      	bne.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4a3c      	ldr	r2, [pc, #240]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d015      	beq.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ebc:	4b37      	ldr	r3, [pc, #220]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4934      	ldr	r1, [pc, #208]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eda:	d105      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001edc:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	4a2e      	ldr	r2, [pc, #184]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ee2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ee6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d015      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ef4:	4b29      	ldr	r3, [pc, #164]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001efa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f02:	4926      	ldr	r1, [pc, #152]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f12:	d105      	bne.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a20      	ldr	r2, [pc, #128]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f1e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d015      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3a:	4918      	ldr	r1, [pc, #96]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f4a:	d105      	bne.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4a12      	ldr	r2, [pc, #72]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d015      	beq.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f72:	490a      	ldr	r1, [pc, #40]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f82:	d105      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8001f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8001f90:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000

08001fa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e042      	b.n	8002038 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7fe fc65 	bl	8000894 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2224      	movs	r2, #36	; 0x24
 8001fce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0201 	bic.w	r2, r2, #1
 8001fe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f8c2 	bl	800216c <UART_SetConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e022      	b.n	8002038 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d002      	beq.n	8002000 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fb82 	bl	8002704 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800200e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800201e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 fc09 	bl	8002848 <UART_CheckIdleState>
 8002036:	4603      	mov	r3, r0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002056:	2b20      	cmp	r3, #32
 8002058:	f040 8083 	bne.w	8002162 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <HAL_UART_Transmit+0x28>
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e07b      	b.n	8002164 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002072:	2b01      	cmp	r3, #1
 8002074:	d101      	bne.n	800207a <HAL_UART_Transmit+0x3a>
 8002076:	2302      	movs	r3, #2
 8002078:	e074      	b.n	8002164 <HAL_UART_Transmit+0x124>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2221      	movs	r2, #33	; 0x21
 800208e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002092:	f7fe fd21 	bl	8000ad8 <HAL_GetTick>
 8002096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	88fa      	ldrh	r2, [r7, #6]
 80020a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020b0:	d108      	bne.n	80020c4 <HAL_UART_Transmit+0x84>
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d104      	bne.n	80020c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80020ba:	2300      	movs	r3, #0
 80020bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	e003      	b.n	80020cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80020d4:	e02c      	b.n	8002130 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2200      	movs	r2, #0
 80020de:	2180      	movs	r1, #128	; 0x80
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 fbfc 	bl	80028de <UART_WaitOnFlagUntilTimeout>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e039      	b.n	8002164 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10b      	bne.n	800210e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	881b      	ldrh	r3, [r3, #0]
 80020fa:	461a      	mov	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	3302      	adds	r3, #2
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	e007      	b.n	800211e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	781a      	ldrb	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	3301      	adds	r3, #1
 800211c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002124:	b29b      	uxth	r3, r3
 8002126:	3b01      	subs	r3, #1
 8002128:	b29a      	uxth	r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002136:	b29b      	uxth	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d1cc      	bne.n	80020d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2200      	movs	r2, #0
 8002144:	2140      	movs	r1, #64	; 0x40
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 fbc9 	bl	80028de <UART_WaitOnFlagUntilTimeout>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e006      	b.n	8002164 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002162:	2302      	movs	r3, #2
  }
}
 8002164:	4618      	mov	r0, r3
 8002166:	3720      	adds	r7, #32
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800216c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002170:	b08c      	sub	sp, #48	; 0x30
 8002172:	af00      	add	r7, sp, #0
 8002174:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	689a      	ldr	r2, [r3, #8]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	431a      	orrs	r2, r3
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	431a      	orrs	r2, r3
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	4313      	orrs	r3, r2
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	4bab      	ldr	r3, [pc, #684]	; (8002448 <UART_SetConfig+0x2dc>)
 800219c:	4013      	ands	r3, r2
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021a4:	430b      	orrs	r3, r1
 80021a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	68da      	ldr	r2, [r3, #12]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4aa0      	ldr	r2, [pc, #640]	; (800244c <UART_SetConfig+0x2e0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d004      	beq.n	80021d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021d4:	4313      	orrs	r3, r2
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80021e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021ec:	430b      	orrs	r3, r1
 80021ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f023 010f 	bic.w	r1, r3, #15
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a91      	ldr	r2, [pc, #580]	; (8002450 <UART_SetConfig+0x2e4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d125      	bne.n	800225c <UART_SetConfig+0xf0>
 8002210:	4b90      	ldr	r3, [pc, #576]	; (8002454 <UART_SetConfig+0x2e8>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b03      	cmp	r3, #3
 800221c:	d81a      	bhi.n	8002254 <UART_SetConfig+0xe8>
 800221e:	a201      	add	r2, pc, #4	; (adr r2, 8002224 <UART_SetConfig+0xb8>)
 8002220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002224:	08002235 	.word	0x08002235
 8002228:	08002245 	.word	0x08002245
 800222c:	0800223d 	.word	0x0800223d
 8002230:	0800224d 	.word	0x0800224d
 8002234:	2301      	movs	r3, #1
 8002236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800223a:	e0d6      	b.n	80023ea <UART_SetConfig+0x27e>
 800223c:	2302      	movs	r3, #2
 800223e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002242:	e0d2      	b.n	80023ea <UART_SetConfig+0x27e>
 8002244:	2304      	movs	r3, #4
 8002246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800224a:	e0ce      	b.n	80023ea <UART_SetConfig+0x27e>
 800224c:	2308      	movs	r3, #8
 800224e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002252:	e0ca      	b.n	80023ea <UART_SetConfig+0x27e>
 8002254:	2310      	movs	r3, #16
 8002256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800225a:	e0c6      	b.n	80023ea <UART_SetConfig+0x27e>
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a7d      	ldr	r2, [pc, #500]	; (8002458 <UART_SetConfig+0x2ec>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d138      	bne.n	80022d8 <UART_SetConfig+0x16c>
 8002266:	4b7b      	ldr	r3, [pc, #492]	; (8002454 <UART_SetConfig+0x2e8>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	2b0c      	cmp	r3, #12
 8002272:	d82d      	bhi.n	80022d0 <UART_SetConfig+0x164>
 8002274:	a201      	add	r2, pc, #4	; (adr r2, 800227c <UART_SetConfig+0x110>)
 8002276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227a:	bf00      	nop
 800227c:	080022b1 	.word	0x080022b1
 8002280:	080022d1 	.word	0x080022d1
 8002284:	080022d1 	.word	0x080022d1
 8002288:	080022d1 	.word	0x080022d1
 800228c:	080022c1 	.word	0x080022c1
 8002290:	080022d1 	.word	0x080022d1
 8002294:	080022d1 	.word	0x080022d1
 8002298:	080022d1 	.word	0x080022d1
 800229c:	080022b9 	.word	0x080022b9
 80022a0:	080022d1 	.word	0x080022d1
 80022a4:	080022d1 	.word	0x080022d1
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	080022c9 	.word	0x080022c9
 80022b0:	2300      	movs	r3, #0
 80022b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022b6:	e098      	b.n	80023ea <UART_SetConfig+0x27e>
 80022b8:	2302      	movs	r3, #2
 80022ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022be:	e094      	b.n	80023ea <UART_SetConfig+0x27e>
 80022c0:	2304      	movs	r3, #4
 80022c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022c6:	e090      	b.n	80023ea <UART_SetConfig+0x27e>
 80022c8:	2308      	movs	r3, #8
 80022ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022ce:	e08c      	b.n	80023ea <UART_SetConfig+0x27e>
 80022d0:	2310      	movs	r3, #16
 80022d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022d6:	e088      	b.n	80023ea <UART_SetConfig+0x27e>
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a5f      	ldr	r2, [pc, #380]	; (800245c <UART_SetConfig+0x2f0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d125      	bne.n	800232e <UART_SetConfig+0x1c2>
 80022e2:	4b5c      	ldr	r3, [pc, #368]	; (8002454 <UART_SetConfig+0x2e8>)
 80022e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022ec:	2b30      	cmp	r3, #48	; 0x30
 80022ee:	d016      	beq.n	800231e <UART_SetConfig+0x1b2>
 80022f0:	2b30      	cmp	r3, #48	; 0x30
 80022f2:	d818      	bhi.n	8002326 <UART_SetConfig+0x1ba>
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d00a      	beq.n	800230e <UART_SetConfig+0x1a2>
 80022f8:	2b20      	cmp	r3, #32
 80022fa:	d814      	bhi.n	8002326 <UART_SetConfig+0x1ba>
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d002      	beq.n	8002306 <UART_SetConfig+0x19a>
 8002300:	2b10      	cmp	r3, #16
 8002302:	d008      	beq.n	8002316 <UART_SetConfig+0x1aa>
 8002304:	e00f      	b.n	8002326 <UART_SetConfig+0x1ba>
 8002306:	2300      	movs	r3, #0
 8002308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800230c:	e06d      	b.n	80023ea <UART_SetConfig+0x27e>
 800230e:	2302      	movs	r3, #2
 8002310:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002314:	e069      	b.n	80023ea <UART_SetConfig+0x27e>
 8002316:	2304      	movs	r3, #4
 8002318:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800231c:	e065      	b.n	80023ea <UART_SetConfig+0x27e>
 800231e:	2308      	movs	r3, #8
 8002320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002324:	e061      	b.n	80023ea <UART_SetConfig+0x27e>
 8002326:	2310      	movs	r3, #16
 8002328:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800232c:	e05d      	b.n	80023ea <UART_SetConfig+0x27e>
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <UART_SetConfig+0x2f4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d125      	bne.n	8002384 <UART_SetConfig+0x218>
 8002338:	4b46      	ldr	r3, [pc, #280]	; (8002454 <UART_SetConfig+0x2e8>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002342:	2bc0      	cmp	r3, #192	; 0xc0
 8002344:	d016      	beq.n	8002374 <UART_SetConfig+0x208>
 8002346:	2bc0      	cmp	r3, #192	; 0xc0
 8002348:	d818      	bhi.n	800237c <UART_SetConfig+0x210>
 800234a:	2b80      	cmp	r3, #128	; 0x80
 800234c:	d00a      	beq.n	8002364 <UART_SetConfig+0x1f8>
 800234e:	2b80      	cmp	r3, #128	; 0x80
 8002350:	d814      	bhi.n	800237c <UART_SetConfig+0x210>
 8002352:	2b00      	cmp	r3, #0
 8002354:	d002      	beq.n	800235c <UART_SetConfig+0x1f0>
 8002356:	2b40      	cmp	r3, #64	; 0x40
 8002358:	d008      	beq.n	800236c <UART_SetConfig+0x200>
 800235a:	e00f      	b.n	800237c <UART_SetConfig+0x210>
 800235c:	2300      	movs	r3, #0
 800235e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002362:	e042      	b.n	80023ea <UART_SetConfig+0x27e>
 8002364:	2302      	movs	r3, #2
 8002366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800236a:	e03e      	b.n	80023ea <UART_SetConfig+0x27e>
 800236c:	2304      	movs	r3, #4
 800236e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002372:	e03a      	b.n	80023ea <UART_SetConfig+0x27e>
 8002374:	2308      	movs	r3, #8
 8002376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800237a:	e036      	b.n	80023ea <UART_SetConfig+0x27e>
 800237c:	2310      	movs	r3, #16
 800237e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002382:	e032      	b.n	80023ea <UART_SetConfig+0x27e>
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a30      	ldr	r2, [pc, #192]	; (800244c <UART_SetConfig+0x2e0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d12a      	bne.n	80023e4 <UART_SetConfig+0x278>
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <UART_SetConfig+0x2e8>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002394:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002398:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800239c:	d01a      	beq.n	80023d4 <UART_SetConfig+0x268>
 800239e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023a2:	d81b      	bhi.n	80023dc <UART_SetConfig+0x270>
 80023a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023a8:	d00c      	beq.n	80023c4 <UART_SetConfig+0x258>
 80023aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023ae:	d815      	bhi.n	80023dc <UART_SetConfig+0x270>
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <UART_SetConfig+0x250>
 80023b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b8:	d008      	beq.n	80023cc <UART_SetConfig+0x260>
 80023ba:	e00f      	b.n	80023dc <UART_SetConfig+0x270>
 80023bc:	2300      	movs	r3, #0
 80023be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023c2:	e012      	b.n	80023ea <UART_SetConfig+0x27e>
 80023c4:	2302      	movs	r3, #2
 80023c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023ca:	e00e      	b.n	80023ea <UART_SetConfig+0x27e>
 80023cc:	2304      	movs	r3, #4
 80023ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023d2:	e00a      	b.n	80023ea <UART_SetConfig+0x27e>
 80023d4:	2308      	movs	r3, #8
 80023d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023da:	e006      	b.n	80023ea <UART_SetConfig+0x27e>
 80023dc:	2310      	movs	r3, #16
 80023de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023e2:	e002      	b.n	80023ea <UART_SetConfig+0x27e>
 80023e4:	2310      	movs	r3, #16
 80023e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a17      	ldr	r2, [pc, #92]	; (800244c <UART_SetConfig+0x2e0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	f040 80a8 	bne.w	8002546 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80023f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80023fa:	2b08      	cmp	r3, #8
 80023fc:	d834      	bhi.n	8002468 <UART_SetConfig+0x2fc>
 80023fe:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <UART_SetConfig+0x298>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	08002429 	.word	0x08002429
 8002408:	08002469 	.word	0x08002469
 800240c:	08002431 	.word	0x08002431
 8002410:	08002469 	.word	0x08002469
 8002414:	08002437 	.word	0x08002437
 8002418:	08002469 	.word	0x08002469
 800241c:	08002469 	.word	0x08002469
 8002420:	08002469 	.word	0x08002469
 8002424:	0800243f 	.word	0x0800243f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002428:	f7ff fb58 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 800242c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800242e:	e021      	b.n	8002474 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002430:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <UART_SetConfig+0x2f8>)
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002434:	e01e      	b.n	8002474 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002436:	f7ff fae3 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 800243a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800243c:	e01a      	b.n	8002474 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800243e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002444:	e016      	b.n	8002474 <UART_SetConfig+0x308>
 8002446:	bf00      	nop
 8002448:	cfff69f3 	.word	0xcfff69f3
 800244c:	40008000 	.word	0x40008000
 8002450:	40013800 	.word	0x40013800
 8002454:	40021000 	.word	0x40021000
 8002458:	40004400 	.word	0x40004400
 800245c:	40004800 	.word	0x40004800
 8002460:	40004c00 	.word	0x40004c00
 8002464:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002472:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 812a 	beq.w	80026d0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	4a9e      	ldr	r2, [pc, #632]	; (80026fc <UART_SetConfig+0x590>)
 8002482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002486:	461a      	mov	r2, r3
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	fbb3 f3f2 	udiv	r3, r3, r2
 800248e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	429a      	cmp	r2, r3
 800249e:	d305      	bcc.n	80024ac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d903      	bls.n	80024b4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80024b2:	e10d      	b.n	80026d0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	2200      	movs	r2, #0
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	60fa      	str	r2, [r7, #12]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	4a8e      	ldr	r2, [pc, #568]	; (80026fc <UART_SetConfig+0x590>)
 80024c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2200      	movs	r2, #0
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024d6:	f7fd fea7 	bl	8000228 <__aeabi_uldivmod>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f04f 0200 	mov.w	r2, #0
 80024e6:	f04f 0300 	mov.w	r3, #0
 80024ea:	020b      	lsls	r3, r1, #8
 80024ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80024f0:	0202      	lsls	r2, r0, #8
 80024f2:	6979      	ldr	r1, [r7, #20]
 80024f4:	6849      	ldr	r1, [r1, #4]
 80024f6:	0849      	lsrs	r1, r1, #1
 80024f8:	2000      	movs	r0, #0
 80024fa:	460c      	mov	r4, r1
 80024fc:	4605      	mov	r5, r0
 80024fe:	eb12 0804 	adds.w	r8, r2, r4
 8002502:	eb43 0905 	adc.w	r9, r3, r5
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	469a      	mov	sl, r3
 800250e:	4693      	mov	fp, r2
 8002510:	4652      	mov	r2, sl
 8002512:	465b      	mov	r3, fp
 8002514:	4640      	mov	r0, r8
 8002516:	4649      	mov	r1, r9
 8002518:	f7fd fe86 	bl	8000228 <__aeabi_uldivmod>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4613      	mov	r3, r2
 8002522:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800252a:	d308      	bcc.n	800253e <UART_SetConfig+0x3d2>
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002532:	d204      	bcs.n	800253e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	60da      	str	r2, [r3, #12]
 800253c:	e0c8      	b.n	80026d0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002544:	e0c4      	b.n	80026d0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800254e:	d167      	bne.n	8002620 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002550:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002554:	2b08      	cmp	r3, #8
 8002556:	d828      	bhi.n	80025aa <UART_SetConfig+0x43e>
 8002558:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <UART_SetConfig+0x3f4>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002585 	.word	0x08002585
 8002564:	0800258d 	.word	0x0800258d
 8002568:	08002595 	.word	0x08002595
 800256c:	080025ab 	.word	0x080025ab
 8002570:	0800259b 	.word	0x0800259b
 8002574:	080025ab 	.word	0x080025ab
 8002578:	080025ab 	.word	0x080025ab
 800257c:	080025ab 	.word	0x080025ab
 8002580:	080025a3 	.word	0x080025a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002584:	f7ff faaa 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 8002588:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800258a:	e014      	b.n	80025b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800258c:	f7ff fabc 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 8002590:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002592:	e010      	b.n	80025b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002594:	4b5a      	ldr	r3, [pc, #360]	; (8002700 <UART_SetConfig+0x594>)
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002598:	e00d      	b.n	80025b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800259a:	f7ff fa31 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 800259e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025a0:	e009      	b.n	80025b6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025a8:	e005      	b.n	80025b6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80025b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8089 	beq.w	80026d0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	4a4e      	ldr	r2, [pc, #312]	; (80026fc <UART_SetConfig+0x590>)
 80025c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025c8:	461a      	mov	r2, r3
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80025d0:	005a      	lsls	r2, r3, #1
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	085b      	lsrs	r3, r3, #1
 80025d8:	441a      	add	r2, r3
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025e4:	6a3b      	ldr	r3, [r7, #32]
 80025e6:	2b0f      	cmp	r3, #15
 80025e8:	d916      	bls.n	8002618 <UART_SetConfig+0x4ac>
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f0:	d212      	bcs.n	8002618 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f023 030f 	bic.w	r3, r3, #15
 80025fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	085b      	lsrs	r3, r3, #1
 8002600:	b29b      	uxth	r3, r3
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	b29a      	uxth	r2, r3
 8002608:	8bfb      	ldrh	r3, [r7, #30]
 800260a:	4313      	orrs	r3, r2
 800260c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	8bfa      	ldrh	r2, [r7, #30]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	e05b      	b.n	80026d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800261e:	e057      	b.n	80026d0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002620:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002624:	2b08      	cmp	r3, #8
 8002626:	d828      	bhi.n	800267a <UART_SetConfig+0x50e>
 8002628:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <UART_SetConfig+0x4c4>)
 800262a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262e:	bf00      	nop
 8002630:	08002655 	.word	0x08002655
 8002634:	0800265d 	.word	0x0800265d
 8002638:	08002665 	.word	0x08002665
 800263c:	0800267b 	.word	0x0800267b
 8002640:	0800266b 	.word	0x0800266b
 8002644:	0800267b 	.word	0x0800267b
 8002648:	0800267b 	.word	0x0800267b
 800264c:	0800267b 	.word	0x0800267b
 8002650:	08002673 	.word	0x08002673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002654:	f7ff fa42 	bl	8001adc <HAL_RCC_GetPCLK1Freq>
 8002658:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800265a:	e014      	b.n	8002686 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800265c:	f7ff fa54 	bl	8001b08 <HAL_RCC_GetPCLK2Freq>
 8002660:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002662:	e010      	b.n	8002686 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002664:	4b26      	ldr	r3, [pc, #152]	; (8002700 <UART_SetConfig+0x594>)
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002668:	e00d      	b.n	8002686 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800266a:	f7ff f9c9 	bl	8001a00 <HAL_RCC_GetSysClockFreq>
 800266e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002670:	e009      	b.n	8002686 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002678:	e005      	b.n	8002686 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002684:	bf00      	nop
    }

    if (pclk != 0U)
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	2b00      	cmp	r3, #0
 800268a:	d021      	beq.n	80026d0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <UART_SetConfig+0x590>)
 8002692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002696:	461a      	mov	r2, r3
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	fbb3 f2f2 	udiv	r2, r3, r2
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	085b      	lsrs	r3, r3, #1
 80026a4:	441a      	add	r2, r3
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026b0:	6a3b      	ldr	r3, [r7, #32]
 80026b2:	2b0f      	cmp	r3, #15
 80026b4:	d909      	bls.n	80026ca <UART_SetConfig+0x55e>
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026bc:	d205      	bcs.n	80026ca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60da      	str	r2, [r3, #12]
 80026c8:	e002      	b.n	80026d0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2201      	movs	r2, #1
 80026dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2200      	movs	r2, #0
 80026e4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2200      	movs	r2, #0
 80026ea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80026ec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3730      	adds	r7, #48	; 0x30
 80026f4:	46bd      	mov	sp, r7
 80026f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026fa:	bf00      	nop
 80026fc:	08002cfc 	.word	0x08002cfc
 8002700:	00f42400 	.word	0x00f42400

08002704 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	430a      	orrs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ba:	f003 0320 	and.w	r3, r3, #32
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01a      	beq.n	800281a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002802:	d10a      	bne.n	800281a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00a      	beq.n	800283c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	605a      	str	r2, [r3, #4]
  }
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b086      	sub	sp, #24
 800284c:	af02      	add	r7, sp, #8
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002858:	f7fe f93e 	bl	8000ad8 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b08      	cmp	r3, #8
 800286a:	d10e      	bne.n	800288a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800286c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f82f 	bl	80028de <UART_WaitOnFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e025      	b.n	80028d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b04      	cmp	r3, #4
 8002896:	d10e      	bne.n	80028b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f819 	bl	80028de <UART_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e00f      	b.n	80028d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2220      	movs	r2, #32
 80028c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b09c      	sub	sp, #112	; 0x70
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4613      	mov	r3, r2
 80028ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ee:	e0a9      	b.n	8002a44 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f6:	f000 80a5 	beq.w	8002a44 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fa:	f7fe f8ed 	bl	8000ad8 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002906:	429a      	cmp	r2, r3
 8002908:	d302      	bcc.n	8002910 <UART_WaitOnFlagUntilTimeout+0x32>
 800290a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800290c:	2b00      	cmp	r3, #0
 800290e:	d140      	bne.n	8002992 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002918:	e853 3f00 	ldrex	r3, [r3]
 800291c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800291e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002920:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002924:	667b      	str	r3, [r7, #100]	; 0x64
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	461a      	mov	r2, r3
 800292c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800292e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002930:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002934:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800293c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e6      	bne.n	8002910 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3308      	adds	r3, #8
 8002948:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800294c:	e853 3f00 	ldrex	r3, [r3]
 8002950:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	663b      	str	r3, [r7, #96]	; 0x60
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3308      	adds	r3, #8
 8002960:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002962:	64ba      	str	r2, [r7, #72]	; 0x48
 8002964:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002966:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800296a:	e841 2300 	strex	r3, r2, [r1]
 800296e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1e5      	bne.n	8002942 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e069      	b.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d051      	beq.n	8002a44 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029ae:	d149      	bne.n	8002a44 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029c2:	e853 3f00 	ldrex	r3, [r3]
 80029c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80029ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	461a      	mov	r2, r3
 80029d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
 80029da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e0:	e841 2300 	strex	r3, r2, [r1]
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1e6      	bne.n	80029ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3308      	adds	r3, #8
 80029f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	e853 3f00 	ldrex	r3, [r3]
 80029fa:	613b      	str	r3, [r7, #16]
   return(result);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f023 0301 	bic.w	r3, r3, #1
 8002a02:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3308      	adds	r3, #8
 8002a0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002a0c:	623a      	str	r2, [r7, #32]
 8002a0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a10:	69f9      	ldr	r1, [r7, #28]
 8002a12:	6a3a      	ldr	r2, [r7, #32]
 8002a14:	e841 2300 	strex	r3, r2, [r1]
 8002a18:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1e5      	bne.n	80029ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e010      	b.n	8002a66 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	f43f af46 	beq.w	80028f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3770      	adds	r7, #112	; 0x70
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}

08002a6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b085      	sub	sp, #20
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d101      	bne.n	8002a84 <HAL_UARTEx_DisableFifoMode+0x16>
 8002a80:	2302      	movs	r3, #2
 8002a82:	e027      	b.n	8002ad4 <HAL_UARTEx_DisableFifoMode+0x66>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2224      	movs	r2, #36	; 0x24
 8002a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f022 0201 	bic.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002ab2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3714      	adds	r7, #20
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e02d      	b.n	8002b54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2224      	movs	r2, #36	; 0x24
 8002b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f84f 	bl	8002bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2220      	movs	r2, #32
 8002b46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d101      	bne.n	8002b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002b70:	2302      	movs	r3, #2
 8002b72:	e02d      	b.n	8002bd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2224      	movs	r2, #36	; 0x24
 8002b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 0201 	bic.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f811 	bl	8002bd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d108      	bne.n	8002bfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002bf8:	e031      	b.n	8002c5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002bfe:	2308      	movs	r3, #8
 8002c00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	0e5b      	lsrs	r3, r3, #25
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	0f5b      	lsrs	r3, r3, #29
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	f003 0307 	and.w	r3, r3, #7
 8002c20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c22:	7bbb      	ldrb	r3, [r7, #14]
 8002c24:	7b3a      	ldrb	r2, [r7, #12]
 8002c26:	4911      	ldr	r1, [pc, #68]	; (8002c6c <UARTEx_SetNbDataToProcess+0x94>)
 8002c28:	5c8a      	ldrb	r2, [r1, r2]
 8002c2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002c2e:	7b3a      	ldrb	r2, [r7, #12]
 8002c30:	490f      	ldr	r1, [pc, #60]	; (8002c70 <UARTEx_SetNbDataToProcess+0x98>)
 8002c32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002c34:	fb93 f3f2 	sdiv	r3, r3, r2
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	7b7a      	ldrb	r2, [r7, #13]
 8002c44:	4909      	ldr	r1, [pc, #36]	; (8002c6c <UARTEx_SetNbDataToProcess+0x94>)
 8002c46:	5c8a      	ldrb	r2, [r1, r2]
 8002c48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002c4c:	7b7a      	ldrb	r2, [r7, #13]
 8002c4e:	4908      	ldr	r1, [pc, #32]	; (8002c70 <UARTEx_SetNbDataToProcess+0x98>)
 8002c50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002c52:	fb93 f3f2 	sdiv	r3, r3, r2
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	08002d14 	.word	0x08002d14
 8002c70:	08002d1c 	.word	0x08002d1c

08002c74 <memset>:
 8002c74:	4402      	add	r2, r0
 8002c76:	4603      	mov	r3, r0
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <memset+0xa>
 8002c7c:	4770      	bx	lr
 8002c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c82:	e7f9      	b.n	8002c78 <memset+0x4>

08002c84 <__libc_init_array>:
 8002c84:	b570      	push	{r4, r5, r6, lr}
 8002c86:	4d0d      	ldr	r5, [pc, #52]	; (8002cbc <__libc_init_array+0x38>)
 8002c88:	4c0d      	ldr	r4, [pc, #52]	; (8002cc0 <__libc_init_array+0x3c>)
 8002c8a:	1b64      	subs	r4, r4, r5
 8002c8c:	10a4      	asrs	r4, r4, #2
 8002c8e:	2600      	movs	r6, #0
 8002c90:	42a6      	cmp	r6, r4
 8002c92:	d109      	bne.n	8002ca8 <__libc_init_array+0x24>
 8002c94:	4d0b      	ldr	r5, [pc, #44]	; (8002cc4 <__libc_init_array+0x40>)
 8002c96:	4c0c      	ldr	r4, [pc, #48]	; (8002cc8 <__libc_init_array+0x44>)
 8002c98:	f000 f818 	bl	8002ccc <_init>
 8002c9c:	1b64      	subs	r4, r4, r5
 8002c9e:	10a4      	asrs	r4, r4, #2
 8002ca0:	2600      	movs	r6, #0
 8002ca2:	42a6      	cmp	r6, r4
 8002ca4:	d105      	bne.n	8002cb2 <__libc_init_array+0x2e>
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
 8002ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cac:	4798      	blx	r3
 8002cae:	3601      	adds	r6, #1
 8002cb0:	e7ee      	b.n	8002c90 <__libc_init_array+0xc>
 8002cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb6:	4798      	blx	r3
 8002cb8:	3601      	adds	r6, #1
 8002cba:	e7f2      	b.n	8002ca2 <__libc_init_array+0x1e>
 8002cbc:	08002d2c 	.word	0x08002d2c
 8002cc0:	08002d2c 	.word	0x08002d2c
 8002cc4:	08002d2c 	.word	0x08002d2c
 8002cc8:	08002d30 	.word	0x08002d30

08002ccc <_init>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	bf00      	nop
 8002cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cd2:	bc08      	pop	{r3}
 8002cd4:	469e      	mov	lr, r3
 8002cd6:	4770      	bx	lr

08002cd8 <_fini>:
 8002cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cda:	bf00      	nop
 8002cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cde:	bc08      	pop	{r3}
 8002ce0:	469e      	mov	lr, r3
 8002ce2:	4770      	bx	lr
